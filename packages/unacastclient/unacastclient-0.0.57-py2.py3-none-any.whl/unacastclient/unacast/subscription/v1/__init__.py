# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/subscription/v1/subscription_status.proto, unacast/subscription/v1/billing_account.proto, unacast/subscription/v1/subscription.proto, unacast/subscription/v1/subscription_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class SubscriptionAccessKind(betterproto.Enum):
    ACCESS_UNSPECIFIED = 0
    DESCRIPTIVE = 3
    FREE = 6
    PARTIAL = 9
    UNRESTRICTED = 15


@dataclass(eq=False, repr=False)
class SubscriptionStatus(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    additional_subscription_ids: List[str] = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)
    current_access_kind: "SubscriptionAccessKind" = betterproto.enum_field(5)
    resource_name: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BillingAccount(betterproto.Message):
    id: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)
    create_time_string: str = betterproto.string_field(7)
    members: List["BillingAccountMember"] = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BillingAccountMember(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BillingAccountSpec(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Subscription(betterproto.Message):
    id: str = betterproto.string_field(1)
    sku: str = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(5)
    expire_time_string: str = betterproto.string_field(6)
    created_time_string: str = betterproto.string_field(7)
    billing_account: "BillingAccount" = betterproto.message_field(10)
    resources: List["ResourceSubscription"] = betterproto.message_field(12)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SubscriptionSpec(betterproto.Message):
    sku: str = betterproto.string_field(1)
    resources: List[str] = betterproto.string_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ResourceSubscription(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    resource_name: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteBillingAccountRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateSubscriptionRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    spec: "SubscriptionSpec" = betterproto.message_field(5)
    billing_account_spec: "BillingAccountSpec" = betterproto.message_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateSubscriptionResponse(betterproto.Message):
    subscription: "Subscription" = betterproto.message_field(1)
    billing_account: "BillingAccount" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateSubscriptionRequest(betterproto.Message):
    subscription: "Subscription" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListSubscriptionsRequest(betterproto.Message):
    billing_account_filter: List[str] = betterproto.string_field(1)
    sku_filter: List[str] = betterproto.string_field(2)
    show_expired: bool = betterproto.bool_field(6)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListSubscriptionsResponse(betterproto.Message):
    subscriptions: List["Subscription"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BulkSubscriptionStatusRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    resources: List["RequestResource"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RequestResource(betterproto.Message):
    resource_name: str = betterproto.string_field(1)
    resource_lens: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BulkSubscriptionStatusResponse(betterproto.Message):
    resource_status: List["SubscriptionStatus"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListBillingAccountsRequest(betterproto.Message):
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)
    limit_to_current_user: bool = betterproto.bool_field(2)
    filter_out_baccs_with_no_access_to_catalog: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListBillingAccountsResponse(betterproto.Message):
    billing_accounts: List["BillingAccount"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddBillingAccountMemberRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_full_name: str = betterproto.string_field(3)
    member_email: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddBillingAccountMemberResponse(betterproto.Message):
    member: "BillingAccountMember" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveBillingAccountMemberRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


class SubscriptionServiceStub(betterproto.ServiceStub):
    async def create_subscription(
        self,
        *,
        billing_account_id: str = "",
        spec: "SubscriptionSpec" = None,
        billing_account_spec: "BillingAccountSpec" = None,
    ) -> "CreateSubscriptionResponse":

        request = CreateSubscriptionRequest()
        request.billing_account_id = billing_account_id
        if spec is not None:
            request.spec = spec
        if billing_account_spec is not None:
            request.billing_account_spec = billing_account_spec

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/CreateSubscription",
            request,
            CreateSubscriptionResponse,
        )

    async def get_subscription(self, *, subscription_id: str = "") -> "Subscription":

        request = GetSubscriptionRequest()
        request.subscription_id = subscription_id

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/GetSubscription",
            request,
            Subscription,
        )

    async def update_subscription(
        self,
        *,
        subscription: "Subscription" = None,
        update_mask: "betterproto_lib_google_protobuf.FieldMask" = None,
    ) -> "Subscription":

        request = UpdateSubscriptionRequest()
        if subscription is not None:
            request.subscription = subscription
        if update_mask is not None:
            request.update_mask = update_mask

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/UpdateSubscription",
            request,
            Subscription,
        )

    async def delete_subscription(
        self, *, subscription_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DeleteSubscriptionRequest()
        request.subscription_id = subscription_id

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/DeleteSubscription",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_subscriptions(
        self,
        *,
        billing_account_filter: Optional[List[str]] = None,
        sku_filter: Optional[List[str]] = None,
        show_expired: bool = False,
        page_size: int = 0,
        page_token: str = "",
    ) -> "ListSubscriptionsResponse":
        billing_account_filter = billing_account_filter or []
        sku_filter = sku_filter or []

        request = ListSubscriptionsRequest()
        request.billing_account_filter = billing_account_filter
        request.sku_filter = sku_filter
        request.show_expired = show_expired
        request.page_size = page_size
        request.page_token = page_token

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ListSubscriptions",
            request,
            ListSubscriptionsResponse,
        )

    async def list_billing_accounts(
        self,
        *,
        page_size: int = 0,
        page_token: str = "",
        limit_to_current_user: bool = False,
        filter_out_baccs_with_no_access_to_catalog: str = "",
    ) -> "ListBillingAccountsResponse":

        request = ListBillingAccountsRequest()
        request.page_size = page_size
        request.page_token = page_token
        request.limit_to_current_user = limit_to_current_user
        request.filter_out_baccs_with_no_access_to_catalog = (
            filter_out_baccs_with_no_access_to_catalog
        )

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ListBillingAccounts",
            request,
            ListBillingAccountsResponse,
        )

    async def add_billing_account_member(
        self,
        *,
        billing_account_id: str = "",
        member_full_name: str = "",
        member_email: str = "",
    ) -> "AddBillingAccountMemberResponse":

        request = AddBillingAccountMemberRequest()
        request.billing_account_id = billing_account_id
        request.member_full_name = member_full_name
        request.member_email = member_email

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/AddBillingAccountMember",
            request,
            AddBillingAccountMemberResponse,
        )

    async def remove_billing_account_member(
        self, *, billing_account_id: str = "", member_email: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = RemoveBillingAccountMemberRequest()
        request.billing_account_id = billing_account_id
        request.member_email = member_email

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/RemoveBillingAccountMember",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def delete_billing_account(
        self, *, billing_account_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DeleteBillingAccountRequest()
        request.billing_account_id = billing_account_id

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/DeleteBillingAccount",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def bulk_subscription_status(
        self,
        *,
        billing_account_id: str = "",
        resources: Optional[List["RequestResource"]] = None,
    ) -> "BulkSubscriptionStatusResponse":
        resources = resources or []

        request = BulkSubscriptionStatusRequest()
        request.billing_account_id = billing_account_id
        if resources is not None:
            request.resources = resources

        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/BulkSubscriptionStatus",
            request,
            BulkSubscriptionStatusResponse,
        )


import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
