# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/maps/v1/address_component.proto, unacast/maps/v1/layer.proto, unacast/maps/v1/feature.proto, unacast/maps/v1/map_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class ComponentKind(betterproto.Enum):
    FREE_FORM_UNSPECIFIED = 0
    MAP = 1
    TAXONOMY = 2


@dataclass(eq=False, repr=False)
class AddressComponent(betterproto.Message):
    # @exclude @inject_tag: `gorm:"primary_key"`
    component: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    kind: "ComponentKind" = betterproto.enum_field(3)
    map_layer_id: str = betterproto.string_field(4)
    short_name: str = betterproto.string_field(7)
    display_name: str = betterproto.string_field(8)
    index_id: str = betterproto.string_field(9)
    description: str = betterproto.string_field(10)
    index: "__index_v1__.Index" = betterproto.message_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddressComponentValue(betterproto.Message):
    component: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)
    # @exclude @inject_tag: `bigquery:"short_name"`
    short_name: str = betterproto.string_field(3)
    # @exclude @inject_tag: `bigquery:"display_name"`
    display_name: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddressComponentFilter(betterproto.Message):
    component: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Layer(betterproto.Message):
    # @exclude @inject_tag: `gorm:"primary_key"`
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    address_components: List["AddressComponent"] = betterproto.message_field(4)
    index_id: str = betterproto.string_field(5)
    index: "__index_v1__.Index" = betterproto.message_field(6)
    display_name: str = betterproto.string_field(7)
    description: str = betterproto.string_field(8)
    spec: "LayerSpec" = betterproto.message_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LayerSpec(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    address_components: List["AddressComponentValueSpec"] = betterproto.message_field(2)
    # @exclude @inject_tag: `bigquery:"short_name"`
    feature_display_name: str = betterproto.string_field(5)
    # @exclude @inject_tag: `bigquery:"display_name"`
    feature_description: str = betterproto.string_field(6)
    attribution: str = betterproto.string_field(9)
    version: str = betterproto.string_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddressComponentValueSpec(betterproto.Message):
    component: str = betterproto.string_field(1)
    allow_empty_values: bool = betterproto.bool_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Feature(betterproto.Message):
    # @exclude @inject_tag: `gorm:"primary_key"`
    layer_id: str = betterproto.string_field(1)
    feature_id: str = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    geo: str = betterproto.string_field(6)
    address_components: List["AddressComponentValue"] = betterproto.message_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLayerRequest(betterproto.Message):
    # @exclude @inject_tag: `gorm:"primary_key"`
    layer_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListLayersRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListLayersResponse(betterproto.Message):
    layers: List["Layer"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListFeaturesRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    address_component_filter: List[
        "AddressComponentFilter"
    ] = betterproto.message_field(2)
    page_size: int = betterproto.int32_field(3)
    page_token: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListFeaturesResponse(betterproto.Message):
    features: List["Feature"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)
    total_size: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListAddressComponentsRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListAddressComponentsResponse(betterproto.Message):
    address_components: List["AddressComponent"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class MapServiceStub(betterproto.ServiceStub):
    async def get_layer(self, *, layer_id: str = "") -> "Layer":

        request = GetLayerRequest()
        request.layer_id = layer_id

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/GetLayer", request, Layer
        )

    async def list_layers(self) -> "ListLayersResponse":

        request = ListLayersRequest()

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/ListLayers", request, ListLayersResponse
        )

    async def list_features(
        self,
        *,
        layer_id: str = "",
        address_component_filter: Optional[List["AddressComponentFilter"]] = None,
        page_size: int = 0,
        page_token: str = "",
    ) -> "ListFeaturesResponse":
        address_component_filter = address_component_filter or []

        request = ListFeaturesRequest()
        request.layer_id = layer_id
        if address_component_filter is not None:
            request.address_component_filter = address_component_filter
        request.page_size = page_size
        request.page_token = page_token

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/ListFeatures", request, ListFeaturesResponse
        )

    async def list_address_components(self) -> "ListAddressComponentsResponse":

        request = ListAddressComponentsRequest()

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/ListAddressComponents",
            request,
            ListAddressComponentsResponse,
        )


from ...index import v1 as __index_v1__
