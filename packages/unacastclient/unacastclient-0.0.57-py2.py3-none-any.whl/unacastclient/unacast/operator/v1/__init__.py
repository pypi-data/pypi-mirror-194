# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/operator/v1/map_operator_service.proto, unacast/operator/v1/catalog_operator_service.proto, unacast/operator/v1/dimension_operator_service.proto, unacast/operator/v1/address_component_operator_service.proto, unacast/operator/v1/metric_operator_service.proto, unacast/operator/v1/index_job_operator_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class CreateLayerRequest(betterproto.Message):
    given_id: str = betterproto.string_field(2)
    spec: "__maps_v1__.LayerSpec" = betterproto.message_field(5)
    display_name: str = betterproto.string_field(8)
    description: str = betterproto.string_field(9)
    skip_address_component: bool = betterproto.bool_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexLayerRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    big_query_table_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexLayerResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteLayerRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateCatalogRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListDimensionRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListDimensionResponse(betterproto.Message):
    dimensions: List["__metric_v1__.Dimension"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateDimensionRequest(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexDimensionRequest(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(5)
    big_query_table_id: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexDimensionResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteDimensionRequest(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListAddressComponentRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(4)
    map_layer_id: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListAddressComponentResponse(betterproto.Message):
    address_components: List[
        "__maps_v1__.AddressComponent"
    ] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateAddressComponentRequest(betterproto.Message):
    component: str = betterproto.string_field(1)
    short_name: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(7)
    catalog_id: str = betterproto.string_field(4)
    kind: "__maps_v1__.ComponentKind" = betterproto.enum_field(5)
    map_layer_id: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexAddressComponentRequest(betterproto.Message):
    component: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(5)
    big_query_table_id: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexAddressComponentResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteAddressComponentRequest(betterproto.Message):
    component: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateMetricTagRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    tag_type: str = betterproto.string_field(2)
    tag_values: List[str] = betterproto.string_field(3)
    replace: bool = betterproto.bool_field(4)
    create_if_not_present: bool = betterproto.bool_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteMetricTagRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    tag_type: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateMetricRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    spec: "__metric_v1__.MetricSpec" = betterproto.message_field(3)
    catalog_id: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    version_spec: "__metric_v1__.VersionSpec" = betterproto.message_field(6)
    tags: List["__metric_v1__.TagSpec"] = betterproto.message_field(8)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateMetricRequest(betterproto.Message):
    metric: "__metric_v1__.Metric" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CleanupMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    big_query_table_id: str = betterproto.string_field(2)
    change_set: bool = betterproto.bool_field(3)
    start_date_string: str = betterproto.string_field(5)
    end_date_string: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IndexMetricResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetIndexJobStatusRequest(betterproto.Message):
    index_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetIndexJobStatusResponse(betterproto.Message):
    index: "__index_v1__.Index" = betterproto.message_field(1)
    status: "__index_v1__.IndexStatus" = betterproto.enum_field(2)
    error_details: List["FailedIndexEvent"] = betterproto.message_field(3)
    is_ready: bool = betterproto.bool_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetJobStatusRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetJobStatusResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    tasks: int = betterproto.int32_field(2)
    tasks_completed: int = betterproto.int32_field(3)
    tasks_failed: int = betterproto.int32_field(4)
    error_details: List["FailedIndexEvent"] = betterproto.message_field(6)
    is_ready: bool = betterproto.bool_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class FailedIndexEvent(betterproto.Message):
    event_id: str = betterproto.string_field(1)
    error_message: str = betterproto.string_field(2)
    update_time_string: str = betterproto.string_field(3)
    index_id: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


class MapOperatorServiceStub(betterproto.ServiceStub):
    """
    * This is the service used for operators to administrate the Maps/Layers in
    Unacat
    """

    async def create_layer(
        self,
        *,
        given_id: str = "",
        spec: "__maps_v1__.LayerSpec" = None,
        display_name: str = "",
        description: str = "",
        skip_address_component: bool = False,
    ) -> "__maps_v1__.Layer":

        request = CreateLayerRequest()
        request.given_id = given_id
        if spec is not None:
            request.spec = spec
        request.display_name = display_name
        request.description = description
        request.skip_address_component = skip_address_component

        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/CreateLayer",
            request,
            __maps_v1__.Layer,
        )

    async def delete_layer(
        self, *, layer_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DeleteLayerRequest()
        request.layer_id = layer_id

        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/DeleteLayer",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def index_layer(
        self, *, layer_id: str = "", big_query_table_id: str = ""
    ) -> "IndexLayerResponse":

        request = IndexLayerRequest()
        request.layer_id = layer_id
        request.big_query_table_id = big_query_table_id

        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/IndexLayer",
            request,
            IndexLayerResponse,
        )


class CatalogOperatorServiceStub(betterproto.ServiceStub):
    """
    * This is the service used for operators to administrate the Maps/Layers in
    Unacat
    """

    async def create_catalog(self, *, given_id: str = "") -> "__catalog_v1__.Catalog":

        request = CreateCatalogRequest()
        request.given_id = given_id

        return await self._unary_unary(
            "/unacast.operator.v1.CatalogOperatorService/CreateCatalog",
            request,
            __catalog_v1__.Catalog,
        )


class DimensionOperatorServiceStub(betterproto.ServiceStub):
    """
    * This is the service used for operators to administrate the Maps/Layers in
    Unacat
    """

    async def create_dimension(
        self,
        *,
        dimension_id: str = "",
        catalog_id: str = "",
        display_name: str = "",
        description: str = "",
    ) -> "__metric_v1__.Dimension":

        request = CreateDimensionRequest()
        request.dimension_id = dimension_id
        request.catalog_id = catalog_id
        request.display_name = display_name
        request.description = description

        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/CreateDimension",
            request,
            __metric_v1__.Dimension,
        )

    async def index_dimension(
        self,
        *,
        dimension_id: str = "",
        catalog_id: str = "",
        big_query_table_id: str = "",
    ) -> "IndexDimensionResponse":

        request = IndexDimensionRequest()
        request.dimension_id = dimension_id
        request.catalog_id = catalog_id
        request.big_query_table_id = big_query_table_id

        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/IndexDimension",
            request,
            IndexDimensionResponse,
        )

    async def delete_dimension(
        self, *, dimension_id: str = "", catalog_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DeleteDimensionRequest()
        request.dimension_id = dimension_id
        request.catalog_id = catalog_id

        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/DeleteDimension",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_dimension(self, *, catalog_id: str = "") -> "ListDimensionResponse":

        request = ListDimensionRequest()
        request.catalog_id = catalog_id

        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/ListDimension",
            request,
            ListDimensionResponse,
        )


class AddressComponentOperatorServiceStub(betterproto.ServiceStub):
    """
    * This is the service used for operators to administrate the Maps/Layers in
    Unacat
    """

    async def create_address_component(
        self,
        *,
        component: str = "",
        short_name: str = "",
        display_name: str = "",
        description: str = "",
        catalog_id: str = "",
        kind: "__maps_v1__.ComponentKind" = None,
        map_layer_id: str = "",
    ) -> "__maps_v1__.AddressComponent":

        request = CreateAddressComponentRequest()
        request.component = component
        request.short_name = short_name
        request.display_name = display_name
        request.description = description
        request.catalog_id = catalog_id
        request.kind = kind
        request.map_layer_id = map_layer_id

        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/CreateAddressComponent",
            request,
            __maps_v1__.AddressComponent,
        )

    async def index_address_component(
        self, *, component: str = "", catalog_id: str = "", big_query_table_id: str = ""
    ) -> "IndexAddressComponentResponse":

        request = IndexAddressComponentRequest()
        request.component = component
        request.catalog_id = catalog_id
        request.big_query_table_id = big_query_table_id

        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/IndexAddressComponent",
            request,
            IndexAddressComponentResponse,
        )

    async def delete_address_component(
        self, *, component: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DeleteAddressComponentRequest()
        request.component = component

        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/DeleteAddressComponent",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def list_address_component(
        self, *, catalog_id: str = "", map_layer_id: str = ""
    ) -> "ListAddressComponentResponse":

        request = ListAddressComponentRequest()
        request.catalog_id = catalog_id
        request.map_layer_id = map_layer_id

        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/ListAddressComponent",
            request,
            ListAddressComponentResponse,
        )


class MetricOperatorServiceStub(betterproto.ServiceStub):
    """
    * This is the service used for operators to administrate the Maps/Layers in
    Unacat
    """

    async def create_metric(
        self,
        *,
        given_id: str = "",
        name: str = "",
        spec: "__metric_v1__.MetricSpec" = None,
        catalog_id: str = "",
        description: str = "",
        version_spec: "__metric_v1__.VersionSpec" = None,
        tags: Optional[List["__metric_v1__.TagSpec"]] = None,
    ) -> "__metric_v1__.Metric":
        tags = tags or []

        request = CreateMetricRequest()
        request.given_id = given_id
        request.name = name
        if spec is not None:
            request.spec = spec
        request.catalog_id = catalog_id
        request.description = description
        if version_spec is not None:
            request.version_spec = version_spec
        if tags is not None:
            request.tags = tags

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/CreateMetric",
            request,
            __metric_v1__.Metric,
        )

    async def update_metric(
        self,
        *,
        metric: "__metric_v1__.Metric" = None,
        update_mask: "betterproto_lib_google_protobuf.FieldMask" = None,
    ) -> "__metric_v1__.Metric":

        request = UpdateMetricRequest()
        if metric is not None:
            request.metric = metric
        if update_mask is not None:
            request.update_mask = update_mask

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/UpdateMetric",
            request,
            __metric_v1__.Metric,
        )

    async def delete_metric(
        self, *, metric_id: str = ""
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = DeleteMetricRequest()
        request.metric_id = metric_id

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/DeleteMetric",
            request,
            betterproto_lib_google_protobuf.Empty,
        )

    async def clean_metric_data(self, *, metric_id: str = "") -> "__metric_v1__.Metric":

        request = CleanupMetricRequest()
        request.metric_id = metric_id

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/CleanMetricData",
            request,
            __metric_v1__.Metric,
        )

    async def index_metric(
        self,
        *,
        metric_id: str = "",
        big_query_table_id: str = "",
        change_set: bool = False,
        start_date_string: str = "",
        end_date_string: str = "",
    ) -> "IndexMetricResponse":

        request = IndexMetricRequest()
        request.metric_id = metric_id
        request.big_query_table_id = big_query_table_id
        request.change_set = change_set
        request.start_date_string = start_date_string
        request.end_date_string = end_date_string

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/IndexMetric",
            request,
            IndexMetricResponse,
        )

    async def update_metric_tag(
        self,
        *,
        metric_id: str = "",
        tag_type: str = "",
        tag_values: Optional[List[str]] = None,
        replace: bool = False,
        create_if_not_present: bool = False,
    ) -> "__metric_v1__.MetricParent":
        tag_values = tag_values or []

        request = UpdateMetricTagRequest()
        request.metric_id = metric_id
        request.tag_type = tag_type
        request.tag_values = tag_values
        request.replace = replace
        request.create_if_not_present = create_if_not_present

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/UpdateMetricTag",
            request,
            __metric_v1__.MetricParent,
        )

    async def delete_metric_tag(
        self, *, metric_id: str = "", tag_type: str = ""
    ) -> "__metric_v1__.MetricParent":

        request = DeleteMetricTagRequest()
        request.metric_id = metric_id
        request.tag_type = tag_type

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/DeleteMetricTag",
            request,
            __metric_v1__.MetricParent,
        )


class IndexJobOperatorServiceStub(betterproto.ServiceStub):
    """
    * This is the service used for operators to administrate the Maps/Layers in
    Unacat
    """

    async def get_index_status(
        self, *, index_id: str = ""
    ) -> "GetIndexJobStatusResponse":

        request = GetIndexJobStatusRequest()
        request.index_id = index_id

        return await self._unary_unary(
            "/unacast.operator.v1.IndexJobOperatorService/GetIndexStatus",
            request,
            GetIndexJobStatusResponse,
        )

    async def get_index_job_status(self, *, job_id: str = "") -> "GetJobStatusResponse":

        request = GetJobStatusRequest()
        request.job_id = job_id

        return await self._unary_unary(
            "/unacast.operator.v1.IndexJobOperatorService/GetIndexJobStatus",
            request,
            GetJobStatusResponse,
        )


from ...catalog import v1 as __catalog_v1__
from ...index import v1 as __index_v1__
from ...maps import v1 as __maps_v1__
from ...metric import v1 as __metric_v1__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
