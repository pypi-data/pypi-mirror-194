# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/catalog/catalog.proto, unacast/v2/catalog/catalog_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class Catalog(betterproto.Message):
    id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetCatalogRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListCatalogsRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListCatalogsResponse(betterproto.Message):
    catalogs: List["Catalog"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetMetricRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    billing_context: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetMetricResponse(betterproto.Message):
    metric: "_metric__.Metric" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    layer_filter: List[str] = betterproto.string_field(5)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsResponse(betterproto.Message):
    metrics: List["_metric__.Metric"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListMetricsV2Response(betterproto.Message):
    next_page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLayerRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    layer_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetLayerResponse(betterproto.Message):
    layer: "_maps__.Layer" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryLayerRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    layer_id: str = betterproto.string_field(2)
    address_component_filter: List[
        "_maps__.AddressComponentFilter"
    ] = betterproto.message_field(5)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryLayerResponse(betterproto.Message):
    features: List["_maps__.Feature"] = betterproto.message_field(4)
    total_size: int = betterproto.int32_field(14)
    next_page_token: str = betterproto.string_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


class CatalogServiceStub(betterproto.ServiceStub):
    async def list_catalogs(self) -> "ListCatalogsResponse":

        request = ListCatalogsRequest()

        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/ListCatalogs",
            request,
            ListCatalogsResponse,
        )

    async def get_metric(
        self, *, catalog_id: str = "", metric_id: str = "", billing_context: str = ""
    ) -> "GetMetricResponse":

        request = GetMetricRequest()
        request.catalog_id = catalog_id
        request.metric_id = metric_id
        request.billing_context = billing_context

        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/GetMetric", request, GetMetricResponse
        )

    async def list_metrics(
        self,
        *,
        catalog_id: str = "",
        billing_context: str = "",
        layer_filter: Optional[List[str]] = None,
        page_size: int = 0,
        page_token: str = "",
    ) -> "ListMetricsResponse":
        layer_filter = layer_filter or []

        request = ListMetricsRequest()
        request.catalog_id = catalog_id
        request.billing_context = billing_context
        request.layer_filter = layer_filter
        request.page_size = page_size
        request.page_token = page_token

        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/ListMetrics",
            request,
            ListMetricsResponse,
        )

    async def get_layer(
        self, *, catalog_id: str = "", layer_id: str = ""
    ) -> "GetLayerResponse":

        request = GetLayerRequest()
        request.catalog_id = catalog_id
        request.layer_id = layer_id

        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/GetLayer", request, GetLayerResponse
        )


from .. import maps as _maps__
from .. import metric as _metric__
