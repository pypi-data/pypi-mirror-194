# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/iam/v1/user_info.proto, unacast/iam/v1/iam_user.proto, unacast/iam/v1/user_role.proto, unacast/iam/v1/iam_service.proto, unacast/iam/v1/user_role_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional

import betterproto
import grpclib


class CatalogRole(betterproto.Enum):
    UNSPECIFIED = 0
    DATA_OPERATOR = 1
    SALES_OPERATOR = 2
    OPERATOR_ADMIN = 3
    USER = 15
    EXPERIMENTAL = 16
    ADMIN = 20


@dataclass(eq=False, repr=False)
class UserInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(4)
    email: str = betterproto.string_field(5)
    photo_url: str = betterproto.string_field(6)
    create_time: datetime = betterproto.message_field(9)
    last_login_time: datetime = betterproto.message_field(10)
    last_refresh_time: datetime = betterproto.message_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class IamUser(betterproto.Message):
    id: str = betterproto.string_field(1)
    firebase_id: str = betterproto.string_field(2)
    email: str = betterproto.string_field(5)
    company_name: str = betterproto.string_field(3)
    full_name: str = betterproto.string_field(8)
    claims: "UserClaims" = betterproto.message_field(6)
    user_info: "UserInfo" = betterproto.message_field(7)
    create_time_string: str = betterproto.string_field(9)
    settings: "UserSettings" = betterproto.message_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UserSettings(betterproto.Message):
    preferred_billing_account_id: str = betterproto.string_field(1)
    user_object: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UserClaims(betterproto.Message):
    claim_strings: List[str] = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UserRoles(betterproto.Message):
    catalog_roles: Dict[str, "CatalogRoleList"] = betterproto.map_field(
        21, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CatalogRoleList(betterproto.Message):
    roles: List["CatalogRole"] = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateUserSettingsRequest(betterproto.Message):
    email: str = betterproto.string_field(1)
    user_settings: "UserSettings" = betterproto.message_field(2)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(3)
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateUserRequest(betterproto.Message):
    email: str = betterproto.string_field(2)
    company_name: str = betterproto.string_field(3)
    full_name: str = betterproto.string_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListUsersRequest(betterproto.Message):
    page_size: int = betterproto.int32_field(14)
    offset: int = betterproto.int32_field(15)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListUsersResponse(betterproto.Message):
    users: List["IamUser"] = betterproto.message_field(1)
    next_page_offset: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendClaimsRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)
    claims: List[str] = betterproto.string_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RevokeClaimsRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)
    claims: List[str] = betterproto.string_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetCatalogListingsRequest(betterproto.Message):
    catalog_roles: List["CatalogRole"] = betterproto.enum_field(1)
    catalog_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetCatalogListingsResponse(betterproto.Message):
    listings: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NewUserRolesRequest(betterproto.Message):
    catalog_ids: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NewUserRolesResponse(betterproto.Message):
    user_roles: "UserRoles" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class IamServiceStub(betterproto.ServiceStub):
    async def get_user(self, *, uid: str = "", email: str = "") -> "IamUser":

        request = GetUserRequest()
        request.uid = uid
        request.email = email

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/GetUser", request, IamUser
        )

    async def get_current_user(self) -> "IamUser":

        request = betterproto_lib_google_protobuf.Empty()

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/GetCurrentUser", request, IamUser
        )

    async def list_users(
        self, *, page_size: int = 0, offset: int = 0
    ) -> "ListUsersResponse":

        request = ListUsersRequest()
        request.page_size = page_size
        request.offset = offset

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/ListUsers", request, ListUsersResponse
        )

    async def append_claims(
        self, *, uid: str = "", email: str = "", claims: Optional[List[str]] = None
    ) -> "IamUser":
        claims = claims or []

        request = AppendClaimsRequest()
        request.uid = uid
        request.email = email
        request.claims = claims

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/AppendClaims", request, IamUser
        )

    async def revoke_claims(
        self, *, uid: str = "", email: str = "", claims: Optional[List[str]] = None
    ) -> "IamUser":
        claims = claims or []

        request = RevokeClaimsRequest()
        request.uid = uid
        request.email = email
        request.claims = claims

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/RevokeClaims", request, IamUser
        )

    async def create_user(
        self, *, email: str = "", company_name: str = "", full_name: str = ""
    ) -> "IamUser":

        request = CreateUserRequest()
        request.email = email
        request.company_name = company_name
        request.full_name = full_name

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/CreateUser", request, IamUser
        )

    async def update_user_settings(
        self,
        *,
        email: str = "",
        user_settings: "UserSettings" = None,
        update_mask: "betterproto_lib_google_protobuf.FieldMask" = None,
    ) -> "IamUser":

        request = UpdateUserSettingsRequest()
        request.email = email
        if user_settings is not None:
            request.user_settings = user_settings
        if update_mask is not None:
            request.update_mask = update_mask

        return await self._unary_unary(
            "/unacast.iam.v1.IamService/UpdateUserSettings", request, IamUser
        )


class UserRoleServiceStub(betterproto.ServiceStub):
    async def get_new_user_roles(
        self, *, catalog_ids: Optional[List[str]] = None
    ) -> "NewUserRolesResponse":
        catalog_ids = catalog_ids or []

        request = NewUserRolesRequest()
        request.catalog_ids = catalog_ids

        return await self._unary_unary(
            "/unacast.iam.v1.UserRoleService/GetNewUserRoles",
            request,
            NewUserRolesResponse,
        )

    async def get_catalog_listings(
        self,
        *,
        catalog_roles: Optional[List["CatalogRole"]] = None,
        catalog_id: str = "",
    ) -> "GetCatalogListingsResponse":
        catalog_roles = catalog_roles or []

        request = GetCatalogListingsRequest()
        request.catalog_roles = catalog_roles
        request.catalog_id = catalog_id

        return await self._unary_unary(
            "/unacast.iam.v1.UserRoleService/GetCatalogListings",
            request,
            GetCatalogListingsResponse,
        )


import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
