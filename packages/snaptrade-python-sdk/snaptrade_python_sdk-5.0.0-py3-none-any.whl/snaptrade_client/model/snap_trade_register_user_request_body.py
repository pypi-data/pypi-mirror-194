# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class SnapTradeRegisterUserRequestBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.

    Data required to register a user via SnapTrade Partner
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def userId() -> typing.Type['SnapTradeUserID']:
                return SnapTradeUserID
        
            @staticmethod
            def rsaPublicKey() -> typing.Type['RsaPublicKey']:
                return RsaPublicKey
            __annotations__ = {
                "userId": userId,
                "rsaPublicKey": rsaPublicKey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> 'SnapTradeUserID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rsaPublicKey"]) -> 'RsaPublicKey': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userId", "rsaPublicKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union['SnapTradeUserID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rsaPublicKey"]) -> typing.Union['RsaPublicKey', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userId", "rsaPublicKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        userId: typing.Union['SnapTradeUserID', schemas.Unset] = schemas.unset,
        rsaPublicKey: typing.Union['RsaPublicKey', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SnapTradeRegisterUserRequestBody':
        return super().__new__(
            cls,
            *args,
            userId=userId,
            rsaPublicKey=rsaPublicKey,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.rsa_public_key import RsaPublicKey
from snaptrade_client.model.snap_trade_user_id import SnapTradeUserID
