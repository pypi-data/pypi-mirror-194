# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class StrategyImpact(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.

    The strategy impact
    """


    class MetaOapg:
        
        class properties:
            
            
            class estimatedCommissions(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'estimatedCommissions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class buyingPowerEffect(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buyingPowerEffect':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class buyingPowerResult(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buyingPowerResult':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class maintExcessEffect(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maintExcessEffect':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class maintExcessResult(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'maintExcessResult':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tradeValueCalculation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tradeValueCalculation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class legs(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class legId(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'legId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class symbol(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'symbol':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class symbolId(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'symbolId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class legRatioQuantity(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'legRatioQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class side(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'side':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class avgExecPrice(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'avgExecPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class lastExecPrice(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'lastExecPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "legId": legId,
                                    "symbol": symbol,
                                    "symbolId": symbolId,
                                    "legRatioQuantity": legRatioQuantity,
                                    "side": side,
                                    "avgExecPrice": avgExecPrice,
                                    "lastExecPrice": lastExecPrice,
                                }
                            additional_properties = schemas.AnyTypeSchema
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["legId"]) -> MetaOapg.properties.legId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["legRatioQuantity"]) -> MetaOapg.properties.legRatioQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avgExecPrice"]) -> MetaOapg.properties.avgExecPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastExecPrice"]) -> MetaOapg.properties.lastExecPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["legId"], typing_extensions.Literal["symbol"], typing_extensions.Literal["symbolId"], typing_extensions.Literal["legRatioQuantity"], typing_extensions.Literal["side"], typing_extensions.Literal["avgExecPrice"], typing_extensions.Literal["lastExecPrice"], str, ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["legId"]) -> typing.Union[MetaOapg.properties.legId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["legRatioQuantity"]) -> typing.Union[MetaOapg.properties.legRatioQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avgExecPrice"]) -> typing.Union[MetaOapg.properties.avgExecPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastExecPrice"]) -> typing.Union[MetaOapg.properties.lastExecPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["legId"], typing_extensions.Literal["symbol"], typing_extensions.Literal["symbolId"], typing_extensions.Literal["legRatioQuantity"], typing_extensions.Literal["side"], typing_extensions.Literal["avgExecPrice"], typing_extensions.Literal["lastExecPrice"], str, ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            legId: typing.Union[MetaOapg.properties.legId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            symbol: typing.Union[MetaOapg.properties.symbol, None, str, schemas.Unset] = schemas.unset,
                            symbolId: typing.Union[MetaOapg.properties.symbolId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            legRatioQuantity: typing.Union[MetaOapg.properties.legRatioQuantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            side: typing.Union[MetaOapg.properties.side, None, str, schemas.Unset] = schemas.unset,
                            avgExecPrice: typing.Union[MetaOapg.properties.avgExecPrice, None, str, schemas.Unset] = schemas.unset,
                            lastExecPrice: typing.Union[MetaOapg.properties.lastExecPrice, None, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                legId=legId,
                                symbol=symbol,
                                symbolId=symbolId,
                                legRatioQuantity=legRatioQuantity,
                                side=side,
                                avgExecPrice=avgExecPrice,
                                lastExecPrice=lastExecPrice,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'legs':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class side(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'side':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class effect(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'effect':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class price(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class strategy(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'strategy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "estimatedCommissions": estimatedCommissions,
                "buyingPowerEffect": buyingPowerEffect,
                "buyingPowerResult": buyingPowerResult,
                "maintExcessEffect": maintExcessEffect,
                "maintExcessResult": maintExcessResult,
                "tradeValueCalculation": tradeValueCalculation,
                "legs": legs,
                "side": side,
                "effect": effect,
                "price": price,
                "strategy": strategy,
            }
        additional_properties = schemas.AnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedCommissions"]) -> MetaOapg.properties.estimatedCommissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyingPowerEffect"]) -> MetaOapg.properties.buyingPowerEffect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyingPowerResult"]) -> MetaOapg.properties.buyingPowerResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintExcessEffect"]) -> MetaOapg.properties.maintExcessEffect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintExcessResult"]) -> MetaOapg.properties.maintExcessResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tradeValueCalculation"]) -> MetaOapg.properties.tradeValueCalculation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legs"]) -> MetaOapg.properties.legs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effect"]) -> MetaOapg.properties.effect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy"]) -> MetaOapg.properties.strategy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["estimatedCommissions"], typing_extensions.Literal["buyingPowerEffect"], typing_extensions.Literal["buyingPowerResult"], typing_extensions.Literal["maintExcessEffect"], typing_extensions.Literal["maintExcessResult"], typing_extensions.Literal["tradeValueCalculation"], typing_extensions.Literal["legs"], typing_extensions.Literal["side"], typing_extensions.Literal["effect"], typing_extensions.Literal["price"], typing_extensions.Literal["strategy"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedCommissions"]) -> typing.Union[MetaOapg.properties.estimatedCommissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyingPowerEffect"]) -> typing.Union[MetaOapg.properties.buyingPowerEffect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyingPowerResult"]) -> typing.Union[MetaOapg.properties.buyingPowerResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintExcessEffect"]) -> typing.Union[MetaOapg.properties.maintExcessEffect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintExcessResult"]) -> typing.Union[MetaOapg.properties.maintExcessResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tradeValueCalculation"]) -> typing.Union[MetaOapg.properties.tradeValueCalculation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legs"]) -> typing.Union[MetaOapg.properties.legs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effect"]) -> typing.Union[MetaOapg.properties.effect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy"]) -> typing.Union[MetaOapg.properties.strategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["estimatedCommissions"], typing_extensions.Literal["buyingPowerEffect"], typing_extensions.Literal["buyingPowerResult"], typing_extensions.Literal["maintExcessEffect"], typing_extensions.Literal["maintExcessResult"], typing_extensions.Literal["tradeValueCalculation"], typing_extensions.Literal["legs"], typing_extensions.Literal["side"], typing_extensions.Literal["effect"], typing_extensions.Literal["price"], typing_extensions.Literal["strategy"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        estimatedCommissions: typing.Union[MetaOapg.properties.estimatedCommissions, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        buyingPowerEffect: typing.Union[MetaOapg.properties.buyingPowerEffect, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        buyingPowerResult: typing.Union[MetaOapg.properties.buyingPowerResult, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maintExcessEffect: typing.Union[MetaOapg.properties.maintExcessEffect, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maintExcessResult: typing.Union[MetaOapg.properties.maintExcessResult, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tradeValueCalculation: typing.Union[MetaOapg.properties.tradeValueCalculation, None, str, schemas.Unset] = schemas.unset,
        legs: typing.Union[MetaOapg.properties.legs, list, tuple, None, schemas.Unset] = schemas.unset,
        side: typing.Union[MetaOapg.properties.side, None, str, schemas.Unset] = schemas.unset,
        effect: typing.Union[MetaOapg.properties.effect, None, str, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        strategy: typing.Union[MetaOapg.properties.strategy, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StrategyImpact':
        return super().__new__(
            cls,
            *args,
            estimatedCommissions=estimatedCommissions,
            buyingPowerEffect=buyingPowerEffect,
            buyingPowerResult=buyingPowerResult,
            maintExcessEffect=maintExcessEffect,
            maintExcessResult=maintExcessResult,
            tradeValueCalculation=tradeValueCalculation,
            legs=legs,
            side=side,
            effect=effect,
            price=price,
            strategy=strategy,
            _configuration=_configuration,
            **kwargs,
        )
