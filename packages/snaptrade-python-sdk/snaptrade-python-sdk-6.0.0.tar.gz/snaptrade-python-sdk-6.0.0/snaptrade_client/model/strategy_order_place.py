# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class StrategyOrderPlace(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.

    The reponse for a correctly placed order
    """


    class MetaOapg:
        
        class properties:
            
            
            class orderId(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class orders(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'id':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class symbol(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'symbol':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class symbolId(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'symbolId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class totalQuantity(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'totalQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class openQuantity(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'openQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class filledQuantity(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'filledQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class canceledQuantity(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'canceledQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class side(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'side':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class orderType(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'orderType':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class limitPrice(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'limitPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class stopPrice(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'stopPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class isAllOrNone(
                                    schemas.BoolBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneBoolMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, bool, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'isAllOrNone':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class isAnonymous(
                                    schemas.BoolBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneBoolMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, bool, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'isAnonymous':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class icebergQuantity(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'icebergQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class minQuantity(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'minQuantity':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class avgExecPrice(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'avgExecPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class lastExecPrice(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'lastExecPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class source(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'source':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class timeInForce(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'timeInForce':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class gtdDate(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'gtdDate':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class state(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'state':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class rejectionReason(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'rejectionReason':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class chainId(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'chainId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class creationTime(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'creationTime':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class updateTime(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'updateTime':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class notes(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'notes':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class primaryRoute(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'primaryRoute':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class secondaryRoute(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'secondaryRoute':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class orderRoute(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'orderRoute':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class venueHoldingOrder(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'venueHoldingOrder':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class comissionCharged(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'comissionCharged':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class exchangeOrderId(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'exchangeOrderId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class isSignificantShareHolder(
                                    schemas.BoolBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneBoolMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, bool, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'isSignificantShareHolder':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class isInsider(
                                    schemas.BoolBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneBoolMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, bool, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'isInsider':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class isLimitOffsetInDollar(
                                    schemas.BoolBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneBoolMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, bool, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'isLimitOffsetInDollar':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class userId(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'userId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class placementCommission(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'placementCommission':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class legs(
                                    schemas.ListBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneTupleMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictBase,
                                            schemas.NoneBase,
                                            schemas.Schema,
                                            schemas.NoneFrozenDictMixin
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    
                                                    
                                                    class legId(
                                                        schemas.Int32Base,
                                                        schemas.IntBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneDecimalMixin
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            format = 'int32'
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, decimal.Decimal, int, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'legId':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class symbol(
                                                        schemas.StrBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneStrMixin
                                                    ):
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'symbol':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class symbolId(
                                                        schemas.Int32Base,
                                                        schemas.IntBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneDecimalMixin
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            format = 'int32'
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, decimal.Decimal, int, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'symbolId':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class legRatioQuantity(
                                                        schemas.Int32Base,
                                                        schemas.IntBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneDecimalMixin
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            format = 'int32'
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, decimal.Decimal, int, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'legRatioQuantity':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class side(
                                                        schemas.StrBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneStrMixin
                                                    ):
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'side':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class avgExecPrice(
                                                        schemas.Int32Base,
                                                        schemas.IntBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneDecimalMixin
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            format = 'int32'
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, decimal.Decimal, int, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'avgExecPrice':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class lastExecPrice(
                                                        schemas.StrBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneStrMixin
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            format = 'nullable'
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[None, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'lastExecPrice':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                            )
                                                    __annotations__ = {
                                                        "legId": legId,
                                                        "symbol": symbol,
                                                        "symbolId": symbolId,
                                                        "legRatioQuantity": legRatioQuantity,
                                                        "side": side,
                                                        "avgExecPrice": avgExecPrice,
                                                        "lastExecPrice": lastExecPrice,
                                                    }
                                                additional_properties = schemas.AnyTypeSchema
                                        
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["legId"]) -> MetaOapg.properties.legId: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["legRatioQuantity"]) -> MetaOapg.properties.legRatioQuantity: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["avgExecPrice"]) -> MetaOapg.properties.avgExecPrice: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["lastExecPrice"]) -> MetaOapg.properties.lastExecPrice: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["legId"], typing_extensions.Literal["symbol"], typing_extensions.Literal["symbolId"], typing_extensions.Literal["legRatioQuantity"], typing_extensions.Literal["side"], typing_extensions.Literal["avgExecPrice"], typing_extensions.Literal["lastExecPrice"], str, ]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["legId"]) -> typing.Union[MetaOapg.properties.legId, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["legRatioQuantity"]) -> typing.Union[MetaOapg.properties.legRatioQuantity, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["avgExecPrice"]) -> typing.Union[MetaOapg.properties.avgExecPrice, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["lastExecPrice"]) -> typing.Union[MetaOapg.properties.lastExecPrice, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["legId"], typing_extensions.Literal["symbol"], typing_extensions.Literal["symbolId"], typing_extensions.Literal["legRatioQuantity"], typing_extensions.Literal["side"], typing_extensions.Literal["avgExecPrice"], typing_extensions.Literal["lastExecPrice"], str, ]):
                                                return super().get_item_oapg(name)
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, None, ],
                                                legId: typing.Union[MetaOapg.properties.legId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                symbol: typing.Union[MetaOapg.properties.symbol, None, str, schemas.Unset] = schemas.unset,
                                                symbolId: typing.Union[MetaOapg.properties.symbolId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                legRatioQuantity: typing.Union[MetaOapg.properties.legRatioQuantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                side: typing.Union[MetaOapg.properties.side, None, str, schemas.Unset] = schemas.unset,
                                                avgExecPrice: typing.Union[MetaOapg.properties.avgExecPrice, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                lastExecPrice: typing.Union[MetaOapg.properties.lastExecPrice, None, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    legId=legId,
                                                    symbol=symbol,
                                                    symbolId=symbolId,
                                                    legRatioQuantity=legRatioQuantity,
                                                    side=side,
                                                    avgExecPrice=avgExecPrice,
                                                    lastExecPrice=lastExecPrice,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[list, tuple, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'legs':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class strategyType(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'strategyType':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class triggerStopPrice(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'triggerStopPrice':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class orderGroupId(
                                    schemas.Int32Base,
                                    schemas.IntBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneDecimalMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'int32'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'orderGroupId':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class orderClass(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'nullable'
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'orderClass':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class isCrossZero(
                                    schemas.BoolBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneBoolMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, bool, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'isCrossZero':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "id": id,
                                    "symbol": symbol,
                                    "symbolId": symbolId,
                                    "totalQuantity": totalQuantity,
                                    "openQuantity": openQuantity,
                                    "filledQuantity": filledQuantity,
                                    "canceledQuantity": canceledQuantity,
                                    "side": side,
                                    "orderType": orderType,
                                    "limitPrice": limitPrice,
                                    "stopPrice": stopPrice,
                                    "isAllOrNone": isAllOrNone,
                                    "isAnonymous": isAnonymous,
                                    "icebergQuantity": icebergQuantity,
                                    "minQuantity": minQuantity,
                                    "avgExecPrice": avgExecPrice,
                                    "lastExecPrice": lastExecPrice,
                                    "source": source,
                                    "timeInForce": timeInForce,
                                    "gtdDate": gtdDate,
                                    "state": state,
                                    "rejectionReason": rejectionReason,
                                    "chainId": chainId,
                                    "creationTime": creationTime,
                                    "updateTime": updateTime,
                                    "notes": notes,
                                    "primaryRoute": primaryRoute,
                                    "secondaryRoute": secondaryRoute,
                                    "orderRoute": orderRoute,
                                    "venueHoldingOrder": venueHoldingOrder,
                                    "comissionCharged": comissionCharged,
                                    "exchangeOrderId": exchangeOrderId,
                                    "isSignificantShareHolder": isSignificantShareHolder,
                                    "isInsider": isInsider,
                                    "isLimitOffsetInDollar": isLimitOffsetInDollar,
                                    "userId": userId,
                                    "placementCommission": placementCommission,
                                    "legs": legs,
                                    "strategyType": strategyType,
                                    "triggerStopPrice": triggerStopPrice,
                                    "orderGroupId": orderGroupId,
                                    "orderClass": orderClass,
                                    "isCrossZero": isCrossZero,
                                }
                            additional_properties = schemas.AnyTypeSchema
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["totalQuantity"]) -> MetaOapg.properties.totalQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["openQuantity"]) -> MetaOapg.properties.openQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["filledQuantity"]) -> MetaOapg.properties.filledQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["canceledQuantity"]) -> MetaOapg.properties.canceledQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["orderType"]) -> MetaOapg.properties.orderType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["limitPrice"]) -> MetaOapg.properties.limitPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["stopPrice"]) -> MetaOapg.properties.stopPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isAllOrNone"]) -> MetaOapg.properties.isAllOrNone: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isAnonymous"]) -> MetaOapg.properties.isAnonymous: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["icebergQuantity"]) -> MetaOapg.properties.icebergQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["minQuantity"]) -> MetaOapg.properties.minQuantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avgExecPrice"]) -> MetaOapg.properties.avgExecPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastExecPrice"]) -> MetaOapg.properties.lastExecPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["timeInForce"]) -> MetaOapg.properties.timeInForce: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["gtdDate"]) -> MetaOapg.properties.gtdDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rejectionReason"]) -> MetaOapg.properties.rejectionReason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["chainId"]) -> MetaOapg.properties.chainId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["updateTime"]) -> MetaOapg.properties.updateTime: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["primaryRoute"]) -> MetaOapg.properties.primaryRoute: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["secondaryRoute"]) -> MetaOapg.properties.secondaryRoute: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["orderRoute"]) -> MetaOapg.properties.orderRoute: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["venueHoldingOrder"]) -> MetaOapg.properties.venueHoldingOrder: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["comissionCharged"]) -> MetaOapg.properties.comissionCharged: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["exchangeOrderId"]) -> MetaOapg.properties.exchangeOrderId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isSignificantShareHolder"]) -> MetaOapg.properties.isSignificantShareHolder: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isInsider"]) -> MetaOapg.properties.isInsider: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isLimitOffsetInDollar"]) -> MetaOapg.properties.isLimitOffsetInDollar: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["placementCommission"]) -> MetaOapg.properties.placementCommission: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["legs"]) -> MetaOapg.properties.legs: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["strategyType"]) -> MetaOapg.properties.strategyType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["triggerStopPrice"]) -> MetaOapg.properties.triggerStopPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["orderGroupId"]) -> MetaOapg.properties.orderGroupId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["orderClass"]) -> MetaOapg.properties.orderClass: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isCrossZero"]) -> MetaOapg.properties.isCrossZero: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["symbol"], typing_extensions.Literal["symbolId"], typing_extensions.Literal["totalQuantity"], typing_extensions.Literal["openQuantity"], typing_extensions.Literal["filledQuantity"], typing_extensions.Literal["canceledQuantity"], typing_extensions.Literal["side"], typing_extensions.Literal["orderType"], typing_extensions.Literal["limitPrice"], typing_extensions.Literal["stopPrice"], typing_extensions.Literal["isAllOrNone"], typing_extensions.Literal["isAnonymous"], typing_extensions.Literal["icebergQuantity"], typing_extensions.Literal["minQuantity"], typing_extensions.Literal["avgExecPrice"], typing_extensions.Literal["lastExecPrice"], typing_extensions.Literal["source"], typing_extensions.Literal["timeInForce"], typing_extensions.Literal["gtdDate"], typing_extensions.Literal["state"], typing_extensions.Literal["rejectionReason"], typing_extensions.Literal["chainId"], typing_extensions.Literal["creationTime"], typing_extensions.Literal["updateTime"], typing_extensions.Literal["notes"], typing_extensions.Literal["primaryRoute"], typing_extensions.Literal["secondaryRoute"], typing_extensions.Literal["orderRoute"], typing_extensions.Literal["venueHoldingOrder"], typing_extensions.Literal["comissionCharged"], typing_extensions.Literal["exchangeOrderId"], typing_extensions.Literal["isSignificantShareHolder"], typing_extensions.Literal["isInsider"], typing_extensions.Literal["isLimitOffsetInDollar"], typing_extensions.Literal["userId"], typing_extensions.Literal["placementCommission"], typing_extensions.Literal["legs"], typing_extensions.Literal["strategyType"], typing_extensions.Literal["triggerStopPrice"], typing_extensions.Literal["orderGroupId"], typing_extensions.Literal["orderClass"], typing_extensions.Literal["isCrossZero"], str, ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["totalQuantity"]) -> typing.Union[MetaOapg.properties.totalQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["openQuantity"]) -> typing.Union[MetaOapg.properties.openQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["filledQuantity"]) -> typing.Union[MetaOapg.properties.filledQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["canceledQuantity"]) -> typing.Union[MetaOapg.properties.canceledQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["orderType"]) -> typing.Union[MetaOapg.properties.orderType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["limitPrice"]) -> typing.Union[MetaOapg.properties.limitPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["stopPrice"]) -> typing.Union[MetaOapg.properties.stopPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isAllOrNone"]) -> typing.Union[MetaOapg.properties.isAllOrNone, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isAnonymous"]) -> typing.Union[MetaOapg.properties.isAnonymous, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["icebergQuantity"]) -> typing.Union[MetaOapg.properties.icebergQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["minQuantity"]) -> typing.Union[MetaOapg.properties.minQuantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avgExecPrice"]) -> typing.Union[MetaOapg.properties.avgExecPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastExecPrice"]) -> typing.Union[MetaOapg.properties.lastExecPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["timeInForce"]) -> typing.Union[MetaOapg.properties.timeInForce, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["gtdDate"]) -> typing.Union[MetaOapg.properties.gtdDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rejectionReason"]) -> typing.Union[MetaOapg.properties.rejectionReason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["chainId"]) -> typing.Union[MetaOapg.properties.chainId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["updateTime"]) -> typing.Union[MetaOapg.properties.updateTime, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["primaryRoute"]) -> typing.Union[MetaOapg.properties.primaryRoute, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["secondaryRoute"]) -> typing.Union[MetaOapg.properties.secondaryRoute, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["orderRoute"]) -> typing.Union[MetaOapg.properties.orderRoute, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["venueHoldingOrder"]) -> typing.Union[MetaOapg.properties.venueHoldingOrder, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["comissionCharged"]) -> typing.Union[MetaOapg.properties.comissionCharged, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["exchangeOrderId"]) -> typing.Union[MetaOapg.properties.exchangeOrderId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isSignificantShareHolder"]) -> typing.Union[MetaOapg.properties.isSignificantShareHolder, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isInsider"]) -> typing.Union[MetaOapg.properties.isInsider, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isLimitOffsetInDollar"]) -> typing.Union[MetaOapg.properties.isLimitOffsetInDollar, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["placementCommission"]) -> typing.Union[MetaOapg.properties.placementCommission, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["legs"]) -> typing.Union[MetaOapg.properties.legs, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["strategyType"]) -> typing.Union[MetaOapg.properties.strategyType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["triggerStopPrice"]) -> typing.Union[MetaOapg.properties.triggerStopPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["orderGroupId"]) -> typing.Union[MetaOapg.properties.orderGroupId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["orderClass"]) -> typing.Union[MetaOapg.properties.orderClass, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isCrossZero"]) -> typing.Union[MetaOapg.properties.isCrossZero, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["symbol"], typing_extensions.Literal["symbolId"], typing_extensions.Literal["totalQuantity"], typing_extensions.Literal["openQuantity"], typing_extensions.Literal["filledQuantity"], typing_extensions.Literal["canceledQuantity"], typing_extensions.Literal["side"], typing_extensions.Literal["orderType"], typing_extensions.Literal["limitPrice"], typing_extensions.Literal["stopPrice"], typing_extensions.Literal["isAllOrNone"], typing_extensions.Literal["isAnonymous"], typing_extensions.Literal["icebergQuantity"], typing_extensions.Literal["minQuantity"], typing_extensions.Literal["avgExecPrice"], typing_extensions.Literal["lastExecPrice"], typing_extensions.Literal["source"], typing_extensions.Literal["timeInForce"], typing_extensions.Literal["gtdDate"], typing_extensions.Literal["state"], typing_extensions.Literal["rejectionReason"], typing_extensions.Literal["chainId"], typing_extensions.Literal["creationTime"], typing_extensions.Literal["updateTime"], typing_extensions.Literal["notes"], typing_extensions.Literal["primaryRoute"], typing_extensions.Literal["secondaryRoute"], typing_extensions.Literal["orderRoute"], typing_extensions.Literal["venueHoldingOrder"], typing_extensions.Literal["comissionCharged"], typing_extensions.Literal["exchangeOrderId"], typing_extensions.Literal["isSignificantShareHolder"], typing_extensions.Literal["isInsider"], typing_extensions.Literal["isLimitOffsetInDollar"], typing_extensions.Literal["userId"], typing_extensions.Literal["placementCommission"], typing_extensions.Literal["legs"], typing_extensions.Literal["strategyType"], typing_extensions.Literal["triggerStopPrice"], typing_extensions.Literal["orderGroupId"], typing_extensions.Literal["orderClass"], typing_extensions.Literal["isCrossZero"], str, ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            id: typing.Union[MetaOapg.properties.id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            symbol: typing.Union[MetaOapg.properties.symbol, None, str, schemas.Unset] = schemas.unset,
                            symbolId: typing.Union[MetaOapg.properties.symbolId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            totalQuantity: typing.Union[MetaOapg.properties.totalQuantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            openQuantity: typing.Union[MetaOapg.properties.openQuantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            filledQuantity: typing.Union[MetaOapg.properties.filledQuantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            canceledQuantity: typing.Union[MetaOapg.properties.canceledQuantity, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            side: typing.Union[MetaOapg.properties.side, None, str, schemas.Unset] = schemas.unset,
                            orderType: typing.Union[MetaOapg.properties.orderType, None, str, schemas.Unset] = schemas.unset,
                            limitPrice: typing.Union[MetaOapg.properties.limitPrice, None, str, schemas.Unset] = schemas.unset,
                            stopPrice: typing.Union[MetaOapg.properties.stopPrice, None, str, schemas.Unset] = schemas.unset,
                            isAllOrNone: typing.Union[MetaOapg.properties.isAllOrNone, None, bool, schemas.Unset] = schemas.unset,
                            isAnonymous: typing.Union[MetaOapg.properties.isAnonymous, None, bool, schemas.Unset] = schemas.unset,
                            icebergQuantity: typing.Union[MetaOapg.properties.icebergQuantity, None, str, schemas.Unset] = schemas.unset,
                            minQuantity: typing.Union[MetaOapg.properties.minQuantity, None, str, schemas.Unset] = schemas.unset,
                            avgExecPrice: typing.Union[MetaOapg.properties.avgExecPrice, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            lastExecPrice: typing.Union[MetaOapg.properties.lastExecPrice, None, str, schemas.Unset] = schemas.unset,
                            source: typing.Union[MetaOapg.properties.source, None, str, schemas.Unset] = schemas.unset,
                            timeInForce: typing.Union[MetaOapg.properties.timeInForce, None, str, schemas.Unset] = schemas.unset,
                            gtdDate: typing.Union[MetaOapg.properties.gtdDate, None, str, schemas.Unset] = schemas.unset,
                            state: typing.Union[MetaOapg.properties.state, None, str, schemas.Unset] = schemas.unset,
                            rejectionReason: typing.Union[MetaOapg.properties.rejectionReason, None, str, schemas.Unset] = schemas.unset,
                            chainId: typing.Union[MetaOapg.properties.chainId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            creationTime: typing.Union[MetaOapg.properties.creationTime, None, str, schemas.Unset] = schemas.unset,
                            updateTime: typing.Union[MetaOapg.properties.updateTime, None, str, schemas.Unset] = schemas.unset,
                            notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
                            primaryRoute: typing.Union[MetaOapg.properties.primaryRoute, None, str, schemas.Unset] = schemas.unset,
                            secondaryRoute: typing.Union[MetaOapg.properties.secondaryRoute, None, str, schemas.Unset] = schemas.unset,
                            orderRoute: typing.Union[MetaOapg.properties.orderRoute, None, str, schemas.Unset] = schemas.unset,
                            venueHoldingOrder: typing.Union[MetaOapg.properties.venueHoldingOrder, None, str, schemas.Unset] = schemas.unset,
                            comissionCharged: typing.Union[MetaOapg.properties.comissionCharged, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            exchangeOrderId: typing.Union[MetaOapg.properties.exchangeOrderId, None, str, schemas.Unset] = schemas.unset,
                            isSignificantShareHolder: typing.Union[MetaOapg.properties.isSignificantShareHolder, None, bool, schemas.Unset] = schemas.unset,
                            isInsider: typing.Union[MetaOapg.properties.isInsider, None, bool, schemas.Unset] = schemas.unset,
                            isLimitOffsetInDollar: typing.Union[MetaOapg.properties.isLimitOffsetInDollar, None, bool, schemas.Unset] = schemas.unset,
                            userId: typing.Union[MetaOapg.properties.userId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            placementCommission: typing.Union[MetaOapg.properties.placementCommission, None, str, schemas.Unset] = schemas.unset,
                            legs: typing.Union[MetaOapg.properties.legs, list, tuple, None, schemas.Unset] = schemas.unset,
                            strategyType: typing.Union[MetaOapg.properties.strategyType, None, str, schemas.Unset] = schemas.unset,
                            triggerStopPrice: typing.Union[MetaOapg.properties.triggerStopPrice, None, str, schemas.Unset] = schemas.unset,
                            orderGroupId: typing.Union[MetaOapg.properties.orderGroupId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            orderClass: typing.Union[MetaOapg.properties.orderClass, None, str, schemas.Unset] = schemas.unset,
                            isCrossZero: typing.Union[MetaOapg.properties.isCrossZero, None, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                symbol=symbol,
                                symbolId=symbolId,
                                totalQuantity=totalQuantity,
                                openQuantity=openQuantity,
                                filledQuantity=filledQuantity,
                                canceledQuantity=canceledQuantity,
                                side=side,
                                orderType=orderType,
                                limitPrice=limitPrice,
                                stopPrice=stopPrice,
                                isAllOrNone=isAllOrNone,
                                isAnonymous=isAnonymous,
                                icebergQuantity=icebergQuantity,
                                minQuantity=minQuantity,
                                avgExecPrice=avgExecPrice,
                                lastExecPrice=lastExecPrice,
                                source=source,
                                timeInForce=timeInForce,
                                gtdDate=gtdDate,
                                state=state,
                                rejectionReason=rejectionReason,
                                chainId=chainId,
                                creationTime=creationTime,
                                updateTime=updateTime,
                                notes=notes,
                                primaryRoute=primaryRoute,
                                secondaryRoute=secondaryRoute,
                                orderRoute=orderRoute,
                                venueHoldingOrder=venueHoldingOrder,
                                comissionCharged=comissionCharged,
                                exchangeOrderId=exchangeOrderId,
                                isSignificantShareHolder=isSignificantShareHolder,
                                isInsider=isInsider,
                                isLimitOffsetInDollar=isLimitOffsetInDollar,
                                userId=userId,
                                placementCommission=placementCommission,
                                legs=legs,
                                strategyType=strategyType,
                                triggerStopPrice=triggerStopPrice,
                                orderGroupId=orderGroupId,
                                orderClass=orderClass,
                                isCrossZero=isCrossZero,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orders':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "orderId": orderId,
                "orders": orders,
            }
        additional_properties = schemas.AnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orders"]) -> MetaOapg.properties.orders: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["orderId"], typing_extensions.Literal["orders"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> typing.Union[MetaOapg.properties.orderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orders"]) -> typing.Union[MetaOapg.properties.orders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["orderId"], typing_extensions.Literal["orders"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        orderId: typing.Union[MetaOapg.properties.orderId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        orders: typing.Union[MetaOapg.properties.orders, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'StrategyOrderPlace':
        return super().__new__(
            cls,
            *args,
            orderId=orderId,
            orders=orders,
            _configuration=_configuration,
            **kwargs,
        )
