#
# PySNMP MIB module Axos-Card-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///mnt/d/Data/MIBS/text_mibs/calix/Axos-Card-MIB.mib
# Produced by pysmi-0.3.4 at Tue Jan 25 21:37:10 2022
# On host QS-IL-LT-COSTAY platform Linux version 5.10.60.1-microsoft-standard-WSL2 by user coye
# Using Python version 2.7.18 (default, Mar  8 2021, 13:02:45) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
axosModules, = mibBuilder.importSymbols("CALIX-PRODUCT-MIB", "axosModules")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, mib_2, IpAddress, TimeTicks, Counter64, Unsigned32, iso, Gauge32, ModuleIdentity, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "mib-2", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "iso", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
axosCardModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4))
axosCardModule.setRevisions(('2020-10-23 00:00',))
if mibBuilder.loadTexts: axosCardModule.setLastUpdated('202010230000Z')
if mibBuilder.loadTexts: axosCardModule.setOrganization('Calix')
axosCardTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1), )
if mibBuilder.loadTexts: axosCardTable.setStatus('current')
axosCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1), ).setIndexNames((0, "Axos-Card-MIB", "axosCardShelf"), (0, "Axos-Card-MIB", "axosCardSlot"))
if mibBuilder.loadTexts: axosCardEntry.setStatus('current')
axosCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: axosCardShelf.setStatus('current')
axosCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: axosCardSlot.setStatus('current')
axosCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("alarmsuppress", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardAdminStatus.setStatus('current')
axosCardProvType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardProvType.setStatus('current')
axosCardActualType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardActualType.setStatus('current')
axosCardSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardSoftwareVersion.setStatus('current')
axosCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardSerialNumber.setStatus('current')
axosCardCurrentPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("notSet", 0), ("powerLevelLow", 1), ("powerLevel2", 2), ("powerLevel3", 3), ("powerLevel4", 4), ("powerLevelFull", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardCurrentPowerLevel.setStatus('current')
axosCardCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardCleiCode.setStatus('current')
axosCardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardPartNumber.setStatus('current')
axosCardStartMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardStartMacRange.setStatus('current')
axosCardEndMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosCardEndMacRange.setStatus('current')
axosOltPonPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2), )
if mibBuilder.loadTexts: axosOltPonPortTable.setStatus('current')
axosOltPonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1), ).setIndexNames((0, "Axos-Card-MIB", "axosOltPonPortIfindex"))
if mibBuilder.loadTexts: axosOltPonPortEntry.setStatus('current')
axosOltPonPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: axosOltPonPortIfindex.setStatus('current')
axosOltPonPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortName.setStatus('current')
axosOltPonPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("invalid", 0), ("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortStatus.setStatus('current')
axosOltPonPortTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortTemperature.setStatus('current')
axosOltPonPortTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortTxBias.setStatus('current')
axosOltPonPortTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortTxPower.setStatus('current')
axosOltPonPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortRxPower.setStatus('current')
axosOltPonPortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 4, 2, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axosOltPonPortVoltage.setStatus('current')
mibBuilder.exportSymbols("Axos-Card-MIB", axosCardEndMacRange=axosCardEndMacRange, axosOltPonPortVoltage=axosOltPonPortVoltage, axosCardSoftwareVersion=axosCardSoftwareVersion, axosOltPonPortTable=axosOltPonPortTable, axosOltPonPortName=axosOltPonPortName, axosCardStartMacRange=axosCardStartMacRange, axosCardModule=axosCardModule, axosCardEntry=axosCardEntry, axosOltPonPortStatus=axosOltPonPortStatus, axosCardCleiCode=axosCardCleiCode, axosCardSerialNumber=axosCardSerialNumber, axosCardTable=axosCardTable, axosCardSlot=axosCardSlot, axosCardAdminStatus=axosCardAdminStatus, axosCardCurrentPowerLevel=axosCardCurrentPowerLevel, axosCardProvType=axosCardProvType, axosOltPonPortTxPower=axosOltPonPortTxPower, axosOltPonPortTemperature=axosOltPonPortTemperature, axosOltPonPortTxBias=axosOltPonPortTxBias, axosOltPonPortRxPower=axosOltPonPortRxPower, axosCardPartNumber=axosCardPartNumber, axosOltPonPortIfindex=axosOltPonPortIfindex, axosCardShelf=axosCardShelf, PYSNMP_MODULE_ID=axosCardModule, axosCardActualType=axosCardActualType, axosOltPonPortEntry=axosOltPonPortEntry)
