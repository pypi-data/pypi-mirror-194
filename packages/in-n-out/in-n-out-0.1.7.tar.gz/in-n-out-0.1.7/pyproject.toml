# https://peps.python.org/pep-0517/
[build-system]
requires = [
    "setuptools>=45",
    "wheel",
    "setuptools-scm>=6.2",
    "Cython==3.0.0a11",
]
build-backend = "setuptools.build_meta"

# https://peps.python.org/pep-0621/
[project]
name = "in-n-out"
description = " plugable dependency injection and result processing"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD 3-Clause License" }
authors = [{ email = "talley.lambert@gmail.com" }, { name = "Talley Lambert" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = ["version"]
dependencies = []

# extras
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
test = ["pytest>=6.0", "pytest-cov", "toolz", "pytest-codspeed"]
dev = [
    "black",
    "cruft",
    "flake8-bugbear",
    "flake8-docstrings",
    "flake8-pyprojecttoml",
    "flake8-typing-imports",
    "flake8-walrus",         # cause cython
    "flake8",
    "ipython",
    "isort",
    "mypy",
    "pdbpp",
    "pre-commit",
    "pydocstyle",
    "pytest-cov",
    "pytest",
    "rich",
]
build = ["Cython==3.0.0a11;sys_platform != 'win32'"]

[project.urls]
homepage = "https://github.com/pyapp-kit/in-n-out"
repository = "https://github.com/pyapp-kit/in-n-out"

# same as console_scripts entry point
# [project.scripts]
# spam-cli = "spam:main_cli"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# [project.entry-points."spam.magical"]
# tomatoes = "spam:main_tomatoes"

# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[tool.setuptools]
zip-safe = false
include-package-data = true
packages = { find = { where = ["src"], exclude = [] } }

[tool.setuptools.package-data]
"*" = ["py.typed"]

# https://github.com/pypa/setuptools_scm/#pyprojecttoml-usage
[tool.setuptools_scm]

# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 88
src = ["src", "tests"]
target-version = "py38"
extend-select = [
    "E",    # style errors
    "F",    # flakes
    "D",    # pydocstyle
    "I",    # isort
    "UP",   # pyupgrade
    "S",    # bandit
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-typing-imports
]
extend-ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line should be in imperative mood
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
    "C901", # complexity
]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D", "S"]
"benchmarks/*.py" = ["D"]
"setup.py" = ["D"]
"src/in_n_out/_global.py" = ["D"]

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = ["error"]

[tool.coverage.run]
source = ['src/in_n_out']
command_line = "-m pytest"

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
]
show_missing = true

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/*.py"
strict = true
disallow_any_generics = false
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = ["cython"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests"]
disallow_untyped_defs = false

# https://github.com/cruft/cruft
[tool.cruft]
skip = ["tests"]

# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".cruft.json",
    ".flake8",
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    "tests/**/*",
    "**/*.c",
    "Makefile",
    "codecov.yml",
    "asv.conf.json",
    "benchmarks/**/*",
    "CHANGELOG.md",
]

# https://python-semantic-release.readthedocs.io/en/latest/configuration.html
[tool.semantic_release]
version_source = "tag_only"
branch = "main"
changelog_sections = "feature,fix,breaking,documentation,performance,chore,:boom:,:sparkles:,:children_crossing:,:lipstick:,:iphone:,:egg:,:chart_with_upwards_trend:,:ambulance:,:lock:,:bug:,:zap:,:goal_net:,:alien:,:wheelchair:,:speech_balloon:,:mag:,:apple:,:penguin:,:checkered_flag:,:robot:,:green_apple:,Other"
# commit_parser=semantic_release.history.angular_parser
build_command = "pip install build && python -m build"


[tool.cibuildwheel]
# Skip 32-bit builds & PyPy wheels on all platforms
skip = ["*-win32", "pp*"]
test-extras = ["test"]
test-command = "pytest {project}/tests -v"
test-skip = "*-musllinux* *-manylinux_i686"


[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
