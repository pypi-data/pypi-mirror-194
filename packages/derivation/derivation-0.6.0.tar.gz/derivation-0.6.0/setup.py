# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['derivation']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'derivation',
    'version': '0.6.0',
    'description': '',
    'long_description': '# Derivation\n\n[![Maintainability](https://api.codeclimate.com/v1/badges/08e384eaba6ad7375e8b/maintainability)](https://codeclimate.com/github/RainrainWu/derivation/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/08e384eaba6ad7375e8b/test_coverage)](https://codeclimate.com/github/RainrainWu/derivation/test_coverage)\n[![codecov](https://codecov.io/gh/RainrainWu/derivation/branch/master/graph/badge.svg?token=at8Ckp5iLi)](https://codecov.io/gh/RainrainWu/derivation)\n[![Github Actions](https://github.com/RainrainWu/derivation/actions/workflows/pull_request.yml/badge.svg)](https://github.com/RainrainWu/derivation/actions/workflows/pull_request.yml)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/derivation.svg)](https://pypi.python.org/pypi/derivation/)\n\nDerivation is a flexible payload generating framework with highly-customizable patterns and rules which raise your efficiency significantly on test case implementation against complicated inputs.\n\n[View Page on Pypi >>](https://pypi.org/project/derivation/)\n\n## Derivative\n\nDerivative is the primary object which helps you sort out all of possible results with the given inputs.\n\n> The script below can be executed directly\n```python\nfrom enum import Enum, auto\nfrom operator import or_\n\nfrom derivation.constraint import MutuallyExclusiveConstraint, OccurrenceConstraint\nfrom derivation.derivative import Derivative\n\n\nclass DerivativeEvent(Enum):\n    @staticmethod\n    def _generate_next_value_(name, start, count, last_values):\n        return name.upper()\n\n\nclass DerivativeEventExample(DerivativeEvent):\n\n    ESSENTIALS = auto()\n\n    OPTIONAL_1 = auto()\n    OPTIONAL_2 = auto()\n\n\nEVENTS_EXAMPLE = {event: {event.value: None} for event in DerivativeEventExample}\n\noccurrence_constraint = OccurrenceConstraint(\n    (DerivativeEventExample.ESSENTIALS,),\n    min_times=1,\n    max_times=1,\n)\nmutually_exclusive_constraint = MutuallyExclusiveConstraint(\n    (\n        DerivativeEventExample.OPTIONAL_1,\n        DerivativeEventExample.OPTIONAL_2,\n    ),\n)\nderivative = Derivative(\n    EVENTS_EXAMPLE,\n    or_,\n    (occurrence_constraint, mutually_exclusive_constraint),\n)\n\nfor order, result in derivative.exhaustive():\n\n    print(f"{order}\\n{result}\\n")\n\n```\n\n## Constraint\n\nConstraint helps you construct the rules for specific requirements of deriving recipe.\n\n### Occurrence\n\nOccurrence Constraint make us able to limit the total occurrence times of a specific group of events.\n\n```python\noccurrence_constraint = OccurrenceConstraint(\n    (DerivativeEventExample.ESSENTIALS,),\n    min_times=1,\n    max_times=1,\n)\n\n# pass\noccurrence_constraint.constrain(\n    (DerivativeEventExample.ESSENTIALS, DerivativeEventExample.OPTIONAL_1),\n)\n\n# error\noccurrence_constraint.constrain(\n    (DerivativeEventExample.OPTIONAL_1,),\n)\n```\n\n### Mutually Exclusive\n\nOccurrence Constraint make us able to avoid conflicts of a specific group of events.\n\n```python\nmutually_exclusive_constraint = MutuallyExclusiveConstraint(\n    (\n        DerivativeEventExample.OPTIONAL_1,\n        DerivativeEventExample.OPTIONAL_2,\n    ),\n)\n\n# pass\nmutually_exclusive_constraint.constrain(\n    (DerivativeEventExample.ESSENTIALS, DerivativeEventExample.OPTIONAL_1),\n)\n\n# error\nmutually_exclusive_constraint.constrain(\n    (DerivativeEventExample.OPTIONAL_1, DerivativeEventExample.OPTIONAL_2),\n)\n```\n\n### Prerequisite\n\nPrerequisite Constraint define the ordering and dependencies of valid event series.\n\n```python\nprerequisite_constraint = PrerequisiteConstraint(\n    (DerivativeEventExample.ESSENTIALS,),\n    (DerivativeEventExample.OPTIONAL_1, DerivativeEventExample.OPTIONAL_2),\n)\n\n# pass\nprerequisite_constraint.constrain(\n    (DerivativeEventExample.ESSENTIALS, DerivativeEventExample.OPTIONAL_1),\n)\n\n# error\nprerequisite_constraint.constrain(\n    (DerivativeEventExample.OPTIONAL_2,),\n)\n```\n\n### Termination\n\nTermination constraints focus on the specific group of termination events.\n\n```python\ntermination_constraint = TerminationConstraint(\n    (DerivativeEventExample.OPTIONAL_1, DerivativeEventExample.OPTIONAL_2),\n)\n\n# pass\ntermination_constraint.constrain(\n    (DerivativeEventExample.ESSENTIALS, DerivativeEventExample.OPTIONAL_1),\n)\n\n# error\ntermination_constraint.constrain(\n    (DerivativeEventExample.ESSENTIALS,),\n)\n```\n\n## Federation\n\nFederation objects allow you construct a more complicated structure with multiple derivation instances, as well as a couple of parameters sets and filtering rules.\n\n\n> Append script below to the bottom of the previous example for derivation.\n\n```python\nfrom derivation.federation import Federation\n\n\nclass DerivativePatternExample(DerivativeEvent):\n\n    COMPOSITED = auto()\n\n\nPATTERNS_EXAMPLE = {\n    DerivativePatternExample.COMPOSITED: (\n        lambda slot_1, slot_2, constant, customized: {\n            "slot_1": slot_1,\n            "slot_2": slot_2,\n            "constant": constant,\n            "customized": customized,\n        }\n    )\n}\n\n\nclass DerivativeParamsMapExample(DerivativeEvent):\n\n    DEFAULT = auto()\n\n\nPARAMS_MAPS_EXAMPLE = {\n    DerivativeParamsMapExample.DEFAULT: {"constant": "default"},\n}\n\n\nclass DerivativeFilterExample(DerivativeEvent):\n\n    RICH_SLOT_1 = auto()\n\n\nFILTERS_EXAMPLE = {\n    DerivativeFilterExample.RICH_SLOT_1: lambda x: len(x["slot_1"]) > 1,\n}\n\nfederation = Federation[\n    DerivativePatternExample,\n    DerivativeParamsMapExample,\n    DerivativeFilterExample,\n    dict,\n](\n    {"slot_1": derivative, "slot_2": derivative},\n    PATTERNS_EXAMPLE,\n    PARAMS_MAPS_EXAMPLE,\n    FILTERS_EXAMPLE,\n)\n\nfor composited_result in federation.exhaustive(\n    DerivativePatternExample.COMPOSITED,\n    (DerivativeParamsMapExample.DEFAULT,),\n    {"customized": "customized"},\n    (DerivativeFilterExample.RICH_SLOT_1,),\n):\n\n    print(f"{composited_result}\\n")\n```\n\n### Derivatives & Patterns\n\nFederation object allows you pre-register some patterns which describe how should the derivatives combine with each other.\n\nPattern are generally a callable function and introduce candidates of the derivatives or apply fixed value as the parameters, we encourage users define readable variable name for better collaboration.\n\n```python\nPATTERNS_EXAMPLE = {\n    DerivativePatternExample.COMPOSITED: (\n\n        # Callable object as pre-defined pattern.\n        lambda slot_1, slot_2, constant, customized: {\n            "slot_1": slot_1,\n            "slot_2": slot_2,\n            "constant": constant,\n            "customized": customized,\n        }\n    )\n}\n```\n\n### Parameters Maps\n\nFor the parameters do not require exhausting via a derivative object, parameters maps can be attached as the fixed values.\n\n```python\nPARAMS_MAPS_EXAMPLE = {\n\n    # Apply fixed string object "default" to `constant` parameter inside patterns\n    DerivativeParamsMapExample.DEFAULT: {"constant": "default"},\n}\n```\n\n### Filters\n\nIn order to re-use federation object in many similar scenarios, pre-register filters provide a more flexible approach for fetching candidates with specific features.\n\n```python\nFILTERS_EXAMPLE = {\n\n    # Only allow results which contain more than one item in slot_1.\n    DerivativeFilterExample.RICH_SLOT_1: lambda x: len(x["slot_1"]) > 1,\n}\n```\n\n### Customized Parameters\n\nTemporary parameters right inside each exhaustive iterator are also supported, which can help you achieve much more flexible design against edge cases.\n\n```python\nfor composited_result in federation.exhaustive(\n    DerivativePatternExample.COMPOSITED,\n    (DerivativeParamsMapExample.DEFAULT,),\n\n    # Temporary parameters only take effects within this iterator.\n    {"customized": "customized"},\n    (DerivativeFilterExample.RICH_SLOT_1,),\n):\n\n    print(f"{composited_result}\\n")\n```\n\n## Contribution\n\n- [RainrainWu](https://github.com/RainrainWu)\n',
    'author': 'Rain Wu',
    'author_email': 'rain.wu@appier.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
