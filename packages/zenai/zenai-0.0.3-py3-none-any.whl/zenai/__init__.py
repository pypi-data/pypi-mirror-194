from abc import ABC, abstractmethod,abstractproperty
from concurrent import futures
import grpc
import inference_pb2
import inference_pb2_grpc
import json
class ZenModel(ABC):
    @abstractmethod
    def init(self) -> any:
        pass

    @abstractmethod
    def process(self, input: dict) -> any:
        pass

class Inference(inference_pb2_grpc.InferenceService):
    def __init__(self, model: ZenModel):
        self.model = model
        self.model.init()
    def IsReady(self, request, context):
        return inference_pb2.IsReadyOutput(ready=True)

    def Process(self, request, context):
        print(request)
        data = json.loads(request.input)
        print(data)
        output = self.model.process(input=data)
        data_output = json.dumps(output)
        return inference_pb2.ProcessOutput(output=data_output)

class ZenRunner:
    def __init__(self, model: ZenModel):
        self.inference = Inference(model)

    def start(self):
        port = '50051'
        server = grpc.server(futures.ThreadPoolExecutor(max_workers=1))
        inference_pb2_grpc.add_InferenceServiceServicer_to_server(self.inference, server)
        server.add_insecure_port('[::]:' + port)
        server.start()
        print("Server started, listening on " + port)
        server.wait_for_termination()

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from server.v1 import inference_pb2 as server_dot_v1_dot_inference__pb2


class InferenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsReady = channel.unary_unary(
                '/server.v1.InferenceService/IsReady',
                request_serializer=server_dot_v1_dot_inference__pb2.IsReadyInput.SerializeToString,
                response_deserializer=server_dot_v1_dot_inference__pb2.IsReadyOutput.FromString,
                )
        self.Process = channel.unary_unary(
                '/server.v1.InferenceService/Process',
                request_serializer=server_dot_v1_dot_inference__pb2.ProcessInput.SerializeToString,
                response_deserializer=server_dot_v1_dot_inference__pb2.ProcessOutput.FromString,
                )


class InferenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Process(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsReady': grpc.unary_unary_rpc_method_handler(
                    servicer.IsReady,
                    request_deserializer=server_dot_v1_dot_inference__pb2.IsReadyInput.FromString,
                    response_serializer=server_dot_v1_dot_inference__pb2.IsReadyOutput.SerializeToString,
            ),
            'Process': grpc.unary_unary_rpc_method_handler(
                    servicer.Process,
                    request_deserializer=server_dot_v1_dot_inference__pb2.ProcessInput.FromString,
                    response_serializer=server_dot_v1_dot_inference__pb2.ProcessOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server.v1.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.v1.InferenceService/IsReady',
            server_dot_v1_dot_inference__pb2.IsReadyInput.SerializeToString,
            server_dot_v1_dot_inference__pb2.IsReadyOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.v1.InferenceService/Process',
            server_dot_v1_dot_inference__pb2.ProcessInput.SerializeToString,
            server_dot_v1_dot_inference__pb2.ProcessOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
