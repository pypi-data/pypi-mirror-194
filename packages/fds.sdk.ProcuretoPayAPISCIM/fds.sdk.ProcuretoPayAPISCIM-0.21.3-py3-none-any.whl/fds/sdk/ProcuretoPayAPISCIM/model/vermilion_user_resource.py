"""
    FactSet SCIM API

    FactSet's SCIM API implementation.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.sdk.ProcuretoPayAPISCIM.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from fds.sdk.ProcuretoPayAPISCIM.exceptions import ApiAttributeError


def lazy_import():
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_emails import VermilionUserResourceEmails
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_entitlements import VermilionUserResourceEntitlements
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_groups import VermilionUserResourceGroups
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_meta import VermilionUserResourceMeta
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_name import VermilionUserResourceName
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_phone_numbers import VermilionUserResourcePhoneNumbers
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_photos import VermilionUserResourcePhotos
    from fds.sdk.ProcuretoPayAPISCIM.model.vermilion_user_resource_roles import VermilionUserResourceRoles
    globals()['VermilionUserResourceEmails'] = VermilionUserResourceEmails
    globals()['VermilionUserResourceEntitlements'] = VermilionUserResourceEntitlements
    globals()['VermilionUserResourceGroups'] = VermilionUserResourceGroups
    globals()['VermilionUserResourceMeta'] = VermilionUserResourceMeta
    globals()['VermilionUserResourceName'] = VermilionUserResourceName
    globals()['VermilionUserResourcePhoneNumbers'] = VermilionUserResourcePhoneNumbers
    globals()['VermilionUserResourcePhotos'] = VermilionUserResourcePhotos
    globals()['VermilionUserResourceRoles'] = VermilionUserResourceRoles


class VermilionUserResource(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'user_name': (str,),  # noqa: E501
            'domain_code': (str,),  # noqa: E501
            'is_administrator': (bool,),  # noqa: E501
            'schemas': ([str],),  # noqa: E501
            'id': (str,),  # noqa: E501
            'name': (VermilionUserResourceName,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'profile_url': (str,),  # noqa: E501
            'user_type': (str,),  # noqa: E501
            'preferred_language': (str,),  # noqa: E501
            'active': (bool,),  # noqa: E501
            'password': (str,),  # noqa: E501
            'authenticated_user_name': (str,),  # noqa: E501
            'tenant': (str,),  # noqa: E501
            'tenancies': ([str],),  # noqa: E501
            'emails': ([VermilionUserResourceEmails],),  # noqa: E501
            'phone_numbers': ([VermilionUserResourcePhoneNumbers],),  # noqa: E501
            'photos': ([VermilionUserResourcePhotos],),  # noqa: E501
            'groups': ([VermilionUserResourceGroups],),  # noqa: E501
            'entitlements': ([VermilionUserResourceEntitlements],),  # noqa: E501
            'roles': ([VermilionUserResourceRoles],),  # noqa: E501
            'meta': (VermilionUserResourceMeta,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'user_name': 'userName',  # noqa: E501
        'domain_code': 'domainCode',  # noqa: E501
        'is_administrator': 'isAdministrator',  # noqa: E501
        'schemas': 'schemas',  # noqa: E501
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'profile_url': 'profileUrl',  # noqa: E501
        'user_type': 'userType',  # noqa: E501
        'preferred_language': 'preferredLanguage',  # noqa: E501
        'active': 'active',  # noqa: E501
        'password': 'password',  # noqa: E501
        'authenticated_user_name': 'authenticatedUserName',  # noqa: E501
        'tenant': 'tenant',  # noqa: E501
        'tenancies': 'tenancies',  # noqa: E501
        'emails': 'emails',  # noqa: E501
        'phone_numbers': 'phoneNumbers',  # noqa: E501
        'photos': 'photos',  # noqa: E501
        'groups': 'groups',  # noqa: E501
        'entitlements': 'entitlements',  # noqa: E501
        'roles': 'roles',  # noqa: E501
        'meta': 'meta',  # noqa: E501
    }

    read_only_vars = {
        'user_name',  # noqa: E501
        'id',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, user_name, domain_code, is_administrator, *args, **kwargs):  # noqa: E501
        """VermilionUserResource - a model defined in OpenAPI

        Args:
            user_name (str): A service provider's unique identifier for the user, typically used by the user to directly authenticate to the service provider. Each User MUST include a non-empty userName value. This identifier MUST be unique across the service provider's entire set of Users.
            domain_code (str): Domain code of Enterprise Hosting pod in which user resides. REQUIRED.
            is_administrator (bool): Whether the user can perform maintenance on other users. REQUIRED.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            schemas ([str]): [optional]  # noqa: E501
            id (str): [optional]  # noqa: E501
            name (VermilionUserResourceName): [optional]  # noqa: E501
            display_name (str): The name of the User, suitable for display to end-users. The name SHOULD be the full name of the User being described, if known.. [optional]  # noqa: E501
            profile_url (str): A fully qualified URL pointing to a page\\nrepresenting the User's online profile.. [optional]  # noqa: E501
            user_type (str): Used to identify the relationship between the organization and the user. Typical values used might be 'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used.. [optional]  # noqa: E501
            preferred_language (str): Indicates the User's preferred written or spoken language.  Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country. [optional]  # noqa: E501
            active (bool): A Boolean value indicating the User's administrative status.. [optional]  # noqa: E501
            password (str): The User's cleartext password. This attribute is intended to be used as a means to specify an initial password when creating a new User or to reset an existing User's password.. [optional]  # noqa: E501
            authenticated_user_name (str): The authenticated user name of the user. [optional]  # noqa: E501
            tenant (str): The tenant this user is in. [optional]  # noqa: E501
            tenancies ([str]): Tenancies assigned to the user.. [optional]  # noqa: E501
            emails ([VermilionUserResourceEmails]): Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.. [optional]  # noqa: E501
            phone_numbers ([VermilionUserResourcePhoneNumbers]): Phone numbers for the User. The value SHOULD be canonicalized by the service provider according to the format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'. Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager'. [optional]  # noqa: E501
            photos ([VermilionUserResourcePhotos]): URLs of photos of the User.. [optional]  # noqa: E501
            groups ([VermilionUserResourceGroups]): A list of groups to which the user belongs, either through direct membership, through nested groups, or dynamically calculated.. [optional]  # noqa: E501
            entitlements ([VermilionUserResourceEntitlements]): A list of entitlements for the User that represent a thing the User has.. [optional]  # noqa: E501
            roles ([VermilionUserResourceRoles]): A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'.. [optional]  # noqa: E501
            meta (VermilionUserResourceMeta): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.user_name = user_name
        self.domain_code = domain_code
        self.is_administrator = is_administrator
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, domain_code, is_administrator, *args, **kwargs):  # noqa: E501
        """VermilionUserResource - a model defined in OpenAPI

            domain_code (str): Domain code of Enterprise Hosting pod in which user resides. REQUIRED.
            is_administrator (bool): Whether the user can perform maintenance on other users. REQUIRED.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            schemas ([str]): [optional]  # noqa: E501
            id (str): [optional]  # noqa: E501
            name (VermilionUserResourceName): [optional]  # noqa: E501
            display_name (str): The name of the User, suitable for display to end-users. The name SHOULD be the full name of the User being described, if known.. [optional]  # noqa: E501
            profile_url (str): A fully qualified URL pointing to a page\\nrepresenting the User's online profile.. [optional]  # noqa: E501
            user_type (str): Used to identify the relationship between the organization and the user. Typical values used might be 'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used.. [optional]  # noqa: E501
            preferred_language (str): Indicates the User's preferred written or spoken language.  Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country. [optional]  # noqa: E501
            active (bool): A Boolean value indicating the User's administrative status.. [optional]  # noqa: E501
            password (str): The User's cleartext password. This attribute is intended to be used as a means to specify an initial password when creating a new User or to reset an existing User's password.. [optional]  # noqa: E501
            authenticated_user_name (str): The authenticated user name of the user. [optional]  # noqa: E501
            tenant (str): The tenant this user is in. [optional]  # noqa: E501
            tenancies ([str]): Tenancies assigned to the user.. [optional]  # noqa: E501
            emails ([VermilionUserResourceEmails]): Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.. [optional]  # noqa: E501
            phone_numbers ([VermilionUserResourcePhoneNumbers]): Phone numbers for the User. The value SHOULD be canonicalized by the service provider according to the format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'. Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager'. [optional]  # noqa: E501
            photos ([VermilionUserResourcePhotos]): URLs of photos of the User.. [optional]  # noqa: E501
            groups ([VermilionUserResourceGroups]): A list of groups to which the user belongs, either through direct membership, through nested groups, or dynamically calculated.. [optional]  # noqa: E501
            entitlements ([VermilionUserResourceEntitlements]): A list of entitlements for the User that represent a thing the User has.. [optional]  # noqa: E501
            roles ([VermilionUserResourceRoles]): A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'.. [optional]  # noqa: E501
            meta (VermilionUserResourceMeta): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.domain_code = domain_code
        self.is_administrator = is_administrator
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
