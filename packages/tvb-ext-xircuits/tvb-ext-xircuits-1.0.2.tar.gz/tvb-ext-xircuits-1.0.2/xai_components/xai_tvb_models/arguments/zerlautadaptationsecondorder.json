{
    "description": "<div class=\"document\" id=\"traited-class-tvb-simulator-models-zerlaut-zerlautadaptationsecondorder\">\n<h1 class=\"title\">Traited class [tvb.simulator.models.zerlaut.ZerlautAdaptationSecondOrder]</h1>\n<blockquote>\n<p><strong>References</strong>:\n.. [ZD_2018]  Zerlaut, Y., Chemla, S., Chavane, F. et al. <em>Modeling mesoscopic cortical dynamics using a mean-field\nmodel of conductance-based networks of adaptive\nexponential integrate-and-fire neurons</em>,\nJ Comput Neurosci (2018) 44: 45. <a class=\"reference external\" href=\"https://doi-org.lama.univ-amu.fr/10.1007/s10827-017-0668-2\">https://doi-org.lama.univ-amu.fr/10.1007/s10827-017-0668-2</a>\n.. [MV_2018]  Matteo di Volo, Alberto Romagnoni, Cristiano Capone, Alain Destexhe (2018)\n<em>Mean-field model for the dynamics of conductance-based networks of excitatory and inhibitory spiking neurons\nwith adaptation</em>, bioRxiv, doi: <a class=\"reference external\" href=\"https://doi.org/10.1101/352393\">https://doi.org/10.1101/352393</a></p>\n<p>Used Eqns 4 from [MV_2018]_ in <tt class=\"docutils literal\">dfun</tt>.</p>\n<p>(See Zerlaut_adaptation_first_order for the default value)</p>\n<p>The models (<span class=\"formula\"><i>E</i></span>, <span class=\"formula\"><i>I</i></span>) phase-plane, including a representation of\nthe vector field as well as its nullclines, using default parameters, can be\nseen below:</p>\n<p>The general formulation for the textit{textbf{Zerlaut_adaptation_second_order}} model as a\ndynamical unit at a node $k$ in a BNM with $l$ nodes reads:</p>\n<div class=\"formula\">\n<span class=\"environment align\"><span class=\"arrayrow\">\n<span class=\"arraycell align-r\">\n\u2200<i>\u03bc</i>,\u2009<i>\u03bb</i>,\u2009<i>\u03b7</i>\u2009\u2208\u2009{<i>e</i>,\u2009<i>i</i>}<sup>3</sup>\u2006<span class=\"array\"><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23a7</span></span><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23aa</span></span><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23a8</span></span><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23aa</span></span><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23a9</span></span></span><span class=\"unknown\">\\begin{split} <span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n<i>T</i>\u2006<span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">\u2202<i>\u03bd</i><sub><i>\u03bc</i></sub></span><span class=\"ignored\">)/(</span><span class=\"denominator\">\u2202<i>t</i></span><span class=\"ignored\">)</span></span>\u2009=\u2009\n</span>\n<span class=\"arraycell align-l\">\n(\u2131<sub><i>\u03bc</i></sub>\u2009\u2212\u2009<i>\u03bd</i><sub><i>\u03bc</i></sub>)\u2009+\u2009<span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">1</span><span class=\"ignored\">)/(</span><span class=\"denominator\">2</span><span class=\"ignored\">)</span></span>\u2006<i>c</i><sub><i>\u03bb</i><i>\u03b7</i></sub>\u2006<span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">\u2202<sup>2</sup>\u2131<sub><i>\u03bc</i></sub></span><span class=\"ignored\">)/(</span><span class=\"denominator\">\u2202<i>\u03bd</i><sub><i>\u03bb</i></sub>\u2202<i>\u03bd</i><sub><i>\u03b7</i></sub></span><span class=\"ignored\">)</span></span>\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n<i>T</i>\u2006<span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">\u2202<i>c</i><sub><i>\u03bb</i><i>\u03b7</i></sub></span><span class=\"ignored\">)/(</span><span class=\"denominator\">\u2202<i>t</i></span><span class=\"ignored\">)</span></span>\u2009=\u2009\n</span>\n<span class=\"arraycell align-l\">\n<i>A</i><sub><i>\u03bb</i><i>\u03b7</i></sub>\u2009+\u2009(\u2131<sub><i>\u03bb</i></sub>\u2009\u2212\u2009<i>\u03bd</i><sub><i>\u03bb</i></sub>)\u2006(\u2131<sub><i>\u03b7</i></sub>\u2009\u2212\u2009<i>\u03bd</i><sub><i>\u03b7</i></sub>)\u2009+\u2009\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n\n</span>\n<span class=\"arraycell align-l\">\n<i>c</i><sub><i>\u03bb</i><i>\u03bc</i></sub><span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">\u2202\u2131<sub><i>\u03bc</i></sub></span><span class=\"ignored\">)/(</span><span class=\"denominator\">\u2202<i>\u03bd</i><sub><i>\u03bb</i></sub></span><span class=\"ignored\">)</span></span>\u2009+\u2009<i>c</i><sub><i>\u03bc</i><i>\u03b7</i></sub><span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">\u2202\u2131<sub><i>\u03bc</i></sub></span><span class=\"ignored\">)/(</span><span class=\"denominator\">\u2202<i>\u03bd</i><sub><i>\u03b7</i></sub></span><span class=\"ignored\">)</span></span>\u2009\u2212\u20092<i>c</i><sub><i>\u03bb</i><i>\u03b7</i></sub>\n</span>\n\n</span>\n</span><span class=\"emptydot\"></span><i>dot</i><i>W</i><sub><i>k</i></sub>\n</span>\n<span class=\"arraycell align-l\">\n\u2009=\u2009<i>W</i><sub><i>k</i></sub>\u2009\u2044\u2009<i>tau</i><sub><i>w</i></sub>\u2009\u2212\u2009<i>b</i>*<i>E</i><sub><i>k</i></sub>\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-r\">\n\u2005\n</span>\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-r\">\n\n</span>\n\n</span>\n</span>\n</div>\n<div class=\"formula\">\n<i>with</i> : <i>A</i><sub><i>\u03bb</i><i>\u03b7</i></sub>\u2009=\u2009<span class=\"array\"><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23a7</span></span><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23a8</span></span><span class=\"arrayrow\"><span class=\"bracket align-left\">\u23a9</span></span></span><span class=\"unknown\">\\begin{split} <span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n<span class=\"fraction\"><span class=\"ignored\">(</span><span class=\"numerator\">\u2131<sub><i>\u03bb</i></sub>\u2006(1\u2009\u2044\u2009<i>T</i>\u2009\u2212\u2009\u2131<sub><i>\u03bb</i></sub>)</span><span class=\"ignored\">)/(</span><span class=\"denominator\"><i>N</i><sub><i>\u03bb</i></sub></span><span class=\"ignored\">)</span></span>\u2001\u2001\n</span>\n<span class=\"arraycell align-l\">\n<span class=\"textrm\">if  </span><i>\u03bb</i>\u2009=\u2009<i>\u03b7</i>\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n<span class=\"arraycell align-l\">\n\u2005\n</span>\n\n</span>\n<span class=\"arrayrow\">\n<span class=\"arraycell align-l\">\n0\u2001\u2001\n</span>\n<span class=\"arraycell align-l\">\n<span class=\"textrm\">\u2009otherwise</span>\n</span>\n\n</span>\n</span><span class=\"emptydot\"></span>\n</div>\n</blockquote>\n<div class=\"section\" id=\"attributes-declared\">\n<h1>Attributes declared</h1>\n<dl class=\"docutils\">\n<dt>state_variable_range <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationSecondOrder.state_variable_range = Final(field_type=&lt;class 'dict'&gt;, default={'E': array([0.001, 0.25 ]), 'I': array([0.001, 0.25 ]), 'C_ee': array([0.0005, 0.    ]), 'C_ei': array([ 0.0005, -0.0005]), 'C_ii': array([0.0005, 0.    ]), 'W_e': array([  0., 200.]), 'W_i': array([0., 0.])}, required=True)</span></dt>\n<dd><p class=\"first\">The values for each state-variable should be set to encompass\nthe expected dynamic range of that state-variable for the current\nparameters, it is used as a mechanism for bounding random inital\nconditions when the simulation isn't started from an explicit history,\nit is also provides the default range of phase-plane plots.</p>\n<p>E: firing rate of excitatory population in KHz</p>\n<p>I: firing rate of inhibitory population in KHz</p>\n<p>C_ee: the variance of the excitatory population activity</p>\n<p>C_ei: the covariance between the excitatory and inhibitory population activities (always symetric)</p>\n<p>C_ie: the variance of the inhibitory population activity</p>\n<p class=\"last\">W: level of adaptation</p>\n</dd>\n<dt>variables_of_interest <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationSecondOrder.variables_of_interest = List(of=&lt;class 'str'&gt;, default=('E',), required=True)</span></dt>\n<dd>This represents the default state-variables of this Model to be\nmonitored. It can be overridden for each Monitor if desired. The\ncorresponding state-variable indices for this model are <span class=\"formula\"><i>E</i>\u2009=\u20090</span>,\n<span class=\"formula\"><i>I</i>\u2009=\u20091</span>, <span class=\"formula\"><i>C</i><sub><i>ee</i></sub>\u2009=\u20092</span>, <span class=\"formula\"><i>C</i><sub><i>ei</i></sub>\u2009=\u20093</span>, <span class=\"formula\"><i>C</i><sub><i>ii</i></sub>\u2009=\u20094</span> and <span class=\"formula\"><i>W</i>\u2009=\u20095</span>.</dd>\n<dt>g_L <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.g_L = NArray(label='<span class=\"formula\"><i>g</i><sub><i>L</i></sub></span>', dtype=float64, default=array([10.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>leak conductance [nS]</dd>\n<dt>E_L_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_L_e = NArray(label='<span class=\"formula\"><i>E</i><sub><i>Le</i></sub></span>', dtype=float64, default=array([-65.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>leak reversal potential for excitatory [mV]</dd>\n<dt>E_L_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_L_i = NArray(label='<span class=\"formula\"><i>E</i><sub><i>Li</i></sub></span>', dtype=float64, default=array([-65.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>leak reversal potential for inhibitory [mV]</dd>\n<dt>C_m <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.C_m = NArray(label='<span class=\"formula\"><i>C</i><sub><i>m</i></sub></span>', dtype=float64, default=array([200.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>membrane capacitance [pF]</dd>\n<dt>b_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.b_e = NArray(label='<span class=\"formula\"><i>b</i><sub><i>e</i></sub></span>', dtype=float64, default=array([60.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Excitatory adaptation current increment [pA]</dd>\n<dt>a_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.a_e = NArray(label='<span class=\"formula\"><i>a</i><sub><i>e</i></sub></span>', dtype=float64, default=array([4.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Excitatory adaptation conductance [nS]</dd>\n<dt>b_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.b_i = NArray(label='<span class=\"formula\"><i>b</i><sub><i>i</i></sub></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Inhibitory adaptation current increment [pA]</dd>\n<dt>a_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.a_i = NArray(label='<span class=\"formula\"><i>a</i><sub><i>i</i></sub></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Inhibitory adaptation conductance [nS]</dd>\n<dt>tau_w_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_w_e = NArray(label='<span class=\"formula\"><i>tau</i><sub><i>we</i></sub></span>', dtype=float64, default=array([500.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Adaptation time constant of excitatory neurons [ms]</dd>\n<dt>tau_w_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_w_i = NArray(label='<span class=\"formula\"><i>tau</i><sub><i>wi</i></sub></span>', dtype=float64, default=array([1.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Adaptation time constant of inhibitory neurons [ms]</dd>\n<dt>E_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_e = NArray(label='<span class=\"formula\"><i>E</i><sub><i>e</i></sub></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>excitatory reversal potential [mV]</dd>\n<dt>E_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.E_i = NArray(label='<span class=\"formula\"><i>E</i><sub><i>i</i></sub></span>', dtype=float64, default=array([-80.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>inhibitory reversal potential [mV]</dd>\n<dt>Q_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.Q_e = NArray(label='<span class=\"formula\"><i>Q</i><sub><i>e</i></sub></span>', dtype=float64, default=array([1.5]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>excitatory quantal conductance [nS]</dd>\n<dt>Q_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.Q_i = NArray(label='<span class=\"formula\"><i>Q</i><sub><i>i</i></sub></span>', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>inhibitory quantal conductance [nS]</dd>\n<dt>tau_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_e = NArray(label='<span class=\"formula\"><br/><i>tau</i><sub><i>e</i></sub></span>', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>excitatory decay [ms]</dd>\n<dt>tau_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.tau_i = NArray(label='<span class=\"formula\"><br/><i>tau</i><sub><i>i</i></sub></span>', dtype=float64, default=array([5.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>inhibitory decay [ms]</dd>\n<dt>N_tot <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.N_tot = NArray(label='<span class=\"formula\"><i>N</i><sub><i>tot</i></sub></span>', dtype=int64, default=array([10000]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>cell number</dd>\n<dt>p_connect <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.p_connect = NArray(label='<span class=\"formula\"><br/><i>epsilon</i></span>', dtype=float64, default=array([0.05]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>connectivity probability</dd>\n<dt>g <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.g = NArray(label='<span class=\"formula\"><i>g</i></span>', dtype=float64, default=array([0.2]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>fraction of inhibitory cells</dd>\n<dt>K_ext_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.K_ext_e = NArray(label='<span class=\"formula\"><i>K</i><span class=\"scripts\"><sub class=\"script\"><i>e</i></sub><sub class=\"script\"><i>ext</i></sub></span></span>', dtype=int64, default=array([400]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Number of excitatory connexions from external population</dd>\n<dt>K_ext_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.K_ext_i = NArray(label='<span class=\"formula\"><i>K</i><span class=\"scripts\"><sub class=\"script\"><i>i</i></sub><sub class=\"script\"><i>ext</i></sub></span></span>', dtype=int64, default=array([0]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>Number of inhibitory connexions from external population</dd>\n<dt>T <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.T = NArray(label='<span class=\"formula\"><i>T</i></span>', dtype=float64, default=array([20.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>time scale of describing network activity</dd>\n<dt>P_e <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.P_e = NArray(label='<span class=\"formula\"><i>P</i><sub><i>e</i></sub></span>', dtype=float64, default=array([-0.04983106,  0.00506355, -0.02347012,  0.00229515, -0.00041053,</span></dt>\n<dd><blockquote class=\"first\">\n0.01054705, -0.03659253,  0.00743749,  0.00126506, -0.04072161]), dim_names=(), ndim=None, required=True)</blockquote>\n<p class=\"last\">Polynome of excitatory phenomenological threshold (order 9)</p>\n</dd>\n<dt>P_i <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.P_i = NArray(label='<span class=\"formula\"><i>P</i><sub><i>i</i></sub></span>', dtype=float64, default=array([-0.05149122,  0.00400369, -0.00835201,  0.00024142, -0.00050706,</span></dt>\n<dd><blockquote class=\"first\">\n0.00143454, -0.01468669,  0.00450271,  0.00284722, -0.0153578 ]), dim_names=(), ndim=None, required=True)</blockquote>\n<p class=\"last\">Polynome of inhibitory phenomenological threshold (order 9)</p>\n</dd>\n<dt>external_input_ex_ex <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_ex_ex = NArray(label='<span class=\"formula\"><br/><i>nu</i><span class=\"scripts\"><sup class=\"script\"><i>drive</i></sup><sub class=\"script\"><i>e</i></sub></span></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>external_input_ex_in <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_ex_in = NArray(label='<span class=\"formula\"><br/><i>nu</i><span class=\"scripts\"><sup class=\"script\"><i>drive</i></sup><sub class=\"script\"><i>e</i></sub></span></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>external_input_in_ex <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_in_ex = NArray(label='<span class=\"formula\"><br/><i>nu</i><span class=\"scripts\"><sup class=\"script\"><i>drive</i></sup><sub class=\"script\"><i>e</i></sub></span></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>external_input_in_in <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.external_input_in_in = NArray(label='<span class=\"formula\"><br/><i>nu</i><span class=\"scripts\"><sup class=\"script\"><i>drive</i></sup><sub class=\"script\"><i>e</i></sub></span></span>', dtype=float64, default=array([0.]), dim_names=(), ndim=None, required=True)</span></dt>\n<dd>external drive</dd>\n<dt>state_variable_boundaries <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tvb.simulator.models.zerlaut.ZerlautAdaptationFirstOrder.state_variable_boundaries = Final(field_type=&lt;class 'dict'&gt;, default={'E': array([0.0, None], dtype=object), 'I': array([0.0, None], dtype=object)}, required=True)</span></dt>\n<dd>The values for each state-variable should be set to encompass\nthe boundaries of the dynamic range of that state-variable. Set None for one-sided boundaries</dd>\n</dl>\n<p>gid : tvb.basic.neotraits._core.HasTraits.gid = Attr(field_type=&lt;class 'uuid.UUID'&gt;, default=None, required=True)</p>\n</div>\n</div>\n",
    "arguments": {
        "state_variable_range": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>The values for each state-variable should be set to encompass</dt>\n<dd><p class=\"first\">the expected dynamic range of that state-variable for the current\nparameters, it is used as a mechanism for bounding random inital\nconditions when the simulation isn't started from an explicit history,\nit is also provides the default range of phase-plane plots.</p>\n<p>E: firing rate of excitatory population in KHz</p>\n<p>I: firing rate of inhibitory population in KHz</p>\n<p>C_ee: the variance of the excitatory population activity</p>\n<p>C_ei: the covariance between the excitatory and inhibitory population activities (always symetric)</p>\n<p>C_ie: the variance of the inhibitory population activity</p>\n<p class=\"last\">W: level of adaptation</p>\n</dd>\n</dl>\n</div>\n",
        "variables_of_interest": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>This represents the default state-variables of this Model to be</dt>\n<dd>monitored. It can be overridden for each Monitor if desired. The\ncorresponding state-variable indices for this model are <span class=\"formula\"><i>E</i>\u2009=\u20090</span>,\n<span class=\"formula\"><i>I</i>\u2009=\u20091</span>, <span class=\"formula\"><i>C</i><sub><i>ee</i></sub>\u2009=\u20092</span>, <span class=\"formula\"><i>C</i><sub><i>ei</i></sub>\u2009=\u20093</span>, <span class=\"formula\"><i>C</i><sub><i>ii</i></sub>\u2009=\u20094</span> and <span class=\"formula\"><i>W</i>\u2009=\u20095</span>.</dd>\n</dl>\n</div>\n",
        "g_L": "<div class=\"document\">\n<p>leak conductance [nS]</p>\n</div>\n",
        "E_L_e": "<div class=\"document\">\n<p>leak reversal potential for excitatory [mV]</p>\n</div>\n",
        "E_L_i": "<div class=\"document\">\n<p>leak reversal potential for inhibitory [mV]</p>\n</div>\n",
        "C_m": "<div class=\"document\">\n<p>membrane capacitance [pF]</p>\n</div>\n",
        "b_e": "<div class=\"document\">\n<p>Excitatory adaptation current increment [pA]</p>\n</div>\n",
        "a_e": "<div class=\"document\">\n<p>Excitatory adaptation conductance [nS]</p>\n</div>\n",
        "b_i": "<div class=\"document\">\n<p>Inhibitory adaptation current increment [pA]</p>\n</div>\n",
        "a_i": "<div class=\"document\">\n<p>Inhibitory adaptation conductance [nS]</p>\n</div>\n",
        "tau_w_e": "<div class=\"document\">\n<p>Adaptation time constant of excitatory neurons [ms]</p>\n</div>\n",
        "tau_w_i": "<div class=\"document\">\n<p>Adaptation time constant of inhibitory neurons [ms]</p>\n</div>\n",
        "E_e": "<div class=\"document\">\n<p>excitatory reversal potential [mV]</p>\n</div>\n",
        "E_i": "<div class=\"document\">\n<p>inhibitory reversal potential [mV]</p>\n</div>\n",
        "Q_e": "<div class=\"document\">\n<p>excitatory quantal conductance [nS]</p>\n</div>\n",
        "Q_i": "<div class=\"document\">\n<p>inhibitory quantal conductance [nS]</p>\n</div>\n",
        "tau_e": "<div class=\"document\">\n<p>excitatory decay [ms]</p>\n</div>\n",
        "tau_i": "<div class=\"document\">\n<p>inhibitory decay [ms]</p>\n</div>\n",
        "N_tot": "<div class=\"document\">\n<p>cell number</p>\n</div>\n",
        "p_connect": "<div class=\"document\">\n<p>connectivity probability</p>\n</div>\n",
        "g": "<div class=\"document\">\n<p>fraction of inhibitory cells</p>\n</div>\n",
        "K_ext_e": "<div class=\"document\">\n<p>Number of excitatory connexions from external population</p>\n</div>\n",
        "K_ext_i": "<div class=\"document\">\n<p>Number of inhibitory connexions from external population</p>\n</div>\n",
        "T": "<div class=\"document\">\n<p>time scale of describing network activity</p>\n</div>\n",
        "P_e": "<div class=\"document\">\n<p>Polynome of excitatory phenomenological threshold (order 9)</p>\n</div>\n",
        "P_i": "<div class=\"document\">\n<p>Polynome of inhibitory phenomenological threshold (order 9)</p>\n</div>\n",
        "external_input_ex_ex": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "external_input_ex_in": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "external_input_in_ex": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "external_input_in_in": "<div class=\"document\">\n<p>external drive</p>\n</div>\n",
        "state_variable_boundaries": "<div class=\"document\">\n<dl class=\"docutils\">\n<dt>The values for each state-variable should be set to encompass</dt>\n<dd>the boundaries of the dynamic range of that state-variable. Set None for one-sided boundaries</dd>\n</dl>\n</div>\n"
    }
}