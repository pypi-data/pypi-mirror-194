Metadata-Version: 2.1
Name: pynose
Version: 1.3.8
Summary: pynose fixes nose to extend unittest and make testing easier
Home-page: https://nose.readthedocs.io/en/latest/
Author: Michael Mintz
Author-email: mdmintz@gmail.com
License: MIT
Keywords: test unittest doctest automatic discovery
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Environment :: MacOS X
Classifier: Environment :: Win32 (MS Windows)
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Testing
Requires-Python: >=3.6


    pynose is a updated version of nose, originally created by Jason Pellerin.
    This version of nose is compatible with Python 3.6+ (including 3.11 & up).

    Changes from legacy "nose" include:
    * Fixes "AttributeError: module 'collections' has no attribute 'Callable'."
    * Fixes all "flake8" issues from the original "nose".
    * The default logging level was changed to hide "debug"-level logs.
    * The unit tests are no longer included with the repo to save space.

    The original description of "nose":

    nose extends the test loading and running features of unittest, making
    it easier to write, find and run tests.

    By default, nose will run tests in files or directories under the current
    working directory whose names include "test" or "Test" at a word boundary
    (like "test_this" or "functional_test" or "TestClass" but not
    "libtest"). Test output is similar to that of unittest, but also includes
    captured stdout output from failing tests, for easy print-style debugging.

    These features, and many more, are customizable through the use of
    plugins. Plugins included with nose provide support for doctest, code
    coverage and profiling, flexible attribute-based test selection,
    output capture and more. More information about writing plugins may be
    found on in the nose API documentation, here:
    https://nose.readthedocs.io/en/latest/
    
