# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['hyperframes']

package_data = \
{'': ['*']}

install_requires = \
['numpy>=1.19.5,<2.0.0', 'pandas>=1.1.4,<2.0.0']

entry_points = \
{'console_scripts': ['sequifier = sequifier.sequifier:main']}

setup_kwargs = {
    'name': 'hyperframes',
    'version': '0.0.1',
    'description': 'Labeled high dimensional matrix access',
    'long_description': '# HyperFrame\n\nThe aim of this project is to provide a high-dimensional analogue to the two-dimensional pandas DataFrame.\n\nThis allows its user to organise information where the interaction of several factors is of interest.\n\nThe HyperFrame allows for the easy setting and saving of data for storage, and the fast, interactive creation of two-dimensional pandas DataFrames of any combination of two factors for data exploration.\n\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom hyperframe import HyperFrame\nfrom sklearn.model_selection import train_test_split\nfrom demo.helpers import metrics, X, y\n```\n\n\n```python\nX_train, X_test, y_train, y_test = \\\n    train_test_split(X, y, test_size=0.33, random_state=42)\n```\n\n\n```python\nclf = KNeighborsClassifier()\nclf.fit(X_train, y_train)\n```\n\n\n\n\n    KNeighborsClassifier(algorithm=\'auto\', leaf_size=30, metric=\'minkowski\',\n                         metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                         weights=\'uniform\')\n\n\n\n# Initialisation\n\n\n```python\ndimension_labels = ["train_test", "species", "metric"]\n\nindex_labels = {"train_test": ["train", "test"],\n                "species": ["setosa", "versicolor", "virginica"],\n                "metric": ["precision", "recall", "f1"]}\n\nscores = HyperFrame(dimension_labels, index_labels)\n```\n\n# Setting data\n\n\n```python\nyhat = clf.predict(X_train)\n#iset alternative 1\nscores.iset(metrics(y_train, yhat), "train", "", "")\n```\n\n\n\n\n    <hyperframe.HyperFrame at 0x7ff4d4241320>\n\n\n\n\n```python\nyhat = clf.predict(X_test)\n#iset alternative 2\nscores.iset(metrics(y_test, yhat), train_test="test")\n```\n\n\n\n\n    <hyperframe.HyperFrame at 0x7ff4d4241320>\n\n\n\n# Getting data\n\n\n```python\n#iget alternative 1\nscores.iget("train", "", "", return_type="pandas").round(2)\n```\n\n\n\n\n<div>\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>0.89</td>\n      <td>1.00</td>\n      <td>0.94</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>0.71</td>\n      <td>0.71</td>\n      <td>0.71</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>0.80</td>\n      <td>0.71</td>\n      <td>0.75</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n#iget alternative 2\nscores.iget(species="versicolor", return_type="pandas").round(2)\n```\n\n\n\n\n<div>\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>train</th>\n      <td>0.71</td>\n      <td>0.71</td>\n      <td>0.71</td>\n    </tr>\n    <tr>\n      <th>test</th>\n      <td>0.70</td>\n      <td>0.47</td>\n      <td>0.56</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n#iget alternative 3\nscores.iget0("species", "train_test", return_type="pandas").round(2)\n```\n\n    {\'metric\': \'precision\'}\n\n\n\n\n\n<div>\n\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>setosa</th>\n      <th>versicolor</th>\n      <th>virginica</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>train</th>\n      <td>0.89</td>\n      <td>0.71</td>\n      <td>0.80</td>\n    </tr>\n    <tr>\n      <th>test</th>\n      <td>0.95</td>\n      <td>0.70</td>\n      <td>0.65</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n#### Initialising a second HyperFrame\n\n\n```python\nscores_lr = HyperFrame(dimension_labels, index_labels)\nclf = LogisticRegression(penalty="none", max_iter=1000)\nclf.fit(X_train, y_train)\n\nyhat = clf.predict(X_train)\nscores_lr.iset(metrics(y_train, yhat), "train", "", "")\n\nyhat = clf.predict(X_test)\nscores_lr.iset(metrics(y_test, yhat), "test", "", "")\n```\n\n\n\n\n    <hyperframe.HyperFrame at 0x7ff4d4231588>\n\n\n\n# Merging\n\n\n```python\nprint("scores shape: {}".format(scores.shape))\nprint("scores_lr shape: {}".format(scores_lr.shape))\n```\n\n    scores shape: (2, 3, 3)\n    scores_lr shape: (2, 3, 3)\n\n\n\n```python\nscores_models = scores.merge(scores_lr, "model", ["knn", "logistic regression"])\n```\n\n\n```python\nscores_models.iget("test", "", "f1", "", return_type="pandas").round(2)\n```\n\n\n\n\n<div>\n\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>knn</th>\n      <th>logistic regression</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>0.97</td>\n      <td>0.95</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>0.56</td>\n      <td>0.58</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>0.72</td>\n      <td>0.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nscores_models.iget("", "", "f1", "logistic regression", return_type="pandas").round(2)\n```\n\n\n\n\n<div>\n\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>setosa</th>\n      <th>versicolor</th>\n      <th>virginica</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>train</th>\n      <td>0.92</td>\n      <td>0.74</td>\n      <td>0.78</td>\n    </tr>\n    <tr>\n      <th>test</th>\n      <td>0.95</td>\n      <td>0.58</td>\n      <td>0.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n#### Initialising a third HyperFrame\n\n\n```python\nscores_rf = HyperFrame(dimension_labels, index_labels)\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\nyhat = clf.predict(X_train)\nscores_rf.iset(metrics(y_train, yhat), "train", "", "")\n\nyhat = clf.predict(X_test)\nscores_rf.iset(metrics(y_test, yhat), "test", "", "")\n```\n\n\n\n\n    <hyperframe.HyperFrame at 0x7ff4d41cd978>\n\n\n\n\n```python\nscores_rf.iget("test", "", "", return_type="pandas").round(2)\n```\n\n\n\n\n<div>\n\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>0.95</td>\n      <td>0.95</td>\n      <td>0.95</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>0.75</td>\n      <td>0.40</td>\n      <td>0.52</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>0.61</td>\n      <td>0.88</td>\n      <td>0.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Expanding A DataFrame\n\n\n```python\nprint("scores_models shape: {}".format(scores_models.shape))\nprint("scores_rf shape: {}".format(scores_rf.shape))\n```\n\n    scores_models shape: (2, 3, 3, 2)\n    scores_rf shape: (2, 3, 3)\n\n\n\n```python\nscores_models = scores_models.expand(scores_rf, "model", "random forest")\n```\n\n\n```python\nscores_models.iget("test", "", "f1", "", return_type="pandas").round(2)\n```\n\n\n\n\n<div>\n\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>knn</th>\n      <th>logistic regression</th>\n      <th>random forest</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>0.97</td>\n      <td>0.95</td>\n      <td>0.95</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>0.56</td>\n      <td>0.58</td>\n      <td>0.52</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>0.72</td>\n      <td>0.72</td>\n      <td>0.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n# Simple Mathematical Operations\n\n\n```python\nscores.max("train_test").iget("", "", return_type="pandas")\n```\n\n\n\n\n<div>\n\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>setosa</th>\n      <td>0.950000</td>\n      <td>1.000000</td>\n      <td>0.974359</td>\n    </tr>\n    <tr>\n      <th>versicolor</th>\n      <td>0.714286</td>\n      <td>0.714286</td>\n      <td>0.714286</td>\n    </tr>\n    <tr>\n      <th>virginica</th>\n      <td>0.800000</td>\n      <td>0.812500</td>\n      <td>0.750000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nscores.min("train_test", "metric").iget("", return_type="pandas")\n```\n\n\n\n\n    setosa        0.885714\n    versicolor    0.466667\n    virginica     0.650000\n    dtype: float64\n\n\n\n\n```python\nscores.mean("train_test", "species", "metric")\n```\n\n\n\n\n    0.7810886435641339\n\n\n\n\n```python\nscores.sum()\n```\n\n\n\n\n    14.059595584154408\n\n\n\n# Writing to file\n\n\n```python\nscores_models.write_file("./demo/scores_models")\n```\n\n# Reading from file\n\n\n```python\nscores_models = scores_models.read_file("./demo/scores_models")\n```\n',
    'author': 'Leon Luithlen',
    'author_email': 'leontimnaluithlen@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/0xideas/hyperframe',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9.0,<4.0.0',
}


setup(**setup_kwargs)
