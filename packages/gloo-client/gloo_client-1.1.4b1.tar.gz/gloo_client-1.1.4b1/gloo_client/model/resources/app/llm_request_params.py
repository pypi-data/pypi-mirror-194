# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime
from .open_ai_completion_endpoint_v_1_params import OpenAICompletionEndpointV1Params


class LLMRequestParams(pydantic.BaseModel):
    openai_v_1: typing.Optional[OpenAICompletionEndpointV1Params] = pydantic.Field(alias="openai_v1")

    class Partial(typing_extensions.TypedDict):
        openai_v_1: typing_extensions.NotRequired[typing.Optional[OpenAICompletionEndpointV1Params]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
