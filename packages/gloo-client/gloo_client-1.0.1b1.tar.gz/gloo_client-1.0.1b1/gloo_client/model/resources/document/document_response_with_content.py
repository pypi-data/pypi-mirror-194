# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import typing_extensions

from ...core.datetime_utils import serialize_datetime
from .document_annotation import DocumentAnnotation
from .document_response import DocumentResponse


class DocumentResponseWithContent(DocumentResponse):
    content: str
    annotations: typing.List[DocumentAnnotation]

    class Partial(DocumentResponse.Partial):
        content: typing_extensions.NotRequired[str]
        annotations: typing_extensions.NotRequired[typing.List[DocumentAnnotation]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
