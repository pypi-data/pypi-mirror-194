# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime


class OpenAICompletionEndpointV1Params(pydantic.BaseModel):
    model: str
    prompt: typing.Optional[typing.List[str]]
    suffix: typing.Optional[str]
    max_tokens: typing.Optional[int]
    temperature: typing.Optional[int]
    top_p: typing.Optional[int]
    n: typing.Optional[int]
    stream: typing.Optional[bool]
    logprobs: typing.Optional[int]
    echo: typing.Optional[bool]
    stop: typing.Optional[typing.List[str]]
    presence_penalty: typing.Optional[int]
    frequency_penalty: typing.Optional[int]
    best_of: typing.Optional[int]
    logit_bias: typing.Optional[typing.Dict[str, int]]
    user: typing.Optional[str]

    class Partial(typing_extensions.TypedDict):
        model: typing_extensions.NotRequired[str]
        prompt: typing_extensions.NotRequired[typing.Optional[typing.List[str]]]
        suffix: typing_extensions.NotRequired[typing.Optional[str]]
        max_tokens: typing_extensions.NotRequired[typing.Optional[int]]
        temperature: typing_extensions.NotRequired[typing.Optional[int]]
        top_p: typing_extensions.NotRequired[typing.Optional[int]]
        n: typing_extensions.NotRequired[typing.Optional[int]]
        stream: typing_extensions.NotRequired[typing.Optional[bool]]
        logprobs: typing_extensions.NotRequired[typing.Optional[int]]
        echo: typing_extensions.NotRequired[typing.Optional[bool]]
        stop: typing_extensions.NotRequired[typing.Optional[typing.List[str]]]
        presence_penalty: typing_extensions.NotRequired[typing.Optional[int]]
        frequency_penalty: typing_extensions.NotRequired[typing.Optional[int]]
        best_of: typing_extensions.NotRequired[typing.Optional[int]]
        logit_bias: typing_extensions.NotRequired[typing.Optional[typing.Dict[str, int]]]
        user: typing_extensions.NotRequired[typing.Optional[str]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
