# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime
from .document_annotation import DocumentAnnotation
from .document_content import DocumentContent
from .document_query_id import DocumentQueryId


class UpdateDocumentRequest(pydantic.BaseModel):
    query: DocumentQueryId
    name: typing.Optional[str]
    source: typing.Optional[str]
    tags: typing.Optional[typing.List[str]]
    content: typing.Optional[DocumentContent]
    annotations: typing.Optional[typing.List[DocumentAnnotation]]

    class Partial(typing_extensions.TypedDict):
        query: typing_extensions.NotRequired[DocumentQueryId]
        name: typing_extensions.NotRequired[typing.Optional[str]]
        source: typing_extensions.NotRequired[typing.Optional[str]]
        tags: typing_extensions.NotRequired[typing.Optional[typing.List[str]]]
        content: typing_extensions.NotRequired[typing.Optional[DocumentContent]]
        annotations: typing_extensions.NotRequired[typing.Optional[typing.List[DocumentAnnotation]]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
