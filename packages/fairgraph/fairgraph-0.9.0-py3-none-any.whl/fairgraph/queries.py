


class Query:

    def __init__(self, node_type, label, space, properties=None):
        self.node_type = node_type
        self.label = label
        self.space = space
        self.properties = [
            QueryProperty("@id", filter=Filter("EQUALS", parameter="id"))
        ]
        if space:
            self.properties.append(
                QueryProperty("https://core.kg.ebrains.eu/vocab/meta/space",
                              name="query:space",
                              filter=Filter("EQUALS", value=self.space))
            )
        else:
            self.properties.append(
                QueryProperty("https://core.kg.ebrains.eu/vocab/meta/space",
                              name="query:space")
            )
        if properties:
            self.properties.extend(properties)

    def add_property(self, property):
        assert isinstance(property, QueryProperty)
        self.properties.append(property)

    def serialize(self):
        query = {
            "@context": {
                "@vocab": "https://core.kg.ebrains.eu/vocab/query/",
                "query": "https://schema.hbp.eu/myQuery/",
                "propertyName": {
                    "@id": "propertyName",
                    "@type": "@id"
                },
                "merge": {
                    "@type": "@id",
                    "@id": "merge"
                },
                "path": {
                    "@id": "path",
                    "@type": "@id"
                }
            },
            "meta": {
                "type": self.node_type,
                "name": self.label,
                "description": "Automatically generated by fairgraph"
            },
            "structure": [property.serialize() for property in self.properties]
        }
        return query

# todo: I think only one property can have "sort": True - need to check this


class QueryProperty:

    def __init__(self, path, name=None, filter=None,
                 sorted=False, required=False, ensure_order=False,
                 properties=None, type_filter=None):
        self.path = path
        self.name = name
        self.filter = filter
        self.sorted = sorted
        self.required = required
        self.ensure_order = ensure_order
        self.properties = properties or []
        self.type_filter = type_filter

    def __repr__(self):
        return f"QueryProperty({self.path}, name={self.name})"

    def add_property(self, property):
        assert isinstance(property, QueryProperty)
        self.properties.append(property)

    def serialize(self):
        data = {
            "path": self.path,
        }
        if self.name:
            data["propertyName"] = self.name
        if self.filter:
            data["filter"] = self.filter.serialize()
        if self.sorted:
            data["sort"] = True
        if self.required:
            data["required"] = True
        if self.ensure_order:
            data["ensureOrder"] = True
        if self.properties:
            data["structure"] = [
                property.serialize() for property in self.properties
            ]
        if self.type_filter:
            data["path"] = {
                "@id": data["path"],
                "typeFilter": self.type_filter
            }
        return data


class Filter:

    def __init__(self, operation, parameter=None, value=None):
        self.operation = operation
        self.parameter = parameter
        self.value = value

    def serialize(self):
        data = {
            "op": self.operation
        }
        if self.parameter:
            data["parameter"] = self.parameter
        if self.value:
            data["value"] = self.value
        return data