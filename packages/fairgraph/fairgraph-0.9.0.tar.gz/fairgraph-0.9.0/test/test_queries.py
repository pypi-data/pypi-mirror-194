
import os
import json
import pytest
from kg_core.request import Stage, Pagination
from fairgraph.queries import Query, QueryProperty, Filter
import fairgraph.openminds.core as omcore
from .utils_v3 import kg_client, mock_client, skip_if_no_connection


@pytest.fixture()
def example_query_model_version():
    return Query(
        node_type="https://openminds.ebrains.eu/core/ModelVersion",
        label="fg-testing-modelversion",
        space="model",
        properties=[
            QueryProperty("@type"),
            QueryProperty("https://openminds.ebrains.eu/vocab/fullName",
                      name="vocab:fullName",
                      filter=Filter("CONTAINS", parameter="name"),
                      sorted=True, required=True),
            QueryProperty("https://openminds.ebrains.eu/vocab/versionIdentifier",
                      name="vocab:versionIdentifier",
                      filter=Filter("EQUALS", parameter="version"),
                      required=True),
            QueryProperty("https://openminds.ebrains.eu/vocab/format",
                      name="vocab:format",
                      ensure_order=True,
                      properties=[
                          QueryProperty("@id", filter=Filter("EQUALS", parameter="format")),
                          QueryProperty("@type")
                      ]),
            QueryProperty("https://openminds.ebrains.eu/vocab/custodian",
                      name="vocab:custodian",
                      ensure_order=True,
                      type_filter="https://openminds.ebrains.eu/core/Person",
                      properties=[
                          QueryProperty("@id", filter=Filter("EQUALS", parameter="custodian")),
                          QueryProperty("https://openminds.ebrains.eu/vocab/affiliation",
                                    name="vocab:affiliation",
                                    properties=[
                                        QueryProperty("@type"),
                                        QueryProperty("https://openminds.ebrains.eu/vocab/memberOf",
                                                  name="vocab:memberOf",
                                                  properties=[QueryProperty("@id")]),
                                        QueryProperty("https://openminds.ebrains.eu/vocab/startDate",
                                                  name="vocab:startDate")
                                    ])
                      ])
        ]
    )


@pytest.fixture()
def example_query_model():
    return Query(
        node_type="https://openminds.ebrains.eu/core/Model",
        label="fg-testing-model",
        space="model",
        properties=[
            QueryProperty("@type"),
            QueryProperty("https://openminds.ebrains.eu/vocab/fullName",
                      name="vocab:fullName",
                      filter=Filter("CONTAINS", parameter="name"),
                      sorted=True, required=True),
            QueryProperty("https://openminds.ebrains.eu/vocab/custodian",
                      name="vocab:custodian",
                      type_filter="https://openminds.ebrains.eu/core/Person",
                      properties=[
                          #QueryProperty("@type"),
                          QueryProperty("https://openminds.ebrains.eu/vocab/familyName",
                                        name="vocab:familyName"),
                      ]),
            QueryProperty("https://openminds.ebrains.eu/vocab/custodian",
                      name="vocab:organization",
                      type_filter="https://openminds.ebrains.eu/core/Organization",
                      properties=[
                          #QueryProperty("@type"),
                          QueryProperty("https://openminds.ebrains.eu/vocab/shortName",
                                        name="vocab:shortName"),
                      ])
        ]
    )


def test_query_builder(example_query_model_version):
    generated = example_query_model_version.serialize()
    expected = {
        '@context': {
            '@vocab': 'https://core.kg.ebrains.eu/vocab/query/',
            'merge': {'@id': 'merge', '@type': '@id'},
            'path': {'@id': 'path', '@type': '@id'},
            'propertyName': {'@id': 'propertyName', '@type': '@id'},
            'query': 'https://schema.hbp.eu/myQuery/'
        },
        'meta': {
            'description': 'Automatically generated by fairgraph',
            'name': 'fg-testing-modelversion',
            'type': 'https://openminds.ebrains.eu/core/ModelVersion'
        },
        'structure': [
            {
                'filter': {'op': 'EQUALS', 'parameter': 'id'},
                'path': '@id',
            },
            {
                'filter': {'op': 'EQUALS', 'value': 'model'},
                'path': 'https://core.kg.ebrains.eu/vocab/meta/space',
                'propertyName': 'query:space'
            },
            {
                'path': '@type'
            },
            {
                'filter': {'op': 'CONTAINS', 'parameter': 'name'},
                'path': 'https://openminds.ebrains.eu/vocab/fullName',
                'propertyName': 'vocab:fullName',
                'required': True,
                'sort': True
            },
            {
                'filter': {'op': 'EQUALS', 'parameter': 'version'},
                'path': 'https://openminds.ebrains.eu/vocab/versionIdentifier',
                'propertyName': 'vocab:versionIdentifier',
                'required': True
            },
            {
                'ensureOrder': True,
                'path': 'https://openminds.ebrains.eu/vocab/format',
                'propertyName': 'vocab:format',
                'structure': [{'filter': {'op': 'EQUALS',
                                          'parameter': 'format'},
                               'path': '@id'},
                              {'path': '@type'}]
            },
            {
                'ensureOrder': True,
                'path': {
                    '@id': 'https://openminds.ebrains.eu/vocab/custodian',
                    'typeFilter': 'https://openminds.ebrains.eu/core/Person'
                },
                'propertyName': 'vocab:custodian',
                'structure': [
                    {
                        'filter': {'op': 'EQUALS', 'parameter': 'custodian'},
                        'path': '@id'
                    },
                    {
                        'path': 'https://openminds.ebrains.eu/vocab/affiliation',
                        'propertyName': 'vocab:affiliation',
                        'structure': [
                            {'path': '@type'},
                            {
                                'path': 'https://openminds.ebrains.eu/vocab/memberOf',
                                'propertyName': 'vocab:memberOf',
                                'structure': [
                                    {'path': '@id'}
                                ]
                            },
                            {
                                'path': 'https://openminds.ebrains.eu/vocab/startDate',
                                'propertyName': 'vocab:startDate'
                            }
                        ]
                    }
                ]
            }
        ]
    }
    assert generated == expected


@skip_if_no_connection
def test_execute_query(kg_client, example_query_model_version):
    response = kg_client._kg_client.queries.test_query(
        payload=example_query_model_version.serialize(),
        stage=Stage.IN_PROGRESS,
        pagination=Pagination(start=0, size=3)
    )
    data = response.data
    assert len(data) == 3
    expected_keys = set([
        "@id", "@type", "https://schema.hbp.eu/myQuery/space",
        "vocab:custodian", "vocab:format", "vocab:versionIdentifier",
        "vocab:fullName"
    ])
    data0 = data[0]
    assert set(data0.keys()) == expected_keys

    if data0["vocab:custodian"]:
        custodian0 = data0["vocab:custodian"][0]
        assert set(custodian0.keys()) == set(["@id", "vocab:affiliation"])
        if custodian0["vocab:affiliation"]:
            affil0 = custodian0["vocab:affiliation"][0]
            assert set(affil0.keys())  == set(["@type", "vocab:organization", "vocab:startDate"])


@skip_if_no_connection
def test_execute_query_with_id_filter(kg_client, example_query_model):
    target_id = "https://kg.ebrains.eu/api/instances/3ca9ae35-c9df-451f-ac76-4925bd2c7dc6"
    # params = {
    #     "from": 0,
    #     "size": 10,
    #     "stage": "IN_PROGRESS",
    #     "returnEmbedded": True,
    #     "id": target_id
    # }
    # response = kg_client._kg_client.post(
    #     path=f"/queries",
    #     params=params,
    #     payload=example_query_model.serialize()
    # )
    response = kg_client._kg_client.queries.test_query(
        payload=example_query_model.serialize(),
        instance_id=kg_client.uuid_from_uri(target_id),
        stage=Stage.IN_PROGRESS,
        pagination=Pagination(start=0, size=10)
    )
    #assert response.status_code == 200
    data = response.data
    assert len(data) == 1
    assert data[0]["vocab:fullName"] == "AdEx Neuron Models with PyNN"
    assert data[0]["vocab:custodian"][0]["vocab:familyName"] == "Destexhe"
    #assert data[0]["vocab:organization"][0]["vocab:shortName"] == "Destexhe Lab"


def test_openminds_core_queries(mock_client):
    for cls in omcore.list_kg_classes():
        path_expected = os.path.join(os.path.dirname(__file__), "test_data", "queries", "openminds", "core", f"{cls.__name__.lower()}_simple_query.json")
        with open(path_expected) as fp:
            generated = cls.generate_query("simple", "collab-foobar", mock_client, resolved=False)
            expected = json.load(fp)
            assert generated == expected
