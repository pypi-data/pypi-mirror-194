# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aiohttp_spyne']

package_data = \
{'': ['*']}

modules = \
['py']
install_requires = \
['aiohttp>=3.7.0,<4.0.0', 'spyne>=2.14.0,<3.0.0']

setup_kwargs = {
    'name': 'aiohttp-spyne',
    'version': '1.5.0',
    'description': 'Aiohttp transport for Spyne RPC library',
    'long_description': '![CI](https://github.com/katajakasa/aiohttp-spyne/actions/workflows/python-package.yml/badge.svg)\n\n\n# About\n\nAiohttp transport for Spyne RPC library.\n\nRequirements:\n\n* Python 3.7, 3.8, 3.9, 3.10, 3.11\n* Aiohttp >= 3.7.0\n* Spyne >= 2.14.0\n\nSpyne alpha versions should also work.\n\n## Installation\n\nJust run `pip install aiohttp-spyne` :)\n\n## Examples\n\n* Test server: `python -m examples.hello_world`\n* Threaded test server: `python -m examples.hello_world_threads`\n* Test client: `python -m examples.test_client`\n\n## Usage\n\nFirst, initialize your spyne application as normal. Here\'s an example\nfor a simple SOAP service (See spyne examples and documentation for \na more complete service setup).\n\n```\nspyne_app = spyne.Application(\n    [HelloWorldService],\n    tns=\'aiohttp_spyne.examples.hello\',\n    in_protocol=Soap11(validator=\'lxml\'),\n    out_protocol=Soap11())\n```\n\nNext, wrap your Spyne application with AIOSpyne. Note that you can run\nyour application entrypoints in a thread by setting the "threads" parameter.\nIf you want to keep your entrypoints running in the same thread as the\nmain application, just leave this None. If you DO run your entrypoints\nin threads, be aware that some signals sent by spyne will also be run\nin threads, and be extra careful of using your main loop!\n\n```\nhandler = AIOSpyne(spyne_app, threads=25)\n```\n\nLastly, make an aiohttp application as usual, and just bind GET and POST\nentrypoints from AIOSpyne to wherever. Note that both paths need to be\nthe same.\n\nWith GET, if the request address ends ?wsdl or .wsdl, a WSDL schema is\nreturned in a response. Otherwise, requests are redirected to spynes\nRPC handler.\n\n```\napp = web.Application()\napp.router.add_get(\'/{tail:.*}\', handler.get)\napp.router.add_post(\'/{tail:.*}\', handler.post)\nweb.run_app(app, port=8080)\n```\n\n## Chunked encoding\n\nIf you offer large result sets in your soap entrypoints, and yield\nthe results properly, you may want to enable chunked encoding. This\nway the aiohttp server can stream your results and reduce memory\nusage.\n\n```\nhandler = AIOSpyne(spyne_app, chunked=True)\n```\n\n## WSDL caching\n\nBy default, aiohttp-spyne will cache WSDL documents generated by spyne.\nThis makes it cheap to offer the WSDL documents to any clients. If for some\nreason you want to disable this caching, you can do so by setting the\ncache_wsdl argument as False.\n\n```\nhandler = AIOSpyne(spyne_app, cache_wsdl=False)\n```\n\n## Testing and formatting\n\n1. `pytest`\n2. `mypy -p aiohttp_spyne`\n4. `black aiohttp_spyne/`\n\n## License\n\nLGPL-2.1 -- Please see LICENSE for details.\n',
    'author': 'Tuomas Virtanen',
    'author_email': 'katajakasa@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/katajakasa/aiohttp-spyne',
    'packages': packages,
    'package_data': package_data,
    'py_modules': modules,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
