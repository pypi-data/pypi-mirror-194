name: wheels

on:
  workflow_dispatch:
  push:
  pull_request:
    types: [labeled, opened, synchronized, reopened]

concurrency:
  group: wheels-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LINES: 200
  COLUMNS: 200

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaultsrun
defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup CI
        uses: ./.github/actions/setup-repo
      - name: Build sdist
        run: |
          # TODO: when bazel support releasing sdist, we can remove this.
          pip install build

          python -m build --sdist
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  publish:
    name: Build and publish wheels to PyPI for python${{ matrix.python }} (${{ matrix.os }})
    needs: [build-sdist]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    if: github.repository_owner == 'aarnphm'  && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Don't run on fork repository
    strategy:
      fail-fast: false
      matrix:
        python: ["3.8", "3.9", "3.10", "3.11"]
        os: ["ubuntu-latest", "macos-latest"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all tags and branches
      - name: Setup CI
        uses: ./.github/actions/setup-repo
        with:
          python-version: ${{ matrix.python }}
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Set up Clang [Linux]
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1
      - name: Retrieving versions
        id: get-info
        run: |
          VERSION=${{ github.ref_name }}
          echo "version=${VERSION:1}" >>$GITHUB_OUTPUT
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - name: Publish built wheels
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/* --repository pypi --verbose
          ./tools/bazel run -c dbg --define=ci=true --stamp --embed_label=${{ steps.get-info.outputs.version }} -- //:whispercpp_wheel.publish --repository pypi --verbose
