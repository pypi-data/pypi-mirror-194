# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ServiceEventAPIModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'event_type': 'ServiceEventType',
        'level': 'ServiceEventLevel',
        'message': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'event_type': 'event_type',
        'level': 'level',
        'message': 'message',
        'user_id': 'user_id'
    }

    def __init__(self, id=None, created_at=None, event_type=None, level=None, message=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """ServiceEventAPIModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._event_type = None
        self._level = None
        self._message = None
        self._user_id = None
        self.discriminator = None

        self.id = id
        self.created_at = created_at
        self.event_type = event_type
        if level is not None:
            self.level = level
        if message is not None:
            self.message = message
        if user_id is not None:
            self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this ServiceEventAPIModel.  # noqa: E501

        Id of the service event  # noqa: E501

        :return: The id of this ServiceEventAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceEventAPIModel.

        Id of the service event  # noqa: E501

        :param id: The id of this ServiceEventAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this ServiceEventAPIModel.  # noqa: E501

        The last time the state of this job was updated. This includes updates to the state and to the goal state  # noqa: E501

        :return: The created_at of this ServiceEventAPIModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServiceEventAPIModel.

        The last time the state of this job was updated. This includes updates to the state and to the goal state  # noqa: E501

        :param created_at: The created_at of this ServiceEventAPIModel.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def event_type(self):
        """Gets the event_type of this ServiceEventAPIModel.  # noqa: E501

        Type of Service Event  # noqa: E501

        :return: The event_type of this ServiceEventAPIModel.  # noqa: E501
        :rtype: ServiceEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ServiceEventAPIModel.

        Type of Service Event  # noqa: E501

        :param event_type: The event_type of this ServiceEventAPIModel.  # noqa: E501
        :type: ServiceEventType
        """
        if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def level(self):
        """Gets the level of this ServiceEventAPIModel.  # noqa: E501


        :return: The level of this ServiceEventAPIModel.  # noqa: E501
        :rtype: ServiceEventLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ServiceEventAPIModel.


        :param level: The level of this ServiceEventAPIModel.  # noqa: E501
        :type: ServiceEventLevel
        """

        self._level = level

    @property
    def message(self):
        """Gets the message of this ServiceEventAPIModel.  # noqa: E501


        :return: The message of this ServiceEventAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ServiceEventAPIModel.


        :param message: The message of this ServiceEventAPIModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def user_id(self):
        """Gets the user_id of this ServiceEventAPIModel.  # noqa: E501

        Present only for goal state changes  # noqa: E501

        :return: The user_id of this ServiceEventAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ServiceEventAPIModel.

        Present only for goal state changes  # noqa: E501

        :param user_id: The user_id of this ServiceEventAPIModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceEventAPIModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceEventAPIModel):
            return True

        return self.to_dict() != other.to_dict()
