Metadata-Version: 2.1
Name: fflogsapi
Version: 0.3.4
Summary: Python client for the FFLogs v2 API
Author-email: Markus Wang Halvorsen <mwh@halvorsenfamilien.com>
Project-URL: Repository, https://github.com/halworsen/fflogsapi
Keywords: api,client,ffxiv,fflogs,lazy
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Libraries
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: gql (>=3.4.0)
Requires-Dist: oauthlib (>=3.2.2)
Requires-Dist: requests-oauthlib (>=1.3.1)
Requires-Dist: requests-toolbelt (>=0.10.1)
Provides-Extra: dev
Requires-Dist: flake8 (==6.0.0) ; extra == 'dev'
Requires-Dist: autopep8 (==2.0.1) ; extra == 'dev'
Requires-Dist: isort (==5.12.0) ; extra == 'dev'
Requires-Dist: removestar (==1.3.1) ; extra == 'dev'
Provides-Extra: test
Requires-Dist: pytest (==7.2.1) ; extra == 'test'
Requires-Dist: pytest-cov (==4.0.0) ; extra == 'test'

# fflogsapi

fflogsapi is a lazy Python 3 client for [fflogs](https://www.fflogs.com/)' v2 API with query caching functionality.

[![Tests](https://github.com/halworsen/fflogsapi/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/halworsen/fflogsapi/actions/workflows/test.yml)
[![codecov](https://codecov.io/gh/halworsen/fflogsapi/branch/master/graph/badge.svg?token=YTEGMDJOGL)](https://codecov.io/gh/halworsen/fflogsapi)

---

## Features

* Retrieve information from fflogs' v2 GraphQL API
* Lazy evaluation
  * Queries for data are not executed until it is explicitly needed
* Query caching
  * Requesting the same data twice will instead fetch the result from cache
  * Customizable cache lifetime and options to ignore cached results

## Example usage

```python
from config import CLIENT_ID, CLIENT_SECRET

from fflogsapi.client import FFLogsClient

client = FFLogsClient(CLIENT_ID, CLIENT_SECRET)
report = client.get_report('rGARYmQwTKbahXz9')

for fight in report:
    print(f'Fight #{fight.fight_id}:', fight.name(), f'- Kill: {fight.is_kill()}')
    pot_table = fight.fight_table(filters={'sourceAurasPresent': 'Medicated'})
    potted_damage = 0
    for damage in pot_table['damageDone']:
        potted_damage += damage['total']
    print(f'Damage done under pots: {potted_damage}')
    if not fight.is_kill():
        print(f'Percentage reached: {fight.percentage()}')

client.close()
client.save_cache()
```

```python
from config import CLIENT_ID, CLIENT_SECRET

from fflogsapi.client import FFLogsClient

client = FFLogsClient(CLIENT_ID, CLIENT_SECRET)
for page in client.report_pages(filters={ 'guildID': 80551 }):
    print(f'Reports in page: {page.count()}')
    for report in page:
        print(report.title(), f'Duration: {report.duration()}')

client.close()
client.save_cache()
```
