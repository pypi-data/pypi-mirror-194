# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aircraft_design', 'aircraft_design.classes']

package_data = \
{'': ['*'], 'aircraft_design': ['basic_airfoils/*', 'bin/.foo']}

install_requires = \
['avlwrapper>=0.3.4,<0.4.0',
 'matplotlib>=3.6.3,<4.0.0',
 'numpy>=1.24.2,<2.0.0',
 'requests>=2.28.2,<3.0.0',
 'scipy>=1.10.0,<2.0.0']

setup_kwargs = {
    'name': 'aircraft-design',
    'version': '0.0.16',
    'description': 'Condensed module for Aircraft Design',
    'long_description': "# aircraft_design\nPara instalar a biblioteca oficialmente, você pode usar o gerenciador de pacotes pip.\nA seguinte linha de comando pode ser executada no terminal ou prompt de comando:\n```bash\npip install aircraft-design\n```\nAssim, a biblioteca será baixada e instalada em seu ambiente de desenvolvimento Python. Também é possível instalar a versão mais recente diretamente do repositório GitHub, executando o comando:\n```bash\npip install git+https://github.com/NisusAerodesign/aircraft-design.git\n```\nFeito isso, já é possível importar e utilizar a biblioteca nas suas aplicações.\n\n## 0.1. Como instalar\nPara instalar basta acessar pelo repositório da própria pipy[*](https://pypi.org/project/aircraft-design) e já estará pronto para uso.\n### Projeto de Design de Aeronaves NISUS-aerodesign\n\nO projeto aircraft-design é um esforço desenvolvido por membros da equipe de competição **NISUS-aerodesign** com o objetivo de facilitar a análise de aeronaves. A equipe utiliza a ferramenta Vortex Lattice (ou malha de vórtices, em tradução livre), desenvolvida pelo MIT[*](https://web.mit.edu/drela/Public/web/avl/), para conduzir essas análises. \n\nA ferramenta Vortex Lattice permite que a equipe tenha uma visão detalhada das propriedades aerodinâmicas da aeronave, como por exemplo, a geração de sustentação, arrasto e forças de inclinação. Isso permite que a equipe faça melhorias no design da aeronave, tornando-a mais eficiente e segura para voo.\n\n[Repositório GitHub](https://github.com/NisusAerodesign/aircraft-design)\n# 1. aircraft_design.Wing\n\nA classe Wing (Asa) é responsável por criar superfícies aerodinâmicas, como asas e estabilizadores. Ela possui diversos parâmetros que podem ser ajustados para atender às necessidades específicas de cada projeto.\n\nA tabela abaixo apresenta cada um dos parâmetros da classe Wing, incluindo seu tipo de dado, valor padrão e se é obrigatório ou não:\n\n| Parâmetro       | Tipo de dado | Valor Padrão   |\n|:---------------:|:-----------:|:-------------:|\n| airfoil         | Path        | **Obrigatório** |\n| wingspan        | float       | **Obrigatório** |\n| mean_chord      | float       | **Obrigatório** |\n| taper_ratio     | float       |            1.0 |\n| transition_point| float       |            0.0 |\n| alpha_angle     | float       |            0.0 |\n| sweep_angle     | float       |            0.0 |\n| x_position      | float       |            0.0 |\n| y_position      | float       |            0.0 |\n| z_position      | float       |            0.0 |\n| align           | str         |           'LE' |\n| name            | str         |         'wing' |\n| control         | list        |         [None] |\n| panel_chordwise |int          |             10 |\n| panel_spanwise  |int          |             25 |\n\nAlém disso, a classe Wing possui métodos *Getters* e *Setters* para todos os seus elementos, permitindo a manipulação de seus parâmetros de forma fácil e precisa. Também podemos encontrar outros métodos importantes, como `Wing().surface -> avl.Surface` e `Wing().reference_area() -> float`, que fornecem informações valiosas sobre a superfície da asa e sua área de referência.\n\n\n## 1.1. Ferramenta de plotagem\n\nA biblioteca possui uma ferramenta de plotagem para melhor visualização da aeronave construída. Para utilizá-la, basta invocar o método plot() nas classes Wing e Aircraft.\n\nA tabela a seguir apresenta os parâmetros que podem ser especificados na função de plotagem:\n\n|Parâmetro|Tipo de dado              |Valor Padrão|\n|:-------:|:------------------------:|:----------:|\n|figure   |matplotlib.figure \\| None |None        |\n|axis     |matplotlib.axis   \\| None |None        |\n|linewidth| float                    | 1.0        |\n|color    |str                       |'black'     |\n\nAmbas as classes Wing e Aircraft podem receber uma figura e um eixo para se adequarem aos padrões de plotagem do usuário. Além disso, o plot gerado é tridimensional.\n\n# 2. aircraft_design.Aircraft\n\nA classe Aircraft é responsável por agrupar as superfícies aerodinâmicas e torná-las executáveis nos parâmetros da biblioteca de simulação de voo. Ela é um elemento fundamental para o projeto, pois permite a definição do avião como um todo, e é a partir dela que serão realizadas as simulações.\n\nAbaixo seguem os principais parâmetros que compõem a classe Aircraft:\n\n|Parâmetro      |Tipo de dado              |Valor Padrão   |\n|:-------------:|:------------------------:|:-------------:|\n|mach           | float                    |**Obrigatório**|\n|ground_effect  | float                    |**Obrigatório**|\n|reference_chord| float                    |**Obrigatório**|\n|reference_span | float                    |**Obrigatório**|\n|surfaces_list  | list                     |**Obrigatório**|\n|ref_point_x    | float                    | 0.0           |\n|ref_point_y    | float                    | 0.0           |\n|ref_point_z    | float                    | 0.0           |\n\nAlém desses parâmetros, a classe Aircraft possui métodos Getters e Setters para todos eles, assim como outros métodos que podem ser necessários para realizar as simulações.\n\n## 2.1. Gerar a geometria\nPara poder executar a simulação deve ser gerada a geometria para poder ser executada.\n```python\nAircraft().geometry(name:str)\n```\n## 2.2. Ferramenta de plotagem\nA ferramenta de plotagem para o módulo **Aircraft** é totalmente compatível com o módulo **Wing**, recebendo os mesmos parâmetros.\n\nVerificar **1.1.**\n\n# aircraft_design.Session\n\nA classe Session é responsável por realizar a execução do código no AVL. Para fazer isso, é necessário que sejam fornecidos os seguintes parâmetros:\n\n|Parâmetro      |Tipo de dado              |Valor Padrão   |\n|:-------------:|:------------------------:|:-------------:|\n|geometry       | Aircraft.geometry        |**Obrigatório**|\n|cases          | Case \\|None              |           None|\n|name           | str \\|None               |           None|\n\nA variável `geometry` representa a geometria da aeronave, que será utilizada pelo AVL para realizar as análises. A variável `cases` é opcional e representa os casos de simulação que serão executados no AVL. Por fim, a variável `name` é também opcional e representa o nome da sessão que está sendo executada.\n\nCom esses parâmetros em mãos, a classe Session é capaz de realizar as simulações no AVL, gerando informações valiosas sobre o comportamento da aeronave em diferentes condições.\n\n# aircraft_design.MultiSession\n\nA classe MultiSession é responsável por realizar a execução de múltiplas sessões no AVL utilizando uma abordagem paralela que aproveita a capacidade de processamento dos múltiplos núcleos da CPU.\n\nPara fazer isso, a classe MultiSession possui o seguinte parâmetro:\n\n|Parâmetro      |Tipo de dado                        |Valor Padrão   |\n|:-------------:|:----------------------------------:|:------------:|\n|session_array  | list[Session]                      |**Obrigatório**|\n\nA variável `session_array` representa a lista de sessões que serão executadas no AVL, que são objetos da classe `Session` com suas respectivas geometrias e casos de simulação.\n\nA classe MultiSession é responsável por gerenciar os Workers, compartilhar a memória entre eles e organizar as filas de execução das sessões. Dessa forma, a classe MultiSession permite que múltiplas sessões sejam executadas em paralelo, aumentando a eficiência do processo de simulação.\n\nA utilização da classe MultiSession é recomendada quando o número de sessões é maior ou igual ao dobro do número de núcleos da CPU, para que seja possível obter o máximo aproveitamento da capacidade de processamento do hardware.\n\n",
    'author': 'Nisus Aerodesign',
    'author_email': 'ufsc.nisus@gmail.com',
    'maintainer': 'Irisson Lima',
    'maintainer_email': 'irisson2203@gmail.com',
    'url': 'https://pypi.org/project/aircraft-design/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<3.12',
}


setup(**setup_kwargs)
