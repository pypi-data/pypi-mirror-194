# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..io_adaptors import io_adaptors_pb2 as io__adaptors_dot_io__adaptors__pb2


class IOAdaptorControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FTPInBound = channel.unary_stream(
                '/io_adaptors_APIs_proto.IOAdaptorController/FTPInBound',
                request_serializer=io__adaptors_dot_io__adaptors__pb2.FTPRequest.SerializeToString,
                response_deserializer=io__adaptors_dot_io__adaptors__pb2.InBoundResponse.FromString,
                )
        self.FTPOutBound = channel.unary_unary(
                '/io_adaptors_APIs_proto.IOAdaptorController/FTPOutBound',
                request_serializer=io__adaptors_dot_io__adaptors__pb2.FTPRequest.SerializeToString,
                response_deserializer=io__adaptors_dot_io__adaptors__pb2.OutBoundResponse.FromString,
                )
        self.S3InBound = channel.unary_stream(
                '/io_adaptors_APIs_proto.IOAdaptorController/S3InBound',
                request_serializer=io__adaptors_dot_io__adaptors__pb2.S3Request.SerializeToString,
                response_deserializer=io__adaptors_dot_io__adaptors__pb2.InBoundResponse.FromString,
                )
        self.S3OutBound = channel.unary_unary(
                '/io_adaptors_APIs_proto.IOAdaptorController/S3OutBound',
                request_serializer=io__adaptors_dot_io__adaptors__pb2.S3Request.SerializeToString,
                response_deserializer=io__adaptors_dot_io__adaptors__pb2.OutBoundResponse.FromString,
                )
        self.BlobInBound = channel.unary_stream(
                '/io_adaptors_APIs_proto.IOAdaptorController/BlobInBound',
                request_serializer=io__adaptors_dot_io__adaptors__pb2.BlobRequest.SerializeToString,
                response_deserializer=io__adaptors_dot_io__adaptors__pb2.InBoundResponse.FromString,
                )
        self.BlobOutBound = channel.unary_unary(
                '/io_adaptors_APIs_proto.IOAdaptorController/BlobOutBound',
                request_serializer=io__adaptors_dot_io__adaptors__pb2.BlobRequest.SerializeToString,
                response_deserializer=io__adaptors_dot_io__adaptors__pb2.BlobOutBoundResponse.FromString,
                )


class IOAdaptorControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FTPInBound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FTPOutBound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def S3InBound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def S3OutBound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlobInBound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlobOutBound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IOAdaptorControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FTPInBound': grpc.unary_stream_rpc_method_handler(
                    servicer.FTPInBound,
                    request_deserializer=io__adaptors_dot_io__adaptors__pb2.FTPRequest.FromString,
                    response_serializer=io__adaptors_dot_io__adaptors__pb2.InBoundResponse.SerializeToString,
            ),
            'FTPOutBound': grpc.unary_unary_rpc_method_handler(
                    servicer.FTPOutBound,
                    request_deserializer=io__adaptors_dot_io__adaptors__pb2.FTPRequest.FromString,
                    response_serializer=io__adaptors_dot_io__adaptors__pb2.OutBoundResponse.SerializeToString,
            ),
            'S3InBound': grpc.unary_stream_rpc_method_handler(
                    servicer.S3InBound,
                    request_deserializer=io__adaptors_dot_io__adaptors__pb2.S3Request.FromString,
                    response_serializer=io__adaptors_dot_io__adaptors__pb2.InBoundResponse.SerializeToString,
            ),
            'S3OutBound': grpc.unary_unary_rpc_method_handler(
                    servicer.S3OutBound,
                    request_deserializer=io__adaptors_dot_io__adaptors__pb2.S3Request.FromString,
                    response_serializer=io__adaptors_dot_io__adaptors__pb2.OutBoundResponse.SerializeToString,
            ),
            'BlobInBound': grpc.unary_stream_rpc_method_handler(
                    servicer.BlobInBound,
                    request_deserializer=io__adaptors_dot_io__adaptors__pb2.BlobRequest.FromString,
                    response_serializer=io__adaptors_dot_io__adaptors__pb2.InBoundResponse.SerializeToString,
            ),
            'BlobOutBound': grpc.unary_unary_rpc_method_handler(
                    servicer.BlobOutBound,
                    request_deserializer=io__adaptors_dot_io__adaptors__pb2.BlobRequest.FromString,
                    response_serializer=io__adaptors_dot_io__adaptors__pb2.BlobOutBoundResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io_adaptors_APIs_proto.IOAdaptorController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IOAdaptorController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FTPInBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/io_adaptors_APIs_proto.IOAdaptorController/FTPInBound',
            io__adaptors_dot_io__adaptors__pb2.FTPRequest.SerializeToString,
            io__adaptors_dot_io__adaptors__pb2.InBoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FTPOutBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io_adaptors_APIs_proto.IOAdaptorController/FTPOutBound',
            io__adaptors_dot_io__adaptors__pb2.FTPRequest.SerializeToString,
            io__adaptors_dot_io__adaptors__pb2.OutBoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def S3InBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/io_adaptors_APIs_proto.IOAdaptorController/S3InBound',
            io__adaptors_dot_io__adaptors__pb2.S3Request.SerializeToString,
            io__adaptors_dot_io__adaptors__pb2.InBoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def S3OutBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io_adaptors_APIs_proto.IOAdaptorController/S3OutBound',
            io__adaptors_dot_io__adaptors__pb2.S3Request.SerializeToString,
            io__adaptors_dot_io__adaptors__pb2.OutBoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlobInBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/io_adaptors_APIs_proto.IOAdaptorController/BlobInBound',
            io__adaptors_dot_io__adaptors__pb2.BlobRequest.SerializeToString,
            io__adaptors_dot_io__adaptors__pb2.InBoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlobOutBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io_adaptors_APIs_proto.IOAdaptorController/BlobOutBound',
            io__adaptors_dot_io__adaptors__pb2.BlobRequest.SerializeToString,
            io__adaptors_dot_io__adaptors__pb2.BlobOutBoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
