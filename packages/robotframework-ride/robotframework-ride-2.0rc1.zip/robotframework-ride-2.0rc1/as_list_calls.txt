src/robotide/lib/robot/running/builder.py:        args = data.as_list(include_comment=False)
src/robotide/lib/robot/parsing/comments.py:    def as_list(self):
src/robotide/lib/robot/parsing/settings.py:    def as_list(self):
src/robotide/lib/robot/parsing/model.py:    def as_list(self):
src/robotide/lib/robot/parsing/model.py:            return [self.name] + self.value + self.comment.as_list()
src/robotide/lib/robot/parsing/model.py:        return self.comment.as_list()
src/robotide/lib/robot/parsing/model.py:    def as_list(self, indent=True, include_comment=True):
src/robotide/lib/robot/parsing/model.py:        comments = self.comment.as_list() if include_comment else []
src/robotide/lib/robot/parsing/model.py:    def as_list(self, indent=False, include_comment=True):
src/robotide/lib/robot/parsing/model.py:            comments = self.comment.as_list() if include_comment else []
src/robotide/lib/robot/writer/htmlformatter.py:                count = max(count, len(child.as_list()) + 1)
src/robotide/lib/robot/writer/dataextractor.py:                yield [''] * indent + child.as_list()
src/robotide/controller/ctrlcommands.py:            self._step(context)._recreate(context.steps[self._row].as_list())
src/robotide/controller/ctrlcommands.py:            AddRow(self._row), PasteArea((self._row, 0), [step.as_list()]))
src/robotide/controller/ctrlcommands.py:        assert not(any(i for i in self._step(context).as_list() if i)), \
src/robotide/controller/ctrlcommands.py:            self._step(context).as_list()
src/robotide/controller/ctrlcommands.py:            steps = context.steps[line].as_list()
src/robotide/controller/ctrlcommands.py:            add_indent = (pre_prev_col > index and context.steps[row].as_list()[index] != 'END') or (index < pre_prev_col and context.steps[pre_prev_row].as_list()[pre_prev_col] == 'FOR')
src/robotide/controller/ctrlcommands.py:            del_indent = (prev_cell > index) and (context.steps[row].as_list()[index] == 'END')
src/robotide/controller/ctrlcommands.py:            del_prev_indent = (prev_cell < index) and (context.steps[prev_cell_row].as_list()[prev_cell] == 'FOR')
src/robotide/controller/ctrlcommands.py:            if context.steps[row].as_list()[index] == 'FOR':
src/robotide/controller/ctrlcommands.py:                new_next_indent = (prev_cell == index and (context.steps[prev_cell_row].as_list()[prev_cell] != 'END' or pre_prev_col > index)) \
src/robotide/controller/ctrlcommands.py:                                  or (context.steps[next_cell_row].as_list()[index] != 'END' and next_row_col < index)
src/robotide/controller/ctrlcommands.py:                new_next_indent = (pre_prev_col > next_row_col and context.steps[row].as_list()[index] != 'END') and \
src/robotide/controller/ctrlcommands.py:            keep_indent = (context.steps[row].as_list()[index] == 'FOR'
src/robotide/controller/ctrlcommands.py:                           and context.steps[prev_cell_row].as_list()[prev_cell] == 'FOR' and next_row_col > index
src/robotide/controller/ctrlcommands.py:                           ) or (prev_cell > index and context.steps[row].as_list()[index] == 'END' and context.steps[prev_cell_row].as_list()[prev_cell] != 'END')
src/robotide/controller/ctrlcommands.py:            if add_indent and (context.steps[prev_cell_row].as_list()[prev_cell] != 'FOR' and context.steps[row].as_list()[index] != 'END'):
src/robotide/controller/ctrlcommands.py:            if add_indent and new_next_indent and context.steps[prev_cell_row].as_list()[pre_prev_col] != 'FOR':
src/robotide/controller/ctrlcommands.py:            if del_indent or (keep_indent and context.steps[prev_cell_row].as_list()[prev_cell] == 'END'):
src/robotide/controller/ctrlcommands.py:            if keep_indent and prev_cell > index and len(context.steps[prev_cell_row].as_list()) > prev_cell and context.steps[prev_cell_row].as_list()[prev_cell] == 'END':
src/robotide/controller/ctrlcommands.py:            increase_indent = moving_start < existing_start or (context.steps[row].as_list()[moving_start] == 'END' and context.steps[row+1].as_list()[existing_start] != 'FOR')
src/robotide/controller/ctrlcommands.py:            prev_decrease_indent = context.steps[row].as_list()[moving_start] == 'FOR' and increase_indent
src/robotide/controller/ctrlcommands.py:            if context.steps[row+1].as_list()[existing_start] == 'FOR' and context.steps[row].as_list()[moving_start] != 'END' and keep_indent:
src/robotide/controller/ctrlcommands.py:            if context.steps[row + 1].as_list()[existing_start] == 'END' and not keep_indent\
src/robotide/controller/ctrlcommands.py:                    or (not increase_indent and context.steps[row].as_list()[moving_start] == 'FOR'):
src/robotide/controller/macrocontrollers.py:        return max(chain((len(step.as_list()) for step in self.steps), [0]))
src/robotide/controller/macrocontrollers.py:        new.data.steps = [robotapi.Step(s.as_list()) for s in self.steps]
src/robotide/controller/macrocontrollers.py:        return step.as_list() in [[], ['']]
src/robotide/controller/macrocontrollers.py:        return [robotapi.Step(s.as_list()) for s in step_controllers]
src/robotide/controller/settingcontrollers.py:        return [v.replace('|', '\\|') for v in self.as_list()[1:]]
src/robotide/controller/settingcontrollers.py:    def as_list(self):
src/robotide/controller/settingcontrollers.py:        return self._data.as_list()
src/robotide/controller/settingcontrollers.py:        return any(matcher_function(item or '') for item in self.as_list())
src/robotide/controller/tablecontrollers.py:            vars_as_list += var.as_list()
src/robotide/controller/tablecontrollers.py:                   for string in vars_as_list)
src/robotide/controller/stepcontrollers.py:            cells = self._step.as_list()
src/robotide/controller/stepcontrollers.py:        values = self.as_list()
src/robotide/controller/stepcontrollers.py:        if self._has_list_or_dict_var_value_before(col - 1):
src/robotide/controller/stepcontrollers.py:    def _has_list_or_dict_var_value_before(self, arg_index):
src/robotide/controller/stepcontrollers.py:        values = self.as_list()
src/robotide/controller/stepcontrollers.py:    def as_list(self):
src/robotide/controller/stepcontrollers.py:        return self._step.as_list()
src/robotide/controller/stepcontrollers.py:                   for item in self.as_list())
src/robotide/controller/stepcontrollers.py:                   for item in self.as_list())
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        for i in range(min(col + 1, len(self.as_list()))):
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        if self._step.as_list()[index_of_comment].lower() == 'comment' or\
src/robotide/controller/stepcontrollers.py:                self._step.as_list()[index_of_comment].lower() == 'builtin.comment':
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        if not new_step or not new_step.as_list():
src/robotide/controller/stepcontrollers.py:            upper_indent = self.first_non_empty_cell(steps[index-1].as_list())
src/robotide/controller/stepcontrollers.py:            current_indent = self.first_non_empty_cell(new_step.as_list())
src/robotide/controller/stepcontrollers.py:                new_step = robotapi.Step(e_list + new_step.as_list(indent=True))
src/robotide/controller/stepcontrollers.py:            elif delta_indent < 0 and len(new_step.as_list()) > 1:
src/robotide/controller/stepcontrollers.py:                    if new_step.as_list()[0] == '':
src/robotide/controller/stepcontrollers.py:                        new_step = robotapi.Step(new_step.as_list(indent=True)[1:])
src/robotide/controller/stepcontrollers.py:            elif delta_indent == 0 and len(steps[index-1].as_list()) > upper_indent:
src/robotide/controller/stepcontrollers.py:                if steps[index-1].as_list()[upper_indent-1] in ['END'] \
src/robotide/controller/stepcontrollers.py:                        or steps[index-1].as_list()[upper_indent] in ['FOR']:
src/robotide/controller/stepcontrollers.py:                    new_step = robotapi.Step([''] + new_step.as_list(indent=True))
src/robotide/controller/stepcontrollers.py:                    if new_step.as_list()[0] == '':
src/robotide/controller/stepcontrollers.py:                        new_step = robotapi.Step(new_step.as_list(indent=False)[1:])
src/robotide/controller/stepcontrollers.py:                new_step = robotapi.Step(new_step.as_list(indent=False))
src/robotide/controller/stepcontrollers.py:        if not self._is_end_step(new_step.as_list()):
src/robotide/controller/stepcontrollers.py:            if self._is_intended_step(steps[index-1].as_list()):
src/robotide/controller/stepcontrollers.py:                if not self._is_intended_step(new_step.as_list()):
src/robotide/controller/stepcontrollers.py:                if self._is_intended_step(new_step.as_list()) and isinstance(new_step, StepController):
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:        cells = self._step.as_list()
src/robotide/controller/stepcontrollers.py:                           in self._step.as_list() if cell.strip() != '']
src/robotide/controller/stepcontrollers.py:            next_step._recreate(next_step.as_list())
src/robotide/controller/stepcontrollers.py:    def as_list(self, indent=False, include_comment=False):
src/robotide/controller/stepcontrollers.py:            self._recreate_complete_for_loop_header(cells=self.as_list())
src/robotide/controller/stepcontrollers.py:            print(f"\nDEBUG: ForLoopStepController PRINT STEPS: {i.as_list()}")
src/robotide/controller/stepcontrollers.py:        header = self.as_list()
src/robotide/controller/stepcontrollers.py:        if self.as_list()[self._keyword_column] == 'Comment':
src/robotide/controller/stepcontrollers.py:        if cells[0] != self.as_list()[0]:
src/robotide/controller/stepcontrollers.py:        if len(self.as_list()) <= in_token_index:
src/robotide/controller/stepcontrollers.py:        if cells[in_token_index] != self.as_list()[in_token_index]:
src/robotide/controller/stepcontrollers.py:            self.parent.add_step(index + 1, robotapi.Step(substep.as_list()))
src/robotide/controller/stepcontrollers.py:        cells = self.as_list()
src/robotide/controller/stepcontrollers.py:    def as_list(self):
src/robotide/controller/stepcontrollers.py:        row = self._step.as_list()
src/robotide/controller/stepcontrollers.py:            step._replace_with_normal_step(i, step.as_list())
src/robotide/controller/stepcontrollers.py:            robotapi.Step(cells or self.as_list(), comment=comment))
src/robotide/preferences/configobj.py:    def as_list(self, key):
src/robotide/preferences/configobj.py:        >>> a.as_list('a')
src/robotide/preferences/configobj.py:        >>> a.as_list('a')
src/robotide/preferences/configobj.py:        >>> a.as_list('a')
src/robotide/editor/formatters.py:        return ' | '.join(self._data.as_list())
src/robotide/editor/kweditor.py:            data.append(self._format_comments(step.as_list()))
