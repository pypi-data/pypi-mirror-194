# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from freem_protocols.freem_box import audio_pb2 as freem__protocols_dot_freem__box_dot_audio__pb2


class AudioServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamDiscordRadio = channel.unary_stream(
                '/freem_box.audio.AudioService/StreamDiscordRadio',
                request_serializer=freem__protocols_dot_freem__box_dot_audio__pb2.DiscordRadioStreamRequest.SerializeToString,
                response_deserializer=freem__protocols_dot_freem__box_dot_audio__pb2.DiscordRadioStreamResponse.FromString,
                )
        self.YoutubeUrlForSpotifyID = channel.unary_unary(
                '/freem_box.audio.AudioService/YoutubeUrlForSpotifyID',
                request_serializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeUrlForSpotifyIDRequest.SerializeToString,
                response_deserializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeUrlForSpotifyIDResponse.FromString,
                )
        self.YoutubeAudioData = channel.unary_stream(
                '/freem_box.audio.AudioService/YoutubeAudioData',
                request_serializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeAudioDataRequest.SerializeToString,
                response_deserializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeAudioDataResponse.FromString,
                )


class AudioServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamDiscordRadio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def YoutubeUrlForSpotifyID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def YoutubeAudioData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamDiscordRadio': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDiscordRadio,
                    request_deserializer=freem__protocols_dot_freem__box_dot_audio__pb2.DiscordRadioStreamRequest.FromString,
                    response_serializer=freem__protocols_dot_freem__box_dot_audio__pb2.DiscordRadioStreamResponse.SerializeToString,
            ),
            'YoutubeUrlForSpotifyID': grpc.unary_unary_rpc_method_handler(
                    servicer.YoutubeUrlForSpotifyID,
                    request_deserializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeUrlForSpotifyIDRequest.FromString,
                    response_serializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeUrlForSpotifyIDResponse.SerializeToString,
            ),
            'YoutubeAudioData': grpc.unary_stream_rpc_method_handler(
                    servicer.YoutubeAudioData,
                    request_deserializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeAudioDataRequest.FromString,
                    response_serializer=freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeAudioDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'freem_box.audio.AudioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudioService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamDiscordRadio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/freem_box.audio.AudioService/StreamDiscordRadio',
            freem__protocols_dot_freem__box_dot_audio__pb2.DiscordRadioStreamRequest.SerializeToString,
            freem__protocols_dot_freem__box_dot_audio__pb2.DiscordRadioStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def YoutubeUrlForSpotifyID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/freem_box.audio.AudioService/YoutubeUrlForSpotifyID',
            freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeUrlForSpotifyIDRequest.SerializeToString,
            freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeUrlForSpotifyIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def YoutubeAudioData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/freem_box.audio.AudioService/YoutubeAudioData',
            freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeAudioDataRequest.SerializeToString,
            freem__protocols_dot_freem__box_dot_audio__pb2.YoutubeAudioDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
