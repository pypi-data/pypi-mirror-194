# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['bacalhau_sdk', 'tests']

package_data = \
{'': ['*']}

install_requires = \
['bacalhau-apiclient==0.3.23.post4',
 'cryptography>=39.0.1,<40.0.0',
 'pem>=21.2.0,<22.0.0',
 'pycryptodome>=3.16.0,<4.0.0',
 'six>=1.16.0,<2.0.0',
 'types-six>=1.16.21.4,<2.0.0.0']

setup_kwargs = {
    'name': 'bacalhau-sdk',
    'version': '0.1.4',
    'description': 'Compute over Data framework for public, transparent, and optionally verifiable computation using IPFS & Filecoin.',
    'long_description': '# Bacalhau Python SDK :snake:\n\nThis is the official Python SDK for Bacalhau, named `bacalhau-sdk`.\nIt is a **high-level** SDK that ships the client-side logic (e.g. signing requests) needed to query the endpoints.\nPlease take a look at [the examples](./examples) for snippets to create, list and inspect jobs.\nUnder the hood, this SDK uses [`bacalhau-apiclient`](../clients) (autogenerated via [Swagger](https://swagger.io/tools/swagger-codegen/)/OpenAPI) to interact with the API.\n\nPlease make sure to use this SDK library in your Python projects, instead of the lower level `bacalhau-apiclient`.\nThe latter is listed as a dependency of this SDK and will be installed automatically when you follow the installation instructions below.\n\n## Features\n\n* List, create and inspect Bacalhau jobs using Python objects :balloon:\n* Use the production network, or set the following environment variables to target any Bacalhau network out there:\n    * `BACALHAU_API_HOST`\n    * `BACALHAU_API_PORT`\n* Generate a key pair used to sign requests stored in the path specified by the `BACALHAU_DIR` env var (default: `~/.bacalhau`)\n## Install\n\n### From source:\n\nClone the public repository:\n\n``` console\n$ git clone https://github.com/bacalhau-project/bacalhau/\n```\n\nOnce you have a copy of the source, you can install it with:\n\n``` console\n$ cd python/\n$ pip install .\n```\n\n## Initalize\n\nLikewise the Bacalhau CLI, this SDK uses a key pair to be stored in `BACALHAU_DIR` used for signing requests.\nIf a key pair is not found there, it will create one for you.\n\n\n## Example Use\n\nLet\'s submit a Hello World job and then fetch its output data\'s CID.\nWe start by importing this sdk, namely `bacalhau_sdk`, used to create and submit a job create request.\nThen we import `bacalhau_apiclient` (installed automatically with this sdk), it provides various object models that compose a job create request.\nThese are used to populate a simple python dictionary that will be passed over to the `submit` util method.\n\n```python\nimport pprint\n\nfrom bacalhau_sdk.api import submit\nfrom bacalhau_sdk.config import get_client_id\nfrom bacalhau_apiclient.models.storage_spec import StorageSpec\nfrom bacalhau_apiclient.models.spec import Spec\nfrom bacalhau_apiclient.models.job_spec_language import JobSpecLanguage\nfrom bacalhau_apiclient.models.job_spec_docker import JobSpecDocker\nfrom bacalhau_apiclient.models.job_sharding_config import JobShardingConfig\nfrom bacalhau_apiclient.models.job_execution_plan import JobExecutionPlan\nfrom bacalhau_apiclient.models.deal import Deal\n\n\ndata = dict(\n    APIVersion=\'V1beta1\',\n    ClientID=get_client_id(),\n    Spec=Spec(\n        engine="Docker",\n        verifier="Noop",\n        publisher="Estuary",\n        docker=JobSpecDocker(\n            image="ubuntu",\n            entrypoint=["echo", "Hello World!"],\n        ),\n        language=JobSpecLanguage(job_context=None),\n        wasm=None,\n        resources=None,\n        timeout=1800,\n        outputs=[\n            StorageSpec(\n                storage_source="IPFS",\n                name="outputs",\n                path="/outputs",\n            )\n        ],\n        sharding=JobShardingConfig(\n            batch_size=1,\n            glob_pattern_base_path="/inputs",\n        ),\n        execution_plan=JobExecutionPlan(shards_total=0),\n        deal=Deal(concurrency=1, confidence=0, min_bids=0),\n        do_not_track=False,\n    ),\n)\n\npprint.pprint(submit(data))\n```\n\nThe script above prints the following object, the `job.metadata.id` value is our newly created job id!\n\n```python\n{\'job\': {\'api_version\': \'V1beta1\',\n         \'metadata\': {\'client_id\': \'bae9c3b2adfa04cc647a2457e8c0c605cef8ed93bdea5ac5f19f94219f722dfe\',\n                      \'created_at\': \'2023-02-01T19:30:21.405209538Z\',\n                      \'id\': \'710a0bc2-81d1-4025-8f80-5327ca3ce170\'},\n         \'spec\': {\'Deal\': {\'Concurrency\': 1},\n                  \'Docker\': {\'Entrypoint\': [\'echo\', \'Hello World!\'],\n                             \'Image\': \'ubuntu\'},\n                  \'Engine\': \'Docker\',\n                  \'ExecutionPlan\': {\'ShardsTotal\': 1},\n                  \'Language\': {\'JobContext\': {}},\n                  \'Network\': {\'Type\': \'None\'},\n                  \'Publisher\': \'Estuary\',\n                  \'Resources\': {\'GPU\': \'\'},\n                  \'Sharding\': {\'BatchSize\': 1,\n                               \'GlobPatternBasePath\': \'/inputs\'},\n                  \'Timeout\': 1800,\n                  \'Verifier\': \'Noop\',\n                  \'Wasm\': {\'EntryModule\': {}},\n                  \'outputs\': [{\'Name\': \'outputs\',\n                               \'StorageSource\': \'IPFS\',\n                               \'path\': \'/outputs\'}]},\n         \'status\': {\'JobState\': {},\n                    \'Requester\': {\'RequesterNodeID\': \'QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\',\n                                  \'RequesterPublicKey\': \'CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDVRKPgCfY2fgfrkHkFjeWcqno+MDpmp8DgVaY672BqJl/dZFNU9lBg2P8Znh8OTtHPPBUBk566vU3KchjW7m3uK4OudXrYEfSfEPnCGmL6GuLiZjLf+eXGEez7qPaoYqo06gD8ROdD8VVse27E96LlrpD1xKshHhqQTxKoq1y6Rx4DpbkSt966BumovWJ70w+Nt9ZkPPydRCxVnyWS1khECFQxp5Ep3NbbKtxHNX5HeULzXN5q0EQO39UN6iBhiI34eZkH7PoAm3Vk5xns//FjTAvQw6wZUu8LwvZTaihs+upx2zZysq6CEBKoeNZqed9+Tf+qHow0P5pxmiu+or+DAgMBAAE=\'}}}}\n```\n\nWe can then use the `results` method to fetch, among other fields, the output data\'s CID.\n\n```python\nfrom bacalhau_sdk.api import results\n\nprint(results(job_id="710a0bc2-81d1-4025-8f80-5327ca3ce170"))\n```\n\nThe line above prints the following dictionary:\n\n```python\n{\'results\': [{\'data\': {\'cid\': \'QmYEqqNDdDrsRhPRShKHzsnZwBq3F59Ti3kQmv9En4i5Sw\',\n                       \'metadata\': None,\n                       \'name\': \'job-710a0bc2-81d1-4025-8f80-5327ca3ce170-shard-0-host-QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\',\n                       \'path\': None,\n                       \'source_path\': None,\n                       \'storage_source\': \'IPFS\',\n                       \'url\': None},\n              \'node_id\': \'QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\',\n              \'shard_index\': None}]}\n```\n\nCongrats, that was a good start! ðŸŽˆ\nPlease find more code snippets in [the examples folder](./examples) (more examples published in the near future).\n\n## Devstack\n\nYou can set the environment variables `BACALHAU_API_HOST` and `BACALHAU_API_PORT` to point this SDK to your Bacalhau API (e.g. [local devstack](../docs/running_locally.md)).\n\n## Developers guide\n\nWe use Poetry to manage this package, take a look at [their official docs](https://python-poetry.org/docs/) to install it.\nNote, all targets in the Makefile use poetry as well!\n\nTo develop this SDK locally, create a dedicated poetry virtual environment and install the root package (i.e. `bacalhau_sdk`) and its dependencies:\n\n```shell\n$ poetry install --no-interaction --with test,dev -vvv\nCreating virtualenv bacalhau-sdk-9mIcLX8U-py3.9 in /Users/enricorotundo/Library/Caches/pypoetry/virtualenvs\nUsing virtualenv: /Users/enricorotundo/Library/Caches/pypoetry/virtualenvs/bacalhau-sdk-9mIcLX8U-py3.9\nInstalling dependencies from lock file\n...\n```\n\nNote the line above installs the root package (i.e. `bacalhau_sdk`) in editable mode, that is, any change to its source code is reflected immediately without the need for re-packaging and re-installing it. Easy peasy!\n\nThen install the pre-commit hooks and test it:\n\n```shell\n$ make install-pre-commit\n\n$ make pre-commit\n```\n',
    'author': 'Enrico Rotundo',
    'author_email': 'team@bacalhau.org',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/bacalhau-project/bacalhau/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8.1,<3.12',
}


setup(**setup_kwargs)
