# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneralAcl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_authors': 'list[str]',
        'system_readers': 'list[str]'
    }

    attribute_map = {
        'system_authors': 'system_authors',
        'system_readers': 'system_readers'
    }

    def __init__(self, system_authors=None, system_readers=None):  # noqa: E501
        """GeneralAcl - a model defined in Swagger"""  # noqa: E501
        self._system_authors = None
        self._system_readers = None
        self.discriminator = None
        if system_authors is not None:
            self.system_authors = system_authors
        if system_readers is not None:
            self.system_readers = system_readers

    @property
    def system_authors(self):
        """Gets the system_authors of this GeneralAcl.  # noqa: E501

        SystemAuthors  - seznam osob a útvarů oprávněných zapisovat do dokumentu  # noqa: E501

        :return: The system_authors of this GeneralAcl.  # noqa: E501
        :rtype: list[str]
        """
        return self._system_authors

    @system_authors.setter
    def system_authors(self, system_authors):
        """Sets the system_authors of this GeneralAcl.

        SystemAuthors  - seznam osob a útvarů oprávněných zapisovat do dokumentu  # noqa: E501

        :param system_authors: The system_authors of this GeneralAcl.  # noqa: E501
        :type: list[str]
        """

        self._system_authors = system_authors

    @property
    def system_readers(self):
        """Gets the system_readers of this GeneralAcl.  # noqa: E501

        SystemReaders - seznam osob a útvarů číst dokument  # noqa: E501

        :return: The system_readers of this GeneralAcl.  # noqa: E501
        :rtype: list[str]
        """
        return self._system_readers

    @system_readers.setter
    def system_readers(self, system_readers):
        """Sets the system_readers of this GeneralAcl.

        SystemReaders - seznam osob a útvarů číst dokument  # noqa: E501

        :param system_readers: The system_readers of this GeneralAcl.  # noqa: E501
        :type: list[str]
        """

        self._system_readers = system_readers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralAcl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralAcl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
