# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentHidden(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'doc_type': 'str',
        'old_contract': 'str',
        'unid': 'str',
        'vat': 'str',
        'contract_value_tax_el': 'str',
        'creator_delegated_names': 'list[str]',
        'cancelled': 'str',
        'cancelled_name': 'str',
        'cal_edit': 'str',
        'evidence_note_unid': 'str',
        'type_new': 'str',
        'or_check': 'str',
        'sub_contract': 'bool',
        'identifier_main_contract': 'str'
    }

    attribute_map = {
        'status': 'status',
        'doc_type': 'doc_type',
        'old_contract': 'old_contract',
        'unid': 'unid',
        'vat': 'vat',
        'contract_value_tax_el': 'contract_value_tax_el',
        'creator_delegated_names': 'creator_delegated_names',
        'cancelled': 'cancelled',
        'cancelled_name': 'cancelled_name',
        'cal_edit': 'cal_edit',
        'evidence_note_unid': 'evidence_note_unid',
        'type_new': 'type_new',
        'or_check': 'or_check',
        'sub_contract': 'sub_contract',
        'identifier_main_contract': 'identifier_main_contract'
    }

    def __init__(self, status=None, doc_type=None, old_contract=None, unid=None, vat=None, contract_value_tax_el=None, creator_delegated_names=None, cancelled=None, cancelled_name=None, cal_edit=None, evidence_note_unid=None, type_new=None, or_check=None, sub_contract=None, identifier_main_contract=None):  # noqa: E501
        """DocumentHidden - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._doc_type = None
        self._old_contract = None
        self._unid = None
        self._vat = None
        self._contract_value_tax_el = None
        self._creator_delegated_names = None
        self._cancelled = None
        self._cancelled_name = None
        self._cal_edit = None
        self._evidence_note_unid = None
        self._type_new = None
        self._or_check = None
        self._sub_contract = None
        self._identifier_main_contract = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if doc_type is not None:
            self.doc_type = doc_type
        if old_contract is not None:
            self.old_contract = old_contract
        if unid is not None:
            self.unid = unid
        if vat is not None:
            self.vat = vat
        if contract_value_tax_el is not None:
            self.contract_value_tax_el = contract_value_tax_el
        if creator_delegated_names is not None:
            self.creator_delegated_names = creator_delegated_names
        if cancelled is not None:
            self.cancelled = cancelled
        if cancelled_name is not None:
            self.cancelled_name = cancelled_name
        if cal_edit is not None:
            self.cal_edit = cal_edit
        if evidence_note_unid is not None:
            self.evidence_note_unid = evidence_note_unid
        if type_new is not None:
            self.type_new = type_new
        if or_check is not None:
            self.or_check = or_check
        if sub_contract is not None:
            self.sub_contract = sub_contract
        if identifier_main_contract is not None:
            self.identifier_main_contract = identifier_main_contract

    @property
    def status(self):
        """Gets the status of this DocumentHidden.  # noqa: E501

        status  # noqa: E501

        :return: The status of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentHidden.

        status  # noqa: E501

        :param status: The status of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def doc_type(self):
        """Gets the doc_type of this DocumentHidden.  # noqa: E501

        DocType  # noqa: E501

        :return: The doc_type of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this DocumentHidden.

        DocType  # noqa: E501

        :param doc_type: The doc_type of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._doc_type = doc_type

    @property
    def old_contract(self):
        """Gets the old_contract of this DocumentHidden.  # noqa: E501

        OldContract  # noqa: E501

        :return: The old_contract of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._old_contract

    @old_contract.setter
    def old_contract(self, old_contract):
        """Sets the old_contract of this DocumentHidden.

        OldContract  # noqa: E501

        :param old_contract: The old_contract of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._old_contract = old_contract

    @property
    def unid(self):
        """Gets the unid of this DocumentHidden.  # noqa: E501

        unid  # noqa: E501

        :return: The unid of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._unid

    @unid.setter
    def unid(self, unid):
        """Sets the unid of this DocumentHidden.

        unid  # noqa: E501

        :param unid: The unid of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._unid = unid

    @property
    def vat(self):
        """Gets the vat of this DocumentHidden.  # noqa: E501

        VAT  # noqa: E501

        :return: The vat of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this DocumentHidden.

        VAT  # noqa: E501

        :param vat: The vat of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def contract_value_tax_el(self):
        """Gets the contract_value_tax_el of this DocumentHidden.  # noqa: E501

        contract_value_tax_EL  # noqa: E501

        :return: The contract_value_tax_el of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._contract_value_tax_el

    @contract_value_tax_el.setter
    def contract_value_tax_el(self, contract_value_tax_el):
        """Sets the contract_value_tax_el of this DocumentHidden.

        contract_value_tax_EL  # noqa: E501

        :param contract_value_tax_el: The contract_value_tax_el of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._contract_value_tax_el = contract_value_tax_el

    @property
    def creator_delegated_names(self):
        """Gets the creator_delegated_names of this DocumentHidden.  # noqa: E501

        creator_delegated - (jména)  # noqa: E501

        :return: The creator_delegated_names of this DocumentHidden.  # noqa: E501
        :rtype: list[str]
        """
        return self._creator_delegated_names

    @creator_delegated_names.setter
    def creator_delegated_names(self, creator_delegated_names):
        """Sets the creator_delegated_names of this DocumentHidden.

        creator_delegated - (jména)  # noqa: E501

        :param creator_delegated_names: The creator_delegated_names of this DocumentHidden.  # noqa: E501
        :type: list[str]
        """

        self._creator_delegated_names = creator_delegated_names

    @property
    def cancelled(self):
        """Gets the cancelled of this DocumentHidden.  # noqa: E501

        cancelled  (co se tam ukládá???)  # noqa: E501

        :return: The cancelled of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this DocumentHidden.

        cancelled  (co se tam ukládá???)  # noqa: E501

        :param cancelled: The cancelled of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._cancelled = cancelled

    @property
    def cancelled_name(self):
        """Gets the cancelled_name of this DocumentHidden.  # noqa: E501

        cancelledBy - (jméno)  # noqa: E501

        :return: The cancelled_name of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_name

    @cancelled_name.setter
    def cancelled_name(self, cancelled_name):
        """Sets the cancelled_name of this DocumentHidden.

        cancelledBy - (jméno)  # noqa: E501

        :param cancelled_name: The cancelled_name of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._cancelled_name = cancelled_name

    @property
    def cal_edit(self):
        """Gets the cal_edit of this DocumentHidden.  # noqa: E501

        cal_edit  # noqa: E501

        :return: The cal_edit of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._cal_edit

    @cal_edit.setter
    def cal_edit(self, cal_edit):
        """Sets the cal_edit of this DocumentHidden.

        cal_edit  # noqa: E501

        :param cal_edit: The cal_edit of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._cal_edit = cal_edit

    @property
    def evidence_note_unid(self):
        """Gets the evidence_note_unid of this DocumentHidden.  # noqa: E501

        do tohoto pole se uloží unid evidenčního listu, ze kterého byl tento krycí vytvořen   # noqa: E501

        :return: The evidence_note_unid of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._evidence_note_unid

    @evidence_note_unid.setter
    def evidence_note_unid(self, evidence_note_unid):
        """Sets the evidence_note_unid of this DocumentHidden.

        do tohoto pole se uloží unid evidenčního listu, ze kterého byl tento krycí vytvořen   # noqa: E501

        :param evidence_note_unid: The evidence_note_unid of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._evidence_note_unid = evidence_note_unid

    @property
    def type_new(self):
        """Gets the type_new of this DocumentHidden.  # noqa: E501

        type_new  # noqa: E501

        :return: The type_new of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._type_new

    @type_new.setter
    def type_new(self, type_new):
        """Sets the type_new of this DocumentHidden.

        type_new  # noqa: E501

        :param type_new: The type_new of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._type_new = type_new

    @property
    def or_check(self):
        """Gets the or_check of this DocumentHidden.  # noqa: E501

        ORCheck  # noqa: E501

        :return: The or_check of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._or_check

    @or_check.setter
    def or_check(self, or_check):
        """Sets the or_check of this DocumentHidden.

        ORCheck  # noqa: E501

        :param or_check: The or_check of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._or_check = or_check

    @property
    def sub_contract(self):
        """Gets the sub_contract of this DocumentHidden.  # noqa: E501

        isSubContract - jde o dodatek?  # noqa: E501

        :return: The sub_contract of this DocumentHidden.  # noqa: E501
        :rtype: bool
        """
        return self._sub_contract

    @sub_contract.setter
    def sub_contract(self, sub_contract):
        """Sets the sub_contract of this DocumentHidden.

        isSubContract - jde o dodatek?  # noqa: E501

        :param sub_contract: The sub_contract of this DocumentHidden.  # noqa: E501
        :type: bool
        """

        self._sub_contract = sub_contract

    @property
    def identifier_main_contract(self):
        """Gets the identifier_main_contract of this DocumentHidden.  # noqa: E501

        identifier_MainContract - ev. cislo puvodni verze smlouvy   # noqa: E501

        :return: The identifier_main_contract of this DocumentHidden.  # noqa: E501
        :rtype: str
        """
        return self._identifier_main_contract

    @identifier_main_contract.setter
    def identifier_main_contract(self, identifier_main_contract):
        """Sets the identifier_main_contract of this DocumentHidden.

        identifier_MainContract - ev. cislo puvodni verze smlouvy   # noqa: E501

        :param identifier_main_contract: The identifier_main_contract of this DocumentHidden.  # noqa: E501
        :type: str
        """

        self._identifier_main_contract = identifier_main_contract

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentHidden, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentHidden):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
