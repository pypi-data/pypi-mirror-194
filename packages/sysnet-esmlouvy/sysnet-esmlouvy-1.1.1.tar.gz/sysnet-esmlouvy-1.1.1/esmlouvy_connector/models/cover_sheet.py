# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoverSheet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base': 'BaseSheetDocument',
        'contract_type': 'str',
        'identifier_subcontract': 'str',
        'date_contract_submitted': 'date',
        'contractor': 'Company',
        'choice': 'Choice',
        'subcontract_note': 'str',
        'date_contract': 'date',
        'date_finish_contract': 'date',
        'duration': 'str',
        'payment_period': 'str',
        'date_purge': 'date',
        'contract_value_vat': 'float',
        'contract_value_published': 'str',
        'calendar_value_check': 'int',
        'finance_eu': 'bool',
        'identifier_registration_sheet': 'str',
        'payment_calendar': 'DocumentEntryList',
        'standpoint_list': 'DocumentEntryList',
        'choice_company_ovz_statement': 'str',
        'choice_company_ovz_statement_attachments': 'list[DocumentAttachment]',
        'choice_company_ovz_statement_attachments_old': 'str',
        'draft_contract_attachments': 'list[DocumentAttachment]',
        'draft_contract_attachments_old': 'str',
        'signed_contract_attachments': 'list[DocumentAttachment]',
        'signed_contract_attachments_old': 'str',
        'oldcontract_scan_deliver_later': 'bool'
    }

    attribute_map = {
        'base': 'base',
        'contract_type': 'contract_type',
        'identifier_subcontract': 'identifier_subcontract',
        'date_contract_submitted': 'date_contract_submitted',
        'contractor': 'contractor',
        'choice': 'choice',
        'subcontract_note': 'subcontract_note',
        'date_contract': 'date_contract',
        'date_finish_contract': 'date_finish_contract',
        'duration': 'duration',
        'payment_period': 'payment_period',
        'date_purge': 'date_purge',
        'contract_value_vat': 'contract_value_vat',
        'contract_value_published': 'contract_value_published',
        'calendar_value_check': 'calendar_value_check',
        'finance_eu': 'finance_eu',
        'identifier_registration_sheet': 'identifier_registration_sheet',
        'payment_calendar': 'payment_calendar',
        'standpoint_list': 'standpoint_list',
        'choice_company_ovz_statement': 'choice_company_ovz_statement',
        'choice_company_ovz_statement_attachments': 'choice_company_ovz_statement_attachments',
        'choice_company_ovz_statement_attachments_old': 'choice_company_ovz_statement_attachments_old',
        'draft_contract_attachments': 'draft_contract_attachments',
        'draft_contract_attachments_old': 'draft_contract_attachments_old',
        'signed_contract_attachments': 'signed_contract_attachments',
        'signed_contract_attachments_old': 'signed_contract_attachments_old',
        'oldcontract_scan_deliver_later': 'oldcontract_scan_deliver_later'
    }

    def __init__(self, base=None, contract_type=None, identifier_subcontract=None, date_contract_submitted=None, contractor=None, choice=None, subcontract_note=None, date_contract=None, date_finish_contract=None, duration=None, payment_period=None, date_purge=None, contract_value_vat=None, contract_value_published=None, calendar_value_check=None, finance_eu=None, identifier_registration_sheet=None, payment_calendar=None, standpoint_list=None, choice_company_ovz_statement=None, choice_company_ovz_statement_attachments=None, choice_company_ovz_statement_attachments_old=None, draft_contract_attachments=None, draft_contract_attachments_old=None, signed_contract_attachments=None, signed_contract_attachments_old=None, oldcontract_scan_deliver_later=None):  # noqa: E501
        """CoverSheet - a model defined in Swagger"""  # noqa: E501
        self._base = None
        self._contract_type = None
        self._identifier_subcontract = None
        self._date_contract_submitted = None
        self._contractor = None
        self._choice = None
        self._subcontract_note = None
        self._date_contract = None
        self._date_finish_contract = None
        self._duration = None
        self._payment_period = None
        self._date_purge = None
        self._contract_value_vat = None
        self._contract_value_published = None
        self._calendar_value_check = None
        self._finance_eu = None
        self._identifier_registration_sheet = None
        self._payment_calendar = None
        self._standpoint_list = None
        self._choice_company_ovz_statement = None
        self._choice_company_ovz_statement_attachments = None
        self._choice_company_ovz_statement_attachments_old = None
        self._draft_contract_attachments = None
        self._draft_contract_attachments_old = None
        self._signed_contract_attachments = None
        self._signed_contract_attachments_old = None
        self._oldcontract_scan_deliver_later = None
        self.discriminator = None
        if base is not None:
            self.base = base
        if contract_type is not None:
            self.contract_type = contract_type
        if identifier_subcontract is not None:
            self.identifier_subcontract = identifier_subcontract
        if date_contract_submitted is not None:
            self.date_contract_submitted = date_contract_submitted
        if contractor is not None:
            self.contractor = contractor
        if choice is not None:
            self.choice = choice
        if subcontract_note is not None:
            self.subcontract_note = subcontract_note
        if date_contract is not None:
            self.date_contract = date_contract
        if date_finish_contract is not None:
            self.date_finish_contract = date_finish_contract
        if duration is not None:
            self.duration = duration
        if payment_period is not None:
            self.payment_period = payment_period
        if date_purge is not None:
            self.date_purge = date_purge
        if contract_value_vat is not None:
            self.contract_value_vat = contract_value_vat
        if contract_value_published is not None:
            self.contract_value_published = contract_value_published
        if calendar_value_check is not None:
            self.calendar_value_check = calendar_value_check
        if finance_eu is not None:
            self.finance_eu = finance_eu
        if identifier_registration_sheet is not None:
            self.identifier_registration_sheet = identifier_registration_sheet
        if payment_calendar is not None:
            self.payment_calendar = payment_calendar
        if standpoint_list is not None:
            self.standpoint_list = standpoint_list
        if choice_company_ovz_statement is not None:
            self.choice_company_ovz_statement = choice_company_ovz_statement
        if choice_company_ovz_statement_attachments is not None:
            self.choice_company_ovz_statement_attachments = choice_company_ovz_statement_attachments
        if choice_company_ovz_statement_attachments_old is not None:
            self.choice_company_ovz_statement_attachments_old = choice_company_ovz_statement_attachments_old
        if draft_contract_attachments is not None:
            self.draft_contract_attachments = draft_contract_attachments
        if draft_contract_attachments_old is not None:
            self.draft_contract_attachments_old = draft_contract_attachments_old
        if signed_contract_attachments is not None:
            self.signed_contract_attachments = signed_contract_attachments
        if signed_contract_attachments_old is not None:
            self.signed_contract_attachments_old = signed_contract_attachments_old
        if oldcontract_scan_deliver_later is not None:
            self.oldcontract_scan_deliver_later = oldcontract_scan_deliver_later

    @property
    def base(self):
        """Gets the base of this CoverSheet.  # noqa: E501


        :return: The base of this CoverSheet.  # noqa: E501
        :rtype: BaseSheetDocument
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this CoverSheet.


        :param base: The base of this CoverSheet.  # noqa: E501
        :type: BaseSheetDocument
        """

        self._base = base

    @property
    def contract_type(self):
        """Gets the contract_type of this CoverSheet.  # noqa: E501

        Typ smlouvy (SA, SB, SC, SD, SX)  # noqa: E501

        :return: The contract_type of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this CoverSheet.

        Typ smlouvy (SA, SB, SC, SD, SX)  # noqa: E501

        :param contract_type: The contract_type of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._contract_type = contract_type

    @property
    def identifier_subcontract(self):
        """Gets the identifier_subcontract of this CoverSheet.  # noqa: E501

        identifier_subcontract - Číslo dodatku:  # noqa: E501

        :return: The identifier_subcontract of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._identifier_subcontract

    @identifier_subcontract.setter
    def identifier_subcontract(self, identifier_subcontract):
        """Sets the identifier_subcontract of this CoverSheet.

        identifier_subcontract - Číslo dodatku:  # noqa: E501

        :param identifier_subcontract: The identifier_subcontract of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._identifier_subcontract = identifier_subcontract

    @property
    def date_contract_submitted(self):
        """Gets the date_contract_submitted of this CoverSheet.  # noqa: E501

        date_contract_submitted - Dodatek ze dne (Datum podpisu)  # noqa: E501

        :return: The date_contract_submitted of this CoverSheet.  # noqa: E501
        :rtype: date
        """
        return self._date_contract_submitted

    @date_contract_submitted.setter
    def date_contract_submitted(self, date_contract_submitted):
        """Sets the date_contract_submitted of this CoverSheet.

        date_contract_submitted - Dodatek ze dne (Datum podpisu)  # noqa: E501

        :param date_contract_submitted: The date_contract_submitted of this CoverSheet.  # noqa: E501
        :type: date
        """

        self._date_contract_submitted = date_contract_submitted

    @property
    def contractor(self):
        """Gets the contractor of this CoverSheet.  # noqa: E501


        :return: The contractor of this CoverSheet.  # noqa: E501
        :rtype: Company
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this CoverSheet.


        :param contractor: The contractor of this CoverSheet.  # noqa: E501
        :type: Company
        """

        self._contractor = contractor

    @property
    def choice(self):
        """Gets the choice of this CoverSheet.  # noqa: E501


        :return: The choice of this CoverSheet.  # noqa: E501
        :rtype: Choice
        """
        return self._choice

    @choice.setter
    def choice(self, choice):
        """Sets the choice of this CoverSheet.


        :param choice: The choice of this CoverSheet.  # noqa: E501
        :type: Choice
        """

        self._choice = choice

    @property
    def subcontract_note(self):
        """Gets the subcontract_note of this CoverSheet.  # noqa: E501

        Poznámka ke smlouvě, stručný obsah dodatku (změny oproti smlouvě)  # noqa: E501

        :return: The subcontract_note of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._subcontract_note

    @subcontract_note.setter
    def subcontract_note(self, subcontract_note):
        """Sets the subcontract_note of this CoverSheet.

        Poznámka ke smlouvě, stručný obsah dodatku (změny oproti smlouvě)  # noqa: E501

        :param subcontract_note: The subcontract_note of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._subcontract_note = subcontract_note

    @property
    def date_contract(self):
        """Gets the date_contract of this CoverSheet.  # noqa: E501

        date_contract - Termín uzavření smlouvy  # noqa: E501

        :return: The date_contract of this CoverSheet.  # noqa: E501
        :rtype: date
        """
        return self._date_contract

    @date_contract.setter
    def date_contract(self, date_contract):
        """Sets the date_contract of this CoverSheet.

        date_contract - Termín uzavření smlouvy  # noqa: E501

        :param date_contract: The date_contract of this CoverSheet.  # noqa: E501
        :type: date
        """

        self._date_contract = date_contract

    @property
    def date_finish_contract(self):
        """Gets the date_finish_contract of this CoverSheet.  # noqa: E501

        date_finish_contract - Termín ukončení smlouvy  # noqa: E501

        :return: The date_finish_contract of this CoverSheet.  # noqa: E501
        :rtype: date
        """
        return self._date_finish_contract

    @date_finish_contract.setter
    def date_finish_contract(self, date_finish_contract):
        """Sets the date_finish_contract of this CoverSheet.

        date_finish_contract - Termín ukončení smlouvy  # noqa: E501

        :param date_finish_contract: The date_finish_contract of this CoverSheet.  # noqa: E501
        :type: date
        """

        self._date_finish_contract = date_finish_contract

    @property
    def duration(self):
        """Gets the duration of this CoverSheet.  # noqa: E501

        Duration - Trvání (text)  # noqa: E501

        :return: The duration of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CoverSheet.

        Duration - Trvání (text)  # noqa: E501

        :param duration: The duration of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def payment_period(self):
        """Gets the payment_period of this CoverSheet.  # noqa: E501

        payment_period - Termín plateb (text), např. čtvrtletně, měsíčně)  # noqa: E501

        :return: The payment_period of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._payment_period

    @payment_period.setter
    def payment_period(self, payment_period):
        """Sets the payment_period of this CoverSheet.

        payment_period - Termín plateb (text), např. čtvrtletně, měsíčně)  # noqa: E501

        :param payment_period: The payment_period of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._payment_period = payment_period

    @property
    def date_purge(self):
        """Gets the date_purge of this CoverSheet.  # noqa: E501

        date_purge - Splatnost  # noqa: E501

        :return: The date_purge of this CoverSheet.  # noqa: E501
        :rtype: date
        """
        return self._date_purge

    @date_purge.setter
    def date_purge(self, date_purge):
        """Sets the date_purge of this CoverSheet.

        date_purge - Splatnost  # noqa: E501

        :param date_purge: The date_purge of this CoverSheet.  # noqa: E501
        :type: date
        """

        self._date_purge = date_purge

    @property
    def contract_value_vat(self):
        """Gets the contract_value_vat of this CoverSheet.  # noqa: E501

        contract_value_tax - Celková částka za smlouvu v Kč vč. DPH  # noqa: E501

        :return: The contract_value_vat of this CoverSheet.  # noqa: E501
        :rtype: float
        """
        return self._contract_value_vat

    @contract_value_vat.setter
    def contract_value_vat(self, contract_value_vat):
        """Sets the contract_value_vat of this CoverSheet.

        contract_value_tax - Celková částka za smlouvu v Kč vč. DPH  # noqa: E501

        :param contract_value_vat: The contract_value_vat of this CoverSheet.  # noqa: E501
        :type: float
        """

        self._contract_value_vat = contract_value_vat

    @property
    def contract_value_published(self):
        """Gets the contract_value_published of this CoverSheet.  # noqa: E501

        contract_value_published - Publikovaná částka za smlouvu Obecný text. Pokud bude tato hodnota vyplněna, bude publikována na webové stránky místo celkové částky za smlouvu    # noqa: E501

        :return: The contract_value_published of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._contract_value_published

    @contract_value_published.setter
    def contract_value_published(self, contract_value_published):
        """Sets the contract_value_published of this CoverSheet.

        contract_value_published - Publikovaná částka za smlouvu Obecný text. Pokud bude tato hodnota vyplněna, bude publikována na webové stránky místo celkové částky za smlouvu    # noqa: E501

        :param contract_value_published: The contract_value_published of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._contract_value_published = contract_value_published

    @property
    def calendar_value_check(self):
        """Gets the calendar_value_check of this CoverSheet.  # noqa: E501

        calendar_value_check - Kontrolní součet z platebního kalendáře  # noqa: E501

        :return: The calendar_value_check of this CoverSheet.  # noqa: E501
        :rtype: int
        """
        return self._calendar_value_check

    @calendar_value_check.setter
    def calendar_value_check(self, calendar_value_check):
        """Sets the calendar_value_check of this CoverSheet.

        calendar_value_check - Kontrolní součet z platebního kalendáře  # noqa: E501

        :param calendar_value_check: The calendar_value_check of this CoverSheet.  # noqa: E501
        :type: int
        """

        self._calendar_value_check = calendar_value_check

    @property
    def finance_eu(self):
        """Gets the finance_eu of this CoverSheet.  # noqa: E501

        Spolufinancovaní EU  # noqa: E501

        :return: The finance_eu of this CoverSheet.  # noqa: E501
        :rtype: bool
        """
        return self._finance_eu

    @finance_eu.setter
    def finance_eu(self, finance_eu):
        """Sets the finance_eu of this CoverSheet.

        Spolufinancovaní EU  # noqa: E501

        :param finance_eu: The finance_eu of this CoverSheet.  # noqa: E501
        :type: bool
        """

        self._finance_eu = finance_eu

    @property
    def identifier_registration_sheet(self):
        """Gets the identifier_registration_sheet of this CoverSheet.  # noqa: E501

        EvidenceNoteUNID, evidence_note_unid - UNID evidenčního listu  # noqa: E501

        :return: The identifier_registration_sheet of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._identifier_registration_sheet

    @identifier_registration_sheet.setter
    def identifier_registration_sheet(self, identifier_registration_sheet):
        """Sets the identifier_registration_sheet of this CoverSheet.

        EvidenceNoteUNID, evidence_note_unid - UNID evidenčního listu  # noqa: E501

        :param identifier_registration_sheet: The identifier_registration_sheet of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._identifier_registration_sheet = identifier_registration_sheet

    @property
    def payment_calendar(self):
        """Gets the payment_calendar of this CoverSheet.  # noqa: E501


        :return: The payment_calendar of this CoverSheet.  # noqa: E501
        :rtype: DocumentEntryList
        """
        return self._payment_calendar

    @payment_calendar.setter
    def payment_calendar(self, payment_calendar):
        """Sets the payment_calendar of this CoverSheet.


        :param payment_calendar: The payment_calendar of this CoverSheet.  # noqa: E501
        :type: DocumentEntryList
        """

        self._payment_calendar = payment_calendar

    @property
    def standpoint_list(self):
        """Gets the standpoint_list of this CoverSheet.  # noqa: E501


        :return: The standpoint_list of this CoverSheet.  # noqa: E501
        :rtype: DocumentEntryList
        """
        return self._standpoint_list

    @standpoint_list.setter
    def standpoint_list(self, standpoint_list):
        """Sets the standpoint_list of this CoverSheet.


        :param standpoint_list: The standpoint_list of this CoverSheet.  # noqa: E501
        :type: DocumentEntryList
        """

        self._standpoint_list = standpoint_list

    @property
    def choice_company_ovz_statement(self):
        """Gets the choice_company_ovz_statement of this CoverSheet.  # noqa: E501

        Vyjádření OVZ/Protokol o výběhu nejvýhodnější nabídky/Výjimka ministra  # noqa: E501

        :return: The choice_company_ovz_statement of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._choice_company_ovz_statement

    @choice_company_ovz_statement.setter
    def choice_company_ovz_statement(self, choice_company_ovz_statement):
        """Sets the choice_company_ovz_statement of this CoverSheet.

        Vyjádření OVZ/Protokol o výběhu nejvýhodnější nabídky/Výjimka ministra  # noqa: E501

        :param choice_company_ovz_statement: The choice_company_ovz_statement of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._choice_company_ovz_statement = choice_company_ovz_statement

    @property
    def choice_company_ovz_statement_attachments(self):
        """Gets the choice_company_ovz_statement_attachments of this CoverSheet.  # noqa: E501

        Souborové přílohy k Vyjádření OVZ/Protokol o výběhu nejvýhodnější nabídky/Výjimka ministra   # noqa: E501

        :return: The choice_company_ovz_statement_attachments of this CoverSheet.  # noqa: E501
        :rtype: list[DocumentAttachment]
        """
        return self._choice_company_ovz_statement_attachments

    @choice_company_ovz_statement_attachments.setter
    def choice_company_ovz_statement_attachments(self, choice_company_ovz_statement_attachments):
        """Sets the choice_company_ovz_statement_attachments of this CoverSheet.

        Souborové přílohy k Vyjádření OVZ/Protokol o výběhu nejvýhodnější nabídky/Výjimka ministra   # noqa: E501

        :param choice_company_ovz_statement_attachments: The choice_company_ovz_statement_attachments of this CoverSheet.  # noqa: E501
        :type: list[DocumentAttachment]
        """

        self._choice_company_ovz_statement_attachments = choice_company_ovz_statement_attachments

    @property
    def choice_company_ovz_statement_attachments_old(self):
        """Gets the choice_company_ovz_statement_attachments_old of this CoverSheet.  # noqa: E501

        Souborové přílohy k Vyjádření OVZ/Protokol o výběhu nejvýhodnější nabídky/Výjimka ministra - RTF   # noqa: E501

        :return: The choice_company_ovz_statement_attachments_old of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._choice_company_ovz_statement_attachments_old

    @choice_company_ovz_statement_attachments_old.setter
    def choice_company_ovz_statement_attachments_old(self, choice_company_ovz_statement_attachments_old):
        """Sets the choice_company_ovz_statement_attachments_old of this CoverSheet.

        Souborové přílohy k Vyjádření OVZ/Protokol o výběhu nejvýhodnější nabídky/Výjimka ministra - RTF   # noqa: E501

        :param choice_company_ovz_statement_attachments_old: The choice_company_ovz_statement_attachments_old of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._choice_company_ovz_statement_attachments_old = choice_company_ovz_statement_attachments_old

    @property
    def draft_contract_attachments(self):
        """Gets the draft_contract_attachments of this CoverSheet.  # noqa: E501

        Attachments_Draft_Contract - Přílohy - návrh smlouvy nebo dodatku  # noqa: E501

        :return: The draft_contract_attachments of this CoverSheet.  # noqa: E501
        :rtype: list[DocumentAttachment]
        """
        return self._draft_contract_attachments

    @draft_contract_attachments.setter
    def draft_contract_attachments(self, draft_contract_attachments):
        """Sets the draft_contract_attachments of this CoverSheet.

        Attachments_Draft_Contract - Přílohy - návrh smlouvy nebo dodatku  # noqa: E501

        :param draft_contract_attachments: The draft_contract_attachments of this CoverSheet.  # noqa: E501
        :type: list[DocumentAttachment]
        """

        self._draft_contract_attachments = draft_contract_attachments

    @property
    def draft_contract_attachments_old(self):
        """Gets the draft_contract_attachments_old of this CoverSheet.  # noqa: E501

        Attachments_Draft_Contract - Přílohy - návrh smlouvy nebo dodatku - RTF  # noqa: E501

        :return: The draft_contract_attachments_old of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._draft_contract_attachments_old

    @draft_contract_attachments_old.setter
    def draft_contract_attachments_old(self, draft_contract_attachments_old):
        """Sets the draft_contract_attachments_old of this CoverSheet.

        Attachments_Draft_Contract - Přílohy - návrh smlouvy nebo dodatku - RTF  # noqa: E501

        :param draft_contract_attachments_old: The draft_contract_attachments_old of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._draft_contract_attachments_old = draft_contract_attachments_old

    @property
    def signed_contract_attachments(self):
        """Gets the signed_contract_attachments of this CoverSheet.  # noqa: E501

        Attachments_Signed_Contract -  Přílohy - podepsaná smlouva  # noqa: E501

        :return: The signed_contract_attachments of this CoverSheet.  # noqa: E501
        :rtype: list[DocumentAttachment]
        """
        return self._signed_contract_attachments

    @signed_contract_attachments.setter
    def signed_contract_attachments(self, signed_contract_attachments):
        """Sets the signed_contract_attachments of this CoverSheet.

        Attachments_Signed_Contract -  Přílohy - podepsaná smlouva  # noqa: E501

        :param signed_contract_attachments: The signed_contract_attachments of this CoverSheet.  # noqa: E501
        :type: list[DocumentAttachment]
        """

        self._signed_contract_attachments = signed_contract_attachments

    @property
    def signed_contract_attachments_old(self):
        """Gets the signed_contract_attachments_old of this CoverSheet.  # noqa: E501

        Attachments_Signed_Contract -  Přílohy - podepsaná smlouva - RTF  # noqa: E501

        :return: The signed_contract_attachments_old of this CoverSheet.  # noqa: E501
        :rtype: str
        """
        return self._signed_contract_attachments_old

    @signed_contract_attachments_old.setter
    def signed_contract_attachments_old(self, signed_contract_attachments_old):
        """Sets the signed_contract_attachments_old of this CoverSheet.

        Attachments_Signed_Contract -  Přílohy - podepsaná smlouva - RTF  # noqa: E501

        :param signed_contract_attachments_old: The signed_contract_attachments_old of this CoverSheet.  # noqa: E501
        :type: str
        """

        self._signed_contract_attachments_old = signed_contract_attachments_old

    @property
    def oldcontract_scan_deliver_later(self):
        """Gets the oldcontract_scan_deliver_later of this CoverSheet.  # noqa: E501

        oldcontract_scan_deliver_later - podepsaná smlouva bude vložena později  # noqa: E501

        :return: The oldcontract_scan_deliver_later of this CoverSheet.  # noqa: E501
        :rtype: bool
        """
        return self._oldcontract_scan_deliver_later

    @oldcontract_scan_deliver_later.setter
    def oldcontract_scan_deliver_later(self, oldcontract_scan_deliver_later):
        """Sets the oldcontract_scan_deliver_later of this CoverSheet.

        oldcontract_scan_deliver_later - podepsaná smlouva bude vložena později  # noqa: E501

        :param oldcontract_scan_deliver_later: The oldcontract_scan_deliver_later of this CoverSheet.  # noqa: E501
        :type: bool
        """

        self._oldcontract_scan_deliver_later = oldcontract_scan_deliver_later

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverSheet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverSheet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
