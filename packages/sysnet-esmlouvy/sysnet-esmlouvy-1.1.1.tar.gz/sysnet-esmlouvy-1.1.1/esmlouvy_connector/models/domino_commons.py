# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DominoCommons(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'pid': 'str',
        'unid': 'str',
        'deleted': 'bool',
        'created': 'str',
        'modified': 'str',
        'authors': 'list[str]',
        'readers': 'list[str]',
        'form': 'str'
    }

    attribute_map = {
        'id': 'id',
        'pid': 'pid',
        'unid': 'unid',
        'deleted': 'deleted',
        'created': 'created',
        'modified': 'modified',
        'authors': 'authors',
        'readers': 'readers',
        'form': 'form'
    }

    def __init__(self, id=None, pid=None, unid=None, deleted=None, created=None, modified=None, authors=None, readers=None, form=None):  # noqa: E501
        """DominoCommons - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._pid = None
        self._unid = None
        self._deleted = None
        self._created = None
        self._modified = None
        self._authors = None
        self._readers = None
        self._form = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if pid is not None:
            self.pid = pid
        if unid is not None:
            self.unid = unid
        if deleted is not None:
            self.deleted = deleted
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if authors is not None:
            self.authors = authors
        if readers is not None:
            self.readers = readers
        if form is not None:
            self.form = form

    @property
    def id(self):
        """Gets the id of this DominoCommons.  # noqa: E501

        UUID dokumentu (bude generován místo PID)  # noqa: E501

        :return: The id of this DominoCommons.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DominoCommons.

        UUID dokumentu (bude generován místo PID)  # noqa: E501

        :param id: The id of this DominoCommons.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pid(self):
        """Gets the pid of this DominoCommons.  # noqa: E501

        Jednoznačný identifikátor generovaný v databázi Domino  # noqa: E501

        :return: The pid of this DominoCommons.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this DominoCommons.

        Jednoznačný identifikátor generovaný v databázi Domino  # noqa: E501

        :param pid: The pid of this DominoCommons.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def unid(self):
        """Gets the unid of this DominoCommons.  # noqa: E501

        Jednoznačný identifikátor dokumentu generovaný serverem Domino  # noqa: E501

        :return: The unid of this DominoCommons.  # noqa: E501
        :rtype: str
        """
        return self._unid

    @unid.setter
    def unid(self, unid):
        """Sets the unid of this DominoCommons.

        Jednoznačný identifikátor dokumentu generovaný serverem Domino  # noqa: E501

        :param unid: The unid of this DominoCommons.  # noqa: E501
        :type: str
        """

        self._unid = unid

    @property
    def deleted(self):
        """Gets the deleted of this DominoCommons.  # noqa: E501

        Dokument byl odstraněn  # noqa: E501

        :return: The deleted of this DominoCommons.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this DominoCommons.

        Dokument byl odstraněn  # noqa: E501

        :param deleted: The deleted of this DominoCommons.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def created(self):
        """Gets the created of this DominoCommons.  # noqa: E501

        datum a čas vytvoření dokumentu  # noqa: E501

        :return: The created of this DominoCommons.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DominoCommons.

        datum a čas vytvoření dokumentu  # noqa: E501

        :param created: The created of this DominoCommons.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this DominoCommons.  # noqa: E501

        datum a čas poslední úptavy dokumentu  # noqa: E501

        :return: The modified of this DominoCommons.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this DominoCommons.

        datum a čas poslední úptavy dokumentu  # noqa: E501

        :param modified: The modified of this DominoCommons.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def authors(self):
        """Gets the authors of this DominoCommons.  # noqa: E501

        seznam oprávněných autorů dokumentu  # noqa: E501

        :return: The authors of this DominoCommons.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this DominoCommons.

        seznam oprávněných autorů dokumentu  # noqa: E501

        :param authors: The authors of this DominoCommons.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def readers(self):
        """Gets the readers of this DominoCommons.  # noqa: E501

        seznam oprávněných ačtenářů dokumentu  # noqa: E501

        :return: The readers of this DominoCommons.  # noqa: E501
        :rtype: list[str]
        """
        return self._readers

    @readers.setter
    def readers(self, readers):
        """Sets the readers of this DominoCommons.

        seznam oprávněných ačtenářů dokumentu  # noqa: E501

        :param readers: The readers of this DominoCommons.  # noqa: E501
        :type: list[str]
        """

        self._readers = readers

    @property
    def form(self):
        """Gets the form of this DominoCommons.  # noqa: E501

        formulář Notes  # noqa: E501

        :return: The form of this DominoCommons.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this DominoCommons.

        formulář Notes  # noqa: E501

        :param form: The form of this DominoCommons.  # noqa: E501
        :type: str
        """

        self._form = form

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DominoCommons, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DominoCommons):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
