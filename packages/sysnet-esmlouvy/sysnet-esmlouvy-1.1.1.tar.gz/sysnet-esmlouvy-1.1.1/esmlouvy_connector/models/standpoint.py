# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Standpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domino': 'DominoCommons',
        'container_id': 'str',
        'parent_id': 'str',
        'parent_uuid': 'str',
        'type': 'str',
        'doc_type': 'str',
        'hide': 'str',
        'authorized': 'bool',
        'insyco': 'str',
        'draft': 'str',
        'check': 'list[str]',
        'parent_notified': 'bool',
        'status': 'str',
        'identifier': 'str',
        'identifier_contract': 'str',
        'identifier_global': 'str',
        'identifier_local': 'str',
        'creator_fullname': 'str',
        'creator_responsible': 'str',
        'reservation_number': 'str',
        'identifier_project': 'str',
        'stand': 'str',
        'note_stand': 'str',
        'attachments': 'list[DocumentAttachment]',
        'identifier_contract_new': 'str',
        'attachments_draft_contract': 'list[DocumentAttachment]',
        'stand_author': 'str',
        'stand_signature': 'str',
        'stand_date': 'date'
    }

    attribute_map = {
        'domino': 'domino',
        'container_id': 'container_id',
        'parent_id': 'parent_id',
        'parent_uuid': 'parent_uuid',
        'type': 'type',
        'doc_type': 'doc_type',
        'hide': 'hide',
        'authorized': 'authorized',
        'insyco': 'insyco',
        'draft': 'draft',
        'check': 'check',
        'parent_notified': 'parent_notified',
        'status': 'status',
        'identifier': 'identifier',
        'identifier_contract': 'identifier_contract',
        'identifier_global': 'identifier_global',
        'identifier_local': 'identifier_local',
        'creator_fullname': 'creator_fullname',
        'creator_responsible': 'creator_responsible',
        'reservation_number': 'reservation_number',
        'identifier_project': 'identifier_project',
        'stand': 'stand',
        'note_stand': 'note_stand',
        'attachments': 'attachments',
        'identifier_contract_new': 'identifier_contract_new',
        'attachments_draft_contract': 'attachments_draft_contract',
        'stand_author': 'stand_author',
        'stand_signature': 'stand_signature',
        'stand_date': 'stand_date'
    }

    def __init__(self, domino=None, container_id=None, parent_id=None, parent_uuid=None, type=None, doc_type=None, hide=None, authorized=None, insyco=None, draft=None, check=None, parent_notified=None, status=None, identifier=None, identifier_contract=None, identifier_global=None, identifier_local=None, creator_fullname=None, creator_responsible=None, reservation_number=None, identifier_project=None, stand=None, note_stand=None, attachments=None, identifier_contract_new=None, attachments_draft_contract=None, stand_author=None, stand_signature=None, stand_date=None):  # noqa: E501
        """Standpoint - a model defined in Swagger"""  # noqa: E501
        self._domino = None
        self._container_id = None
        self._parent_id = None
        self._parent_uuid = None
        self._type = None
        self._doc_type = None
        self._hide = None
        self._authorized = None
        self._insyco = None
        self._draft = None
        self._check = None
        self._parent_notified = None
        self._status = None
        self._identifier = None
        self._identifier_contract = None
        self._identifier_global = None
        self._identifier_local = None
        self._creator_fullname = None
        self._creator_responsible = None
        self._reservation_number = None
        self._identifier_project = None
        self._stand = None
        self._note_stand = None
        self._attachments = None
        self._identifier_contract_new = None
        self._attachments_draft_contract = None
        self._stand_author = None
        self._stand_signature = None
        self._stand_date = None
        self.discriminator = None
        if domino is not None:
            self.domino = domino
        if container_id is not None:
            self.container_id = container_id
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_uuid is not None:
            self.parent_uuid = parent_uuid
        if type is not None:
            self.type = type
        if doc_type is not None:
            self.doc_type = doc_type
        if hide is not None:
            self.hide = hide
        if authorized is not None:
            self.authorized = authorized
        if insyco is not None:
            self.insyco = insyco
        if draft is not None:
            self.draft = draft
        if check is not None:
            self.check = check
        if parent_notified is not None:
            self.parent_notified = parent_notified
        if status is not None:
            self.status = status
        if identifier is not None:
            self.identifier = identifier
        if identifier_contract is not None:
            self.identifier_contract = identifier_contract
        if identifier_global is not None:
            self.identifier_global = identifier_global
        if identifier_local is not None:
            self.identifier_local = identifier_local
        if creator_fullname is not None:
            self.creator_fullname = creator_fullname
        if creator_responsible is not None:
            self.creator_responsible = creator_responsible
        if reservation_number is not None:
            self.reservation_number = reservation_number
        if identifier_project is not None:
            self.identifier_project = identifier_project
        if stand is not None:
            self.stand = stand
        if note_stand is not None:
            self.note_stand = note_stand
        if attachments is not None:
            self.attachments = attachments
        if identifier_contract_new is not None:
            self.identifier_contract_new = identifier_contract_new
        if attachments_draft_contract is not None:
            self.attachments_draft_contract = attachments_draft_contract
        if stand_author is not None:
            self.stand_author = stand_author
        if stand_signature is not None:
            self.stand_signature = stand_signature
        if stand_date is not None:
            self.stand_date = stand_date

    @property
    def domino(self):
        """Gets the domino of this Standpoint.  # noqa: E501


        :return: The domino of this Standpoint.  # noqa: E501
        :rtype: DominoCommons
        """
        return self._domino

    @domino.setter
    def domino(self, domino):
        """Sets the domino of this Standpoint.


        :param domino: The domino of this Standpoint.  # noqa: E501
        :type: DominoCommons
        """

        self._domino = domino

    @property
    def container_id(self):
        """Gets the container_id of this Standpoint.  # noqa: E501

        UUID kontejneru, kam dokument patří  # noqa: E501

        :return: The container_id of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Standpoint.

        UUID kontejneru, kam dokument patří  # noqa: E501

        :param container_id: The container_id of this Standpoint.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Standpoint.  # noqa: E501

        UNID rodičovského dokument (evidenčního listu)  # noqa: E501

        :return: The parent_id of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Standpoint.

        UNID rodičovského dokument (evidenčního listu)  # noqa: E501

        :param parent_id: The parent_id of this Standpoint.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_uuid(self):
        """Gets the parent_uuid of this Standpoint.  # noqa: E501

        UUID identifikátor rodičovského dokumentu  # noqa: E501

        :return: The parent_uuid of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid):
        """Sets the parent_uuid of this Standpoint.

        UUID identifikátor rodičovského dokumentu  # noqa: E501

        :param parent_uuid: The parent_uuid of this Standpoint.  # noqa: E501
        :type: str
        """

        self._parent_uuid = parent_uuid

    @property
    def type(self):
        """Gets the type of this Standpoint.  # noqa: E501

        Typ stanoviska  # noqa: E501

        :return: The type of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Standpoint.

        Typ stanoviska  # noqa: E501

        :param type: The type of this Standpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2.1", "2.2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def doc_type(self):
        """Gets the doc_type of this Standpoint.  # noqa: E501

        DocType - typ nadřízeného dokumentu  # noqa: E501

        :return: The doc_type of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this Standpoint.

        DocType - typ nadřízeného dokumentu  # noqa: E501

        :param doc_type: The doc_type of this Standpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["coverList", "evidenceList"]  # noqa: E501
        if doc_type not in allowed_values:
            raise ValueError(
                "Invalid value for `doc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(doc_type, allowed_values)
            )

        self._doc_type = doc_type

    @property
    def hide(self):
        """Gets the hide of this Standpoint.  # noqa: E501

        Jakési pomocné pole ???  # noqa: E501

        :return: The hide of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._hide

    @hide.setter
    def hide(self, hide):
        """Sets the hide of this Standpoint.

        Jakési pomocné pole ???  # noqa: E501

        :param hide: The hide of this Standpoint.  # noqa: E501
        :type: str
        """

        self._hide = hide

    @property
    def authorized(self):
        """Gets the authorized of this Standpoint.  # noqa: E501

        Authorized - autorizační příznak ???  # noqa: E501

        :return: The authorized of this Standpoint.  # noqa: E501
        :rtype: bool
        """
        return self._authorized

    @authorized.setter
    def authorized(self, authorized):
        """Sets the authorized of this Standpoint.

        Authorized - autorizační příznak ???  # noqa: E501

        :param authorized: The authorized of this Standpoint.  # noqa: E501
        :type: bool
        """

        self._authorized = authorized

    @property
    def insyco(self):
        """Gets the insyco of this Standpoint.  # noqa: E501

        INSYCO - pravděpodobně něco historického ???  # noqa: E501

        :return: The insyco of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._insyco

    @insyco.setter
    def insyco(self, insyco):
        """Sets the insyco of this Standpoint.

        INSYCO - pravděpodobně něco historického ???  # noqa: E501

        :param insyco: The insyco of this Standpoint.  # noqa: E501
        :type: str
        """

        self._insyco = insyco

    @property
    def draft(self):
        """Gets the draft of this Standpoint.  # noqa: E501

        Něco historického ???  # noqa: E501

        :return: The draft of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Standpoint.

        Něco historického ???  # noqa: E501

        :param draft: The draft of this Standpoint.  # noqa: E501
        :type: str
        """

        self._draft = draft

    @property
    def check(self):
        """Gets the check of this Standpoint.  # noqa: E501

        Vypočítávané pole v Dominu (jména), ale může být i jinak???  # noqa: E501

        :return: The check of this Standpoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this Standpoint.

        Vypočítávané pole v Dominu (jména), ale může být i jinak???  # noqa: E501

        :param check: The check of this Standpoint.  # noqa: E501
        :type: list[str]
        """

        self._check = check

    @property
    def parent_notified(self):
        """Gets the parent_notified of this Standpoint.  # noqa: E501

        isParentNotified = \"1\" pokud je v parent docu nastaven příznak ssdr=1  # noqa: E501

        :return: The parent_notified of this Standpoint.  # noqa: E501
        :rtype: bool
        """
        return self._parent_notified

    @parent_notified.setter
    def parent_notified(self, parent_notified):
        """Sets the parent_notified of this Standpoint.

        isParentNotified = \"1\" pokud je v parent docu nastaven příznak ssdr=1  # noqa: E501

        :param parent_notified: The parent_notified of this Standpoint.  # noqa: E501
        :type: bool
        """

        self._parent_notified = parent_notified

    @property
    def status(self):
        """Gets the status of this Standpoint.  # noqa: E501

        Stav nadřízeného dokumentu ???  # noqa: E501

        :return: The status of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Standpoint.

        Stav nadřízeného dokumentu ???  # noqa: E501

        :param status: The status of this Standpoint.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def identifier(self):
        """Gets the identifier of this Standpoint.  # noqa: E501

        Identifikační číslo listu  # noqa: E501

        :return: The identifier of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Standpoint.

        Identifikační číslo listu  # noqa: E501

        :param identifier: The identifier of this Standpoint.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def identifier_contract(self):
        """Gets the identifier_contract of this Standpoint.  # noqa: E501

        Evidenční číslo (je-li již známo)  # noqa: E501

        :return: The identifier_contract of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._identifier_contract

    @identifier_contract.setter
    def identifier_contract(self, identifier_contract):
        """Sets the identifier_contract of this Standpoint.

        Evidenční číslo (je-li již známo)  # noqa: E501

        :param identifier_contract: The identifier_contract of this Standpoint.  # noqa: E501
        :type: str
        """

        self._identifier_contract = identifier_contract

    @property
    def identifier_global(self):
        """Gets the identifier_global of this Standpoint.  # noqa: E501

        Číslo jednací MŽP  # noqa: E501

        :return: The identifier_global of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._identifier_global

    @identifier_global.setter
    def identifier_global(self, identifier_global):
        """Sets the identifier_global of this Standpoint.

        Číslo jednací MŽP  # noqa: E501

        :param identifier_global: The identifier_global of this Standpoint.  # noqa: E501
        :type: str
        """

        self._identifier_global = identifier_global

    @property
    def identifier_local(self):
        """Gets the identifier_local of this Standpoint.  # noqa: E501

        Odbor - číslo  # noqa: E501

        :return: The identifier_local of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._identifier_local

    @identifier_local.setter
    def identifier_local(self, identifier_local):
        """Sets the identifier_local of this Standpoint.

        Odbor - číslo  # noqa: E501

        :param identifier_local: The identifier_local of this Standpoint.  # noqa: E501
        :type: str
        """

        self._identifier_local = identifier_local

    @property
    def creator_fullname(self):
        """Gets the creator_fullname of this Standpoint.  # noqa: E501

        Zpracovatel (jména)  # noqa: E501

        :return: The creator_fullname of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._creator_fullname

    @creator_fullname.setter
    def creator_fullname(self, creator_fullname):
        """Sets the creator_fullname of this Standpoint.

        Zpracovatel (jména)  # noqa: E501

        :param creator_fullname: The creator_fullname of this Standpoint.  # noqa: E501
        :type: str
        """

        self._creator_fullname = creator_fullname

    @property
    def creator_responsible(self):
        """Gets the creator_responsible of this Standpoint.  # noqa: E501

        Příkazce operace (jména)  # noqa: E501

        :return: The creator_responsible of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._creator_responsible

    @creator_responsible.setter
    def creator_responsible(self, creator_responsible):
        """Sets the creator_responsible of this Standpoint.

        Příkazce operace (jména)  # noqa: E501

        :param creator_responsible: The creator_responsible of this Standpoint.  # noqa: E501
        :type: str
        """

        self._creator_responsible = creator_responsible

    @property
    def reservation_number(self):
        """Gets the reservation_number of this Standpoint.  # noqa: E501

        reservationNumber - Číslo rezervace  # noqa: E501

        :return: The reservation_number of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this Standpoint.

        reservationNumber - Číslo rezervace  # noqa: E501

        :param reservation_number: The reservation_number of this Standpoint.  # noqa: E501
        :type: str
        """

        self._reservation_number = reservation_number

    @property
    def identifier_project(self):
        """Gets the identifier_project of this Standpoint.  # noqa: E501

        Vazba na programové financování - jde-li o ISPROFIN vyplnit číslo akce (13 znaků), nejde-li o ISPROFIN, nutno vyplnit číslo projektu (9 znaků)   # noqa: E501

        :return: The identifier_project of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._identifier_project

    @identifier_project.setter
    def identifier_project(self, identifier_project):
        """Sets the identifier_project of this Standpoint.

        Vazba na programové financování - jde-li o ISPROFIN vyplnit číslo akce (13 znaků), nejde-li o ISPROFIN, nutno vyplnit číslo projektu (9 znaků)   # noqa: E501

        :param identifier_project: The identifier_project of this Standpoint.  # noqa: E501
        :type: str
        """

        self._identifier_project = identifier_project

    @property
    def stand(self):
        """Gets the stand of this Standpoint.  # noqa: E501

        Mé stanovisko: Souhlasím s návrhem (1), Nesouhlasím, přepracovat (2), Definitivně zamítám návrh (0)   # noqa: E501

        :return: The stand of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._stand

    @stand.setter
    def stand(self, stand):
        """Sets the stand of this Standpoint.

        Mé stanovisko: Souhlasím s návrhem (1), Nesouhlasím, přepracovat (2), Definitivně zamítám návrh (0)   # noqa: E501

        :param stand: The stand of this Standpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2"]  # noqa: E501
        if stand not in allowed_values:
            raise ValueError(
                "Invalid value for `stand` ({0}), must be one of {1}"  # noqa: E501
                .format(stand, allowed_values)
            )

        self._stand = stand

    @property
    def note_stand(self):
        """Gets the note_stand of this Standpoint.  # noqa: E501

        Poznámka ke stanovisku - RTF pole !!!  # noqa: E501

        :return: The note_stand of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._note_stand

    @note_stand.setter
    def note_stand(self, note_stand):
        """Sets the note_stand of this Standpoint.

        Poznámka ke stanovisku - RTF pole !!!  # noqa: E501

        :param note_stand: The note_stand of this Standpoint.  # noqa: E501
        :type: str
        """

        self._note_stand = note_stand

    @property
    def attachments(self):
        """Gets the attachments of this Standpoint.  # noqa: E501

        Souborové přílohy  # noqa: E501

        :return: The attachments of this Standpoint.  # noqa: E501
        :rtype: list[DocumentAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Standpoint.

        Souborové přílohy  # noqa: E501

        :param attachments: The attachments of this Standpoint.  # noqa: E501
        :type: list[DocumentAttachment]
        """

        self._attachments = attachments

    @property
    def identifier_contract_new(self):
        """Gets the identifier_contract_new of this Standpoint.  # noqa: E501

        Číslo smlouvy  # noqa: E501

        :return: The identifier_contract_new of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._identifier_contract_new

    @identifier_contract_new.setter
    def identifier_contract_new(self, identifier_contract_new):
        """Sets the identifier_contract_new of this Standpoint.

        Číslo smlouvy  # noqa: E501

        :param identifier_contract_new: The identifier_contract_new of this Standpoint.  # noqa: E501
        :type: str
        """

        self._identifier_contract_new = identifier_contract_new

    @property
    def attachments_draft_contract(self):
        """Gets the attachments_draft_contract of this Standpoint.  # noqa: E501

        Attachments_Draft_Contract - Přílohy - návrh smlouvy nebo dodatku  # noqa: E501

        :return: The attachments_draft_contract of this Standpoint.  # noqa: E501
        :rtype: list[DocumentAttachment]
        """
        return self._attachments_draft_contract

    @attachments_draft_contract.setter
    def attachments_draft_contract(self, attachments_draft_contract):
        """Sets the attachments_draft_contract of this Standpoint.

        Attachments_Draft_Contract - Přílohy - návrh smlouvy nebo dodatku  # noqa: E501

        :param attachments_draft_contract: The attachments_draft_contract of this Standpoint.  # noqa: E501
        :type: list[DocumentAttachment]
        """

        self._attachments_draft_contract = attachments_draft_contract

    @property
    def stand_author(self):
        """Gets the stand_author of this Standpoint.  # noqa: E501

        Jméno autora  # noqa: E501

        :return: The stand_author of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._stand_author

    @stand_author.setter
    def stand_author(self, stand_author):
        """Sets the stand_author of this Standpoint.

        Jméno autora  # noqa: E501

        :param stand_author: The stand_author of this Standpoint.  # noqa: E501
        :type: str
        """

        self._stand_author = stand_author

    @property
    def stand_signature(self):
        """Gets the stand_signature of this Standpoint.  # noqa: E501

        Podpis autora  # noqa: E501

        :return: The stand_signature of this Standpoint.  # noqa: E501
        :rtype: str
        """
        return self._stand_signature

    @stand_signature.setter
    def stand_signature(self, stand_signature):
        """Sets the stand_signature of this Standpoint.

        Podpis autora  # noqa: E501

        :param stand_signature: The stand_signature of this Standpoint.  # noqa: E501
        :type: str
        """

        self._stand_signature = stand_signature

    @property
    def stand_date(self):
        """Gets the stand_date of this Standpoint.  # noqa: E501

        datum vydání  # noqa: E501

        :return: The stand_date of this Standpoint.  # noqa: E501
        :rtype: date
        """
        return self._stand_date

    @stand_date.setter
    def stand_date(self, stand_date):
        """Sets the stand_date of this Standpoint.

        datum vydání  # noqa: E501

        :param stand_date: The stand_date of this Standpoint.  # noqa: E501
        :type: date
        """

        self._stand_date = stand_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Standpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Standpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
