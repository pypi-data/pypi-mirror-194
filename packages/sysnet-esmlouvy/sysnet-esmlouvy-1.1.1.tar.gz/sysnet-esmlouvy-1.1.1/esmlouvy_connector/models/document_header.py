# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'identifier_contract': 'str',
        'identifier_contract_new': 'str',
        'identifier_contract_old': 'str',
        'identifier_global': 'str',
        'identifier_local': 'str',
        'creator_name': 'str',
        'creator_responsible_name': 'str',
        'deputy_responsible_name': 'str',
        'director_general_name': 'str',
        'reservation_number': 'str',
        'identifier_project': 'list[str]',
        'confirmed_id': 'bool'
    }

    attribute_map = {
        'identifier': 'identifier',
        'identifier_contract': 'identifier_contract',
        'identifier_contract_new': 'identifier_contract_new',
        'identifier_contract_old': 'identifier_contract_old',
        'identifier_global': 'identifier_global',
        'identifier_local': 'identifier_local',
        'creator_name': 'creator_name',
        'creator_responsible_name': 'creator_responsible_name',
        'deputy_responsible_name': 'deputy_responsible_name',
        'director_general_name': 'director_general_name',
        'reservation_number': 'reservation_number',
        'identifier_project': 'identifier_project',
        'confirmed_id': 'confirmed_id'
    }

    def __init__(self, identifier=None, identifier_contract=None, identifier_contract_new=None, identifier_contract_old=None, identifier_global=None, identifier_local=None, creator_name=None, creator_responsible_name=None, deputy_responsible_name=None, director_general_name=None, reservation_number=None, identifier_project=None, confirmed_id=None):  # noqa: E501
        """DocumentHeader - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._identifier_contract = None
        self._identifier_contract_new = None
        self._identifier_contract_old = None
        self._identifier_global = None
        self._identifier_local = None
        self._creator_name = None
        self._creator_responsible_name = None
        self._deputy_responsible_name = None
        self._director_general_name = None
        self._reservation_number = None
        self._identifier_project = None
        self._confirmed_id = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if identifier_contract is not None:
            self.identifier_contract = identifier_contract
        if identifier_contract_new is not None:
            self.identifier_contract_new = identifier_contract_new
        if identifier_contract_old is not None:
            self.identifier_contract_old = identifier_contract_old
        if identifier_global is not None:
            self.identifier_global = identifier_global
        if identifier_local is not None:
            self.identifier_local = identifier_local
        if creator_name is not None:
            self.creator_name = creator_name
        if creator_responsible_name is not None:
            self.creator_responsible_name = creator_responsible_name
        if deputy_responsible_name is not None:
            self.deputy_responsible_name = deputy_responsible_name
        if director_general_name is not None:
            self.director_general_name = director_general_name
        if reservation_number is not None:
            self.reservation_number = reservation_number
        if identifier_project is not None:
            self.identifier_project = identifier_project
        if confirmed_id is not None:
            self.confirmed_id = confirmed_id

    @property
    def identifier(self):
        """Gets the identifier of this DocumentHeader.  # noqa: E501

        Identifikační číslo listu  # noqa: E501

        :return: The identifier of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DocumentHeader.

        Identifikační číslo listu  # noqa: E501

        :param identifier: The identifier of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def identifier_contract(self):
        """Gets the identifier_contract of this DocumentHeader.  # noqa: E501

        identifier_contract  Evidenční číslo  # noqa: E501

        :return: The identifier_contract of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier_contract

    @identifier_contract.setter
    def identifier_contract(self, identifier_contract):
        """Sets the identifier_contract of this DocumentHeader.

        identifier_contract  Evidenční číslo  # noqa: E501

        :param identifier_contract: The identifier_contract of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._identifier_contract = identifier_contract

    @property
    def identifier_contract_new(self):
        """Gets the identifier_contract_new of this DocumentHeader.  # noqa: E501

        identifier_contract_new  Nové číslo smlouvy  # noqa: E501

        :return: The identifier_contract_new of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier_contract_new

    @identifier_contract_new.setter
    def identifier_contract_new(self, identifier_contract_new):
        """Sets the identifier_contract_new of this DocumentHeader.

        identifier_contract_new  Nové číslo smlouvy  # noqa: E501

        :param identifier_contract_new: The identifier_contract_new of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._identifier_contract_new = identifier_contract_new

    @property
    def identifier_contract_old(self):
        """Gets the identifier_contract_old of this DocumentHeader.  # noqa: E501

        identifier_oldContract  Staré evidenční číslo  # noqa: E501

        :return: The identifier_contract_old of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier_contract_old

    @identifier_contract_old.setter
    def identifier_contract_old(self, identifier_contract_old):
        """Sets the identifier_contract_old of this DocumentHeader.

        identifier_oldContract  Staré evidenční číslo  # noqa: E501

        :param identifier_contract_old: The identifier_contract_old of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._identifier_contract_old = identifier_contract_old

    @property
    def identifier_global(self):
        """Gets the identifier_global of this DocumentHeader.  # noqa: E501

        identifier_global  Číslo jednací MŽP  # noqa: E501

        :return: The identifier_global of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier_global

    @identifier_global.setter
    def identifier_global(self, identifier_global):
        """Sets the identifier_global of this DocumentHeader.

        identifier_global  Číslo jednací MŽP  # noqa: E501

        :param identifier_global: The identifier_global of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._identifier_global = identifier_global

    @property
    def identifier_local(self):
        """Gets the identifier_local of this DocumentHeader.  # noqa: E501

        identifier_local  Odbor - číslo  # noqa: E501

        :return: The identifier_local of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier_local

    @identifier_local.setter
    def identifier_local(self, identifier_local):
        """Sets the identifier_local of this DocumentHeader.

        identifier_local  Odbor - číslo  # noqa: E501

        :param identifier_local: The identifier_local of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._identifier_local = identifier_local

    @property
    def creator_name(self):
        """Gets the creator_name of this DocumentHeader.  # noqa: E501

        creator_fullname  (jméno) Zpracovatel  # noqa: E501

        :return: The creator_name of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this DocumentHeader.

        creator_fullname  (jméno) Zpracovatel  # noqa: E501

        :param creator_name: The creator_name of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def creator_responsible_name(self):
        """Gets the creator_responsible_name of this DocumentHeader.  # noqa: E501

        creator_responsible  (jméno) Příkazce operace  # noqa: E501

        :return: The creator_responsible_name of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._creator_responsible_name

    @creator_responsible_name.setter
    def creator_responsible_name(self, creator_responsible_name):
        """Sets the creator_responsible_name of this DocumentHeader.

        creator_responsible  (jméno) Příkazce operace  # noqa: E501

        :param creator_responsible_name: The creator_responsible_name of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._creator_responsible_name = creator_responsible_name

    @property
    def deputy_responsible_name(self):
        """Gets the deputy_responsible_name of this DocumentHeader.  # noqa: E501

        deputy_responsible  (jméno) Zástupce příkazce operace  # noqa: E501

        :return: The deputy_responsible_name of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._deputy_responsible_name

    @deputy_responsible_name.setter
    def deputy_responsible_name(self, deputy_responsible_name):
        """Sets the deputy_responsible_name of this DocumentHeader.

        deputy_responsible  (jméno) Zástupce příkazce operace  # noqa: E501

        :param deputy_responsible_name: The deputy_responsible_name of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._deputy_responsible_name = deputy_responsible_name

    @property
    def director_general_name(self):
        """Gets the director_general_name of this DocumentHeader.  # noqa: E501

        director_general  (jméno) Vrchní ředitel  # noqa: E501

        :return: The director_general_name of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._director_general_name

    @director_general_name.setter
    def director_general_name(self, director_general_name):
        """Sets the director_general_name of this DocumentHeader.

        director_general  (jméno) Vrchní ředitel  # noqa: E501

        :param director_general_name: The director_general_name of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._director_general_name = director_general_name

    @property
    def reservation_number(self):
        """Gets the reservation_number of this DocumentHeader.  # noqa: E501

        reservationNumber  Číslo rezervace  # noqa: E501

        :return: The reservation_number of this DocumentHeader.  # noqa: E501
        :rtype: str
        """
        return self._reservation_number

    @reservation_number.setter
    def reservation_number(self, reservation_number):
        """Sets the reservation_number of this DocumentHeader.

        reservationNumber  Číslo rezervace  # noqa: E501

        :param reservation_number: The reservation_number of this DocumentHeader.  # noqa: E501
        :type: str
        """

        self._reservation_number = reservation_number

    @property
    def identifier_project(self):
        """Gets the identifier_project of this DocumentHeader.  # noqa: E501

        identifier_project  Vazba na programové financování - jde-li o ISPROFIN vyplnit číslo akce (13 znaků), nejde-li o ISPROFIN, nutno vyplnit číslo projektu (9 znaků)|   # noqa: E501

        :return: The identifier_project of this DocumentHeader.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifier_project

    @identifier_project.setter
    def identifier_project(self, identifier_project):
        """Sets the identifier_project of this DocumentHeader.

        identifier_project  Vazba na programové financování - jde-li o ISPROFIN vyplnit číslo akce (13 znaků), nejde-li o ISPROFIN, nutno vyplnit číslo projektu (9 znaků)|   # noqa: E501

        :param identifier_project: The identifier_project of this DocumentHeader.  # noqa: E501
        :type: list[str]
        """

        self._identifier_project = identifier_project

    @property
    def confirmed_id(self):
        """Gets the confirmed_id of this DocumentHeader.  # noqa: E501

        CONFIRMEDID - nastavuje se po importu Kl z CSV  # noqa: E501

        :return: The confirmed_id of this DocumentHeader.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed_id

    @confirmed_id.setter
    def confirmed_id(self, confirmed_id):
        """Sets the confirmed_id of this DocumentHeader.

        CONFIRMEDID - nastavuje se po importu Kl z CSV  # noqa: E501

        :param confirmed_id: The confirmed_id of this DocumentHeader.  # noqa: E501
        :type: bool
        """

        self._confirmed_id = confirmed_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
