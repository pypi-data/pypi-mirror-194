# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseDominoDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domino': 'DominoCommons',
        'hidden': 'DocumentHidden',
        'acl': 'DocumentAcl',
        'header': 'DocumentHeader'
    }

    attribute_map = {
        'domino': 'domino',
        'hidden': 'hidden',
        'acl': 'acl',
        'header': 'header'
    }

    def __init__(self, domino=None, hidden=None, acl=None, header=None):  # noqa: E501
        """BaseDominoDocument - a model defined in Swagger"""  # noqa: E501
        self._domino = None
        self._hidden = None
        self._acl = None
        self._header = None
        self.discriminator = None
        if domino is not None:
            self.domino = domino
        if hidden is not None:
            self.hidden = hidden
        if acl is not None:
            self.acl = acl
        if header is not None:
            self.header = header

    @property
    def domino(self):
        """Gets the domino of this BaseDominoDocument.  # noqa: E501


        :return: The domino of this BaseDominoDocument.  # noqa: E501
        :rtype: DominoCommons
        """
        return self._domino

    @domino.setter
    def domino(self, domino):
        """Sets the domino of this BaseDominoDocument.


        :param domino: The domino of this BaseDominoDocument.  # noqa: E501
        :type: DominoCommons
        """

        self._domino = domino

    @property
    def hidden(self):
        """Gets the hidden of this BaseDominoDocument.  # noqa: E501


        :return: The hidden of this BaseDominoDocument.  # noqa: E501
        :rtype: DocumentHidden
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this BaseDominoDocument.


        :param hidden: The hidden of this BaseDominoDocument.  # noqa: E501
        :type: DocumentHidden
        """

        self._hidden = hidden

    @property
    def acl(self):
        """Gets the acl of this BaseDominoDocument.  # noqa: E501


        :return: The acl of this BaseDominoDocument.  # noqa: E501
        :rtype: DocumentAcl
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this BaseDominoDocument.


        :param acl: The acl of this BaseDominoDocument.  # noqa: E501
        :type: DocumentAcl
        """

        self._acl = acl

    @property
    def header(self):
        """Gets the header of this BaseDominoDocument.  # noqa: E501


        :return: The header of this BaseDominoDocument.  # noqa: E501
        :rtype: DocumentHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this BaseDominoDocument.


        :param header: The header of this BaseDominoDocument.  # noqa: E501
        :type: DocumentHeader
        """

        self._header = header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseDominoDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseDominoDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
