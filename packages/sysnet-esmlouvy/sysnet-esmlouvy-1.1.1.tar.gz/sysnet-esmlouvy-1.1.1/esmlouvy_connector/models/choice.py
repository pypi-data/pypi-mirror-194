# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Choice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emarket': 'bool',
        'emarket_id': 'str',
        'ovz': 'bool',
        'vzmr': 'bool',
        'minister_exception': 'bool'
    }

    attribute_map = {
        'emarket': 'emarket',
        'emarket_id': 'emarket_id',
        'ovz': 'ovz',
        'vzmr': 'vzmr',
        'minister_exception': 'minister_exception'
    }

    def __init__(self, emarket=None, emarket_id=None, ovz=None, vzmr=None, minister_exception=None):  # noqa: E501
        """Choice - a model defined in Swagger"""  # noqa: E501
        self._emarket = None
        self._emarket_id = None
        self._ovz = None
        self._vzmr = None
        self._minister_exception = None
        self.discriminator = None
        if emarket is not None:
            self.emarket = emarket
        if emarket_id is not None:
            self.emarket_id = emarket_id
        if ovz is not None:
            self.ovz = ovz
        if vzmr is not None:
            self.vzmr = vzmr
        if minister_exception is not None:
            self.minister_exception = minister_exception

    @property
    def emarket(self):
        """Gets the emarket of this Choice.  # noqa: E501

        choice_company_emarket - Elektronické tržiště (ET)  # noqa: E501

        :return: The emarket of this Choice.  # noqa: E501
        :rtype: bool
        """
        return self._emarket

    @emarket.setter
    def emarket(self, emarket):
        """Sets the emarket of this Choice.

        choice_company_emarket - Elektronické tržiště (ET)  # noqa: E501

        :param emarket: The emarket of this Choice.  # noqa: E501
        :type: bool
        """

        self._emarket = emarket

    @property
    def emarket_id(self):
        """Gets the emarket_id of this Choice.  # noqa: E501

        choice_company_emarket_id - Identifikátor záznamu v ET  # noqa: E501

        :return: The emarket_id of this Choice.  # noqa: E501
        :rtype: str
        """
        return self._emarket_id

    @emarket_id.setter
    def emarket_id(self, emarket_id):
        """Sets the emarket_id of this Choice.

        choice_company_emarket_id - Identifikátor záznamu v ET  # noqa: E501

        :param emarket_id: The emarket_id of this Choice.  # noqa: E501
        :type: str
        """

        self._emarket_id = emarket_id

    @property
    def ovz(self):
        """Gets the ovz of this Choice.  # noqa: E501

        choice_company_ovz - Prostřednictvím OVZ  # noqa: E501

        :return: The ovz of this Choice.  # noqa: E501
        :rtype: bool
        """
        return self._ovz

    @ovz.setter
    def ovz(self, ovz):
        """Sets the ovz of this Choice.

        choice_company_ovz - Prostřednictvím OVZ  # noqa: E501

        :param ovz: The ovz of this Choice.  # noqa: E501
        :type: bool
        """

        self._ovz = ovz

    @property
    def vzmr(self):
        """Gets the vzmr of this Choice.  # noqa: E501

        choice_vzmr - VZMR II. kategorie: Protokol o výběru nejvýhodnější nabídky  # noqa: E501

        :return: The vzmr of this Choice.  # noqa: E501
        :rtype: bool
        """
        return self._vzmr

    @vzmr.setter
    def vzmr(self, vzmr):
        """Sets the vzmr of this Choice.

        choice_vzmr - VZMR II. kategorie: Protokol o výběru nejvýhodnější nabídky  # noqa: E501

        :param vzmr: The vzmr of this Choice.  # noqa: E501
        :type: bool
        """

        self._vzmr = vzmr

    @property
    def minister_exception(self):
        """Gets the minister_exception of this Choice.  # noqa: E501

        choice_minister_exception - Výjimka ministra   # noqa: E501

        :return: The minister_exception of this Choice.  # noqa: E501
        :rtype: bool
        """
        return self._minister_exception

    @minister_exception.setter
    def minister_exception(self, minister_exception):
        """Sets the minister_exception of this Choice.

        choice_minister_exception - Výjimka ministra   # noqa: E501

        :param minister_exception: The minister_exception of this Choice.  # noqa: E501
        :type: bool
        """

        self._minister_exception = minister_exception

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Choice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Choice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
