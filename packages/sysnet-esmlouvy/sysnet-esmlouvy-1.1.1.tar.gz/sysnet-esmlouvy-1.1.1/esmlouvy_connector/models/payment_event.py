# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domino': 'DominoCommons',
        'container_id': 'str',
        'parent_id': 'str',
        'parent_uuid': 'str',
        'department': 'str',
        'contract_type': 'str',
        'description': 'str',
        'bank_account': 'str',
        'sum': 'float',
        'budget_category': 'str',
        'startdate': 'date',
        'enddate': 'date',
        'isprofin': 'str',
        'purpose': 'str',
        'source': 'str'
    }

    attribute_map = {
        'domino': 'domino',
        'container_id': 'container_id',
        'parent_id': 'parent_id',
        'parent_uuid': 'parent_uuid',
        'department': 'department',
        'contract_type': 'contract_type',
        'description': 'description',
        'bank_account': 'bank_account',
        'sum': 'sum',
        'budget_category': 'budget_category',
        'startdate': 'startdate',
        'enddate': 'enddate',
        'isprofin': 'isprofin',
        'purpose': 'purpose',
        'source': 'source'
    }

    def __init__(self, domino=None, container_id=None, parent_id=None, parent_uuid=None, department=None, contract_type=None, description=None, bank_account=None, sum=None, budget_category=None, startdate=None, enddate=None, isprofin=None, purpose=None, source=None):  # noqa: E501
        """PaymentEvent - a model defined in Swagger"""  # noqa: E501
        self._domino = None
        self._container_id = None
        self._parent_id = None
        self._parent_uuid = None
        self._department = None
        self._contract_type = None
        self._description = None
        self._bank_account = None
        self._sum = None
        self._budget_category = None
        self._startdate = None
        self._enddate = None
        self._isprofin = None
        self._purpose = None
        self._source = None
        self.discriminator = None
        if domino is not None:
            self.domino = domino
        if container_id is not None:
            self.container_id = container_id
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_uuid is not None:
            self.parent_uuid = parent_uuid
        if department is not None:
            self.department = department
        if contract_type is not None:
            self.contract_type = contract_type
        if description is not None:
            self.description = description
        if bank_account is not None:
            self.bank_account = bank_account
        if sum is not None:
            self.sum = sum
        if budget_category is not None:
            self.budget_category = budget_category
        if startdate is not None:
            self.startdate = startdate
        if enddate is not None:
            self.enddate = enddate
        if isprofin is not None:
            self.isprofin = isprofin
        if purpose is not None:
            self.purpose = purpose
        if source is not None:
            self.source = source

    @property
    def domino(self):
        """Gets the domino of this PaymentEvent.  # noqa: E501


        :return: The domino of this PaymentEvent.  # noqa: E501
        :rtype: DominoCommons
        """
        return self._domino

    @domino.setter
    def domino(self, domino):
        """Sets the domino of this PaymentEvent.


        :param domino: The domino of this PaymentEvent.  # noqa: E501
        :type: DominoCommons
        """

        self._domino = domino

    @property
    def container_id(self):
        """Gets the container_id of this PaymentEvent.  # noqa: E501

        UUID kontejneru, kam dokument patří  # noqa: E501

        :return: The container_id of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this PaymentEvent.

        UUID kontejneru, kam dokument patří  # noqa: E501

        :param container_id: The container_id of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def parent_id(self):
        """Gets the parent_id of this PaymentEvent.  # noqa: E501

        UNID rodičovského dokument (evidenčního listu)  # noqa: E501

        :return: The parent_id of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this PaymentEvent.

        UNID rodičovského dokument (evidenčního listu)  # noqa: E501

        :param parent_id: The parent_id of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_uuid(self):
        """Gets the parent_uuid of this PaymentEvent.  # noqa: E501

        UUID identifikátor rodičovského dokumentu  # noqa: E501

        :return: The parent_uuid of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid):
        """Sets the parent_uuid of this PaymentEvent.

        UUID identifikátor rodičovského dokumentu  # noqa: E501

        :param parent_uuid: The parent_uuid of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._parent_uuid = parent_uuid

    @property
    def department(self):
        """Gets the department of this PaymentEvent.  # noqa: E501


        :return: The department of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this PaymentEvent.


        :param department: The department of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def contract_type(self):
        """Gets the contract_type of this PaymentEvent.  # noqa: E501


        :return: The contract_type of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this PaymentEvent.


        :param contract_type: The contract_type of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._contract_type = contract_type

    @property
    def description(self):
        """Gets the description of this PaymentEvent.  # noqa: E501

        item_description - popis  # noqa: E501

        :return: The description of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentEvent.

        item_description - popis  # noqa: E501

        :param description: The description of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def bank_account(self):
        """Gets the bank_account of this PaymentEvent.  # noqa: E501

        item_bank_account - financování z účtu  # noqa: E501

        :return: The bank_account of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this PaymentEvent.

        item_bank_account - financování z účtu  # noqa: E501

        :param bank_account: The bank_account of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._bank_account = bank_account

    @property
    def sum(self):
        """Gets the sum of this PaymentEvent.  # noqa: E501

        item_sum - cena celkem v Kč vč. DPH  # noqa: E501

        :return: The sum of this PaymentEvent.  # noqa: E501
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this PaymentEvent.

        item_sum - cena celkem v Kč vč. DPH  # noqa: E501

        :param sum: The sum of this PaymentEvent.  # noqa: E501
        :type: float
        """

        self._sum = sum

    @property
    def budget_category(self):
        """Gets the budget_category of this PaymentEvent.  # noqa: E501

        item_budget_category - rozpočtové zařazení  # noqa: E501

        :return: The budget_category of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._budget_category

    @budget_category.setter
    def budget_category(self, budget_category):
        """Sets the budget_category of this PaymentEvent.

        item_budget_category - rozpočtové zařazení  # noqa: E501

        :param budget_category: The budget_category of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._budget_category = budget_category

    @property
    def startdate(self):
        """Gets the startdate of this PaymentEvent.  # noqa: E501

        item_startdate - počátek  # noqa: E501

        :return: The startdate of this PaymentEvent.  # noqa: E501
        :rtype: date
        """
        return self._startdate

    @startdate.setter
    def startdate(self, startdate):
        """Sets the startdate of this PaymentEvent.

        item_startdate - počátek  # noqa: E501

        :param startdate: The startdate of this PaymentEvent.  # noqa: E501
        :type: date
        """

        self._startdate = startdate

    @property
    def enddate(self):
        """Gets the enddate of this PaymentEvent.  # noqa: E501

        item_finishdate - ukončení  # noqa: E501

        :return: The enddate of this PaymentEvent.  # noqa: E501
        :rtype: date
        """
        return self._enddate

    @enddate.setter
    def enddate(self, enddate):
        """Sets the enddate of this PaymentEvent.

        item_finishdate - ukončení  # noqa: E501

        :param enddate: The enddate of this PaymentEvent.  # noqa: E501
        :type: date
        """

        self._enddate = enddate

    @property
    def isprofin(self):
        """Gets the isprofin of this PaymentEvent.  # noqa: E501

        item_isprofin - ISPROFIN/Projekt  # noqa: E501

        :return: The isprofin of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._isprofin

    @isprofin.setter
    def isprofin(self, isprofin):
        """Sets the isprofin of this PaymentEvent.

        item_isprofin - ISPROFIN/Projekt  # noqa: E501

        :param isprofin: The isprofin of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._isprofin = isprofin

    @property
    def purpose(self):
        """Gets the purpose of this PaymentEvent.  # noqa: E501

        item_purpose - účel  # noqa: E501

        :return: The purpose of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this PaymentEvent.

        item_purpose - účel  # noqa: E501

        :param purpose: The purpose of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def source(self):
        """Gets the source of this PaymentEvent.  # noqa: E501

        item_source - zdroj  # noqa: E501

        :return: The source of this PaymentEvent.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PaymentEvent.

        item_source - zdroj  # noqa: E501

        :param source: The source of this PaymentEvent.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
