# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ico': 'str',
        'ico_exception': 'bool',
        'bank_account': 'str',
        'name': 'str',
        'representative': 'str',
        'vat_payer': 'bool',
        'address': 'Address'
    }

    attribute_map = {
        'ico': 'ico',
        'ico_exception': 'ico_exception',
        'bank_account': 'bank_account',
        'name': 'name',
        'representative': 'representative',
        'vat_payer': 'vat_payer',
        'address': 'address'
    }

    def __init__(self, ico=None, ico_exception=None, bank_account=None, name=None, representative=None, vat_payer=None, address=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        self._ico = None
        self._ico_exception = None
        self._bank_account = None
        self._name = None
        self._representative = None
        self._vat_payer = None
        self._address = None
        self.discriminator = None
        if ico is not None:
            self.ico = ico
        if ico_exception is not None:
            self.ico_exception = ico_exception
        if bank_account is not None:
            self.bank_account = bank_account
        if name is not None:
            self.name = name
        if representative is not None:
            self.representative = representative
        if vat_payer is not None:
            self.vat_payer = vat_payer
        if address is not None:
            self.address = address

    @property
    def ico(self):
        """Gets the ico of this Company.  # noqa: E501

        contractor_ID - IČ/RČ  # noqa: E501

        :return: The ico of this Company.  # noqa: E501
        :rtype: str
        """
        return self._ico

    @ico.setter
    def ico(self, ico):
        """Sets the ico of this Company.

        contractor_ID - IČ/RČ  # noqa: E501

        :param ico: The ico of this Company.  # noqa: E501
        :type: str
        """

        self._ico = ico

    @property
    def ico_exception(self):
        """Gets the ico_exception of this Company.  # noqa: E501

        ID_exception - Výjimka ???  # noqa: E501

        :return: The ico_exception of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._ico_exception

    @ico_exception.setter
    def ico_exception(self, ico_exception):
        """Sets the ico_exception of this Company.

        ID_exception - Výjimka ???  # noqa: E501

        :param ico_exception: The ico_exception of this Company.  # noqa: E501
        :type: bool
        """

        self._ico_exception = ico_exception

    @property
    def bank_account(self):
        """Gets the bank_account of this Company.  # noqa: E501

        contractor_bank_account - Číslo účtu  # noqa: E501

        :return: The bank_account of this Company.  # noqa: E501
        :rtype: str
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this Company.

        contractor_bank_account - Číslo účtu  # noqa: E501

        :param bank_account: The bank_account of this Company.  # noqa: E501
        :type: str
        """

        self._bank_account = bank_account

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501

        contractor_company - Obchodní název firmy  # noqa: E501

        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        contractor_company - Obchodní název firmy  # noqa: E501

        :param name: The name of this Company.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def representative(self):
        """Gets the representative of this Company.  # noqa: E501

        contractor_fullname - Statutarní orgán  # noqa: E501

        :return: The representative of this Company.  # noqa: E501
        :rtype: str
        """
        return self._representative

    @representative.setter
    def representative(self, representative):
        """Sets the representative of this Company.

        contractor_fullname - Statutarní orgán  # noqa: E501

        :param representative: The representative of this Company.  # noqa: E501
        :type: str
        """

        self._representative = representative

    @property
    def vat_payer(self):
        """Gets the vat_payer of this Company.  # noqa: E501

        contractor_VAT_payer - plátce DPH (původně NENÍ plátce DPH)  # noqa: E501

        :return: The vat_payer of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._vat_payer

    @vat_payer.setter
    def vat_payer(self, vat_payer):
        """Sets the vat_payer of this Company.

        contractor_VAT_payer - plátce DPH (původně NENÍ plátce DPH)  # noqa: E501

        :param vat_payer: The vat_payer of this Company.  # noqa: E501
        :type: bool
        """

        self._vat_payer = vat_payer

    @property
    def address(self):
        """Gets the address of this Company.  # noqa: E501


        :return: The address of this Company.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Company.


        :param address: The address of this Company.  # noqa: E501
        :type: Address
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
