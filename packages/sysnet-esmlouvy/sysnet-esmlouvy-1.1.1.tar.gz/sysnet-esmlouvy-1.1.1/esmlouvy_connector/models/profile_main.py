# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileMain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domino': 'DominoCommons',
        'version': 'str',
        'database_type': 'str',
        'vat': 'str',
        'insyco_xml_file': 'str',
        'maximal_size_mb': 'str',
        'item_bank_account_list': 'list[str]',
        'item_bank_account_default': 'str',
        'avizo_1': 'str',
        'avizo_2': 'str',
        'avizo_3': 'str',
        'avizo_4': 'str',
        'avizo_5': 'str',
        'avizo_6': 'str',
        'avizo_7': 'str',
        'evidence_status_shortcut_list': 'list[str]',
        'evidence_status_list': 'list[str]',
        'cover_status_shortcut_list': 'list[str]',
        'cover_status_list': 'list[str]',
        'fields_to_log_list': 'list[str]',
        'bcc_list': 'list[str]',
        'budget_department_head': 'str',
        'alpha_help_path_list': 'list[str]',
        'ghoul_help_path_list': 'list[str]',
        'profile_db_pub_list': 'list[str]',
        'info_db_alpha_list': 'list[str]',
        'info_db_ghoul_list': 'list[str]'
    }

    attribute_map = {
        'domino': 'domino',
        'version': 'version',
        'database_type': 'database_type',
        'vat': 'vat',
        'insyco_xml_file': 'insyco_xml_file',
        'maximal_size_mb': 'maximal_size_mb',
        'item_bank_account_list': 'item_bank_account_list',
        'item_bank_account_default': 'item_bank_account_default',
        'avizo_1': 'avizo_1',
        'avizo_2': 'avizo_2',
        'avizo_3': 'avizo_3',
        'avizo_4': 'avizo_4',
        'avizo_5': 'avizo_5',
        'avizo_6': 'avizo_6',
        'avizo_7': 'avizo_7',
        'evidence_status_shortcut_list': 'evidence_status_shortcut_list',
        'evidence_status_list': 'evidence_status_list',
        'cover_status_shortcut_list': 'cover_status_shortcut_list',
        'cover_status_list': 'cover_status_list',
        'fields_to_log_list': 'fields_to_log_list',
        'bcc_list': 'bcc_list',
        'budget_department_head': 'budget_department_head',
        'alpha_help_path_list': 'alpha_help_path_list',
        'ghoul_help_path_list': 'ghoul_help_path_list',
        'profile_db_pub_list': 'profile_db_pub_list',
        'info_db_alpha_list': 'info_db_alpha_list',
        'info_db_ghoul_list': 'info_db_ghoul_list'
    }

    def __init__(self, domino=None, version=None, database_type=None, vat=None, insyco_xml_file=None, maximal_size_mb=None, item_bank_account_list=None, item_bank_account_default=None, avizo_1=None, avizo_2=None, avizo_3=None, avizo_4=None, avizo_5=None, avizo_6=None, avizo_7=None, evidence_status_shortcut_list=None, evidence_status_list=None, cover_status_shortcut_list=None, cover_status_list=None, fields_to_log_list=None, bcc_list=None, budget_department_head=None, alpha_help_path_list=None, ghoul_help_path_list=None, profile_db_pub_list=None, info_db_alpha_list=None, info_db_ghoul_list=None):  # noqa: E501
        """ProfileMain - a model defined in Swagger"""  # noqa: E501
        self._domino = None
        self._version = None
        self._database_type = None
        self._vat = None
        self._insyco_xml_file = None
        self._maximal_size_mb = None
        self._item_bank_account_list = None
        self._item_bank_account_default = None
        self._avizo_1 = None
        self._avizo_2 = None
        self._avizo_3 = None
        self._avizo_4 = None
        self._avizo_5 = None
        self._avizo_6 = None
        self._avizo_7 = None
        self._evidence_status_shortcut_list = None
        self._evidence_status_list = None
        self._cover_status_shortcut_list = None
        self._cover_status_list = None
        self._fields_to_log_list = None
        self._bcc_list = None
        self._budget_department_head = None
        self._alpha_help_path_list = None
        self._ghoul_help_path_list = None
        self._profile_db_pub_list = None
        self._info_db_alpha_list = None
        self._info_db_ghoul_list = None
        self.discriminator = None
        if domino is not None:
            self.domino = domino
        if version is not None:
            self.version = version
        if database_type is not None:
            self.database_type = database_type
        if vat is not None:
            self.vat = vat
        if insyco_xml_file is not None:
            self.insyco_xml_file = insyco_xml_file
        if maximal_size_mb is not None:
            self.maximal_size_mb = maximal_size_mb
        if item_bank_account_list is not None:
            self.item_bank_account_list = item_bank_account_list
        if item_bank_account_default is not None:
            self.item_bank_account_default = item_bank_account_default
        if avizo_1 is not None:
            self.avizo_1 = avizo_1
        if avizo_2 is not None:
            self.avizo_2 = avizo_2
        if avizo_3 is not None:
            self.avizo_3 = avizo_3
        if avizo_4 is not None:
            self.avizo_4 = avizo_4
        if avizo_5 is not None:
            self.avizo_5 = avizo_5
        if avizo_6 is not None:
            self.avizo_6 = avizo_6
        if avizo_7 is not None:
            self.avizo_7 = avizo_7
        if evidence_status_shortcut_list is not None:
            self.evidence_status_shortcut_list = evidence_status_shortcut_list
        if evidence_status_list is not None:
            self.evidence_status_list = evidence_status_list
        if cover_status_shortcut_list is not None:
            self.cover_status_shortcut_list = cover_status_shortcut_list
        if cover_status_list is not None:
            self.cover_status_list = cover_status_list
        if fields_to_log_list is not None:
            self.fields_to_log_list = fields_to_log_list
        if bcc_list is not None:
            self.bcc_list = bcc_list
        if budget_department_head is not None:
            self.budget_department_head = budget_department_head
        if alpha_help_path_list is not None:
            self.alpha_help_path_list = alpha_help_path_list
        if ghoul_help_path_list is not None:
            self.ghoul_help_path_list = ghoul_help_path_list
        if profile_db_pub_list is not None:
            self.profile_db_pub_list = profile_db_pub_list
        if info_db_alpha_list is not None:
            self.info_db_alpha_list = info_db_alpha_list
        if info_db_ghoul_list is not None:
            self.info_db_ghoul_list = info_db_ghoul_list

    @property
    def domino(self):
        """Gets the domino of this ProfileMain.  # noqa: E501


        :return: The domino of this ProfileMain.  # noqa: E501
        :rtype: DominoCommons
        """
        return self._domino

    @domino.setter
    def domino(self, domino):
        """Sets the domino of this ProfileMain.


        :param domino: The domino of this ProfileMain.  # noqa: E501
        :type: DominoCommons
        """

        self._domino = domino

    @property
    def version(self):
        """Gets the version of this ProfileMain.  # noqa: E501

        Verze aplikace Notes  # noqa: E501

        :return: The version of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProfileMain.

        Verze aplikace Notes  # noqa: E501

        :param version: The version of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def database_type(self):
        """Gets the database_type of this ProfileMain.  # noqa: E501

        DatabaseType - typ databáze  # noqa: E501

        :return: The database_type of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this ProfileMain.

        DatabaseType - typ databáze  # noqa: E501

        :param database_type: The database_type of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._database_type = database_type

    @property
    def vat(self):
        """Gets the vat of this ProfileMain.  # noqa: E501

        VAT  Sazba DPH  # noqa: E501

        :return: The vat of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ProfileMain.

        VAT  Sazba DPH  # noqa: E501

        :param vat: The vat of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def insyco_xml_file(self):
        """Gets the insyco_xml_file of this ProfileMain.  # noqa: E501

        insycoXmlFile  Cesta pro export XML pro insyco  # noqa: E501

        :return: The insyco_xml_file of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._insyco_xml_file

    @insyco_xml_file.setter
    def insyco_xml_file(self, insyco_xml_file):
        """Sets the insyco_xml_file of this ProfileMain.

        insycoXmlFile  Cesta pro export XML pro insyco  # noqa: E501

        :param insyco_xml_file: The insyco_xml_file of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._insyco_xml_file = insyco_xml_file

    @property
    def maximal_size_mb(self):
        """Gets the maximal_size_mb of this ProfileMain.  # noqa: E501

        maximalSize  Maximální velikost EL/KL (MB)  # noqa: E501

        :return: The maximal_size_mb of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._maximal_size_mb

    @maximal_size_mb.setter
    def maximal_size_mb(self, maximal_size_mb):
        """Sets the maximal_size_mb of this ProfileMain.

        maximalSize  Maximální velikost EL/KL (MB)  # noqa: E501

        :param maximal_size_mb: The maximal_size_mb of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._maximal_size_mb = maximal_size_mb

    @property
    def item_bank_account_list(self):
        """Gets the item_bank_account_list of this ProfileMain.  # noqa: E501

        item_bank_account_list  Seznam účtů pro financování rozpočtových položek (platební kalendář)|   # noqa: E501

        :return: The item_bank_account_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_bank_account_list

    @item_bank_account_list.setter
    def item_bank_account_list(self, item_bank_account_list):
        """Sets the item_bank_account_list of this ProfileMain.

        item_bank_account_list  Seznam účtů pro financování rozpočtových položek (platební kalendář)|   # noqa: E501

        :param item_bank_account_list: The item_bank_account_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._item_bank_account_list = item_bank_account_list

    @property
    def item_bank_account_default(self):
        """Gets the item_bank_account_default of this ProfileMain.  # noqa: E501

        item_bank_account_default  Výchozí účet pro financování rozpočtových položek (platební kalendář)|   # noqa: E501

        :return: The item_bank_account_default of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._item_bank_account_default

    @item_bank_account_default.setter
    def item_bank_account_default(self, item_bank_account_default):
        """Sets the item_bank_account_default of this ProfileMain.

        item_bank_account_default  Výchozí účet pro financování rozpočtových položek (platební kalendář)|   # noqa: E501

        :param item_bank_account_default: The item_bank_account_default of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._item_bank_account_default = item_bank_account_default

    @property
    def avizo_1(self):
        """Gets the avizo_1 of this ProfileMain.  # noqa: E501

        avizo_1  Předmět notifikačního emailu  při poslání  k podpisu příkazci operace|   # noqa: E501

        :return: The avizo_1 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_1

    @avizo_1.setter
    def avizo_1(self, avizo_1):
        """Sets the avizo_1 of this ProfileMain.

        avizo_1  Předmět notifikačního emailu  při poslání  k podpisu příkazci operace|   # noqa: E501

        :param avizo_1: The avizo_1 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_1 = avizo_1

    @property
    def avizo_2(self):
        """Gets the avizo_2 of this ProfileMain.  # noqa: E501

        avizo_2  Předmět notifikačního emailu  při poslání  k podpisu vrchnímu řediteli|   # noqa: E501

        :return: The avizo_2 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_2

    @avizo_2.setter
    def avizo_2(self, avizo_2):
        """Sets the avizo_2 of this ProfileMain.

        avizo_2  Předmět notifikačního emailu  při poslání  k podpisu vrchnímu řediteli|   # noqa: E501

        :param avizo_2: The avizo_2 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_2 = avizo_2

    @property
    def avizo_3(self):
        """Gets the avizo_3 of this ProfileMain.  # noqa: E501

        avizo_3  Předmět notifikačního emailu  při poslání  k podpisu příkazci operace - NM|   # noqa: E501

        :return: The avizo_3 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_3

    @avizo_3.setter
    def avizo_3(self, avizo_3):
        """Sets the avizo_3 of this ProfileMain.

        avizo_3  Předmět notifikačního emailu  při poslání  k podpisu příkazci operace - NM|   # noqa: E501

        :param avizo_3: The avizo_3 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_3 = avizo_3

    @property
    def avizo_4(self):
        """Gets the avizo_4 of this ProfileMain.  # noqa: E501

        avizo_4  Předmět notifikačního emailu  při poslání  při poslání k podpisu NM-ŘSFL|   # noqa: E501

        :return: The avizo_4 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_4

    @avizo_4.setter
    def avizo_4(self, avizo_4):
        """Sets the avizo_4 of this ProfileMain.

        avizo_4  Předmět notifikačního emailu  při poslání  při poslání k podpisu NM-ŘSFL|   # noqa: E501

        :param avizo_4: The avizo_4 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_4 = avizo_4

    @property
    def avizo_5(self):
        """Gets the avizo_5 of this ProfileMain.  # noqa: E501

        avizo_5  Předmět notifikačního emailu  při poslání  ke kontrole Odboru rozpočtu|   # noqa: E501

        :return: The avizo_5 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_5

    @avizo_5.setter
    def avizo_5(self, avizo_5):
        """Sets the avizo_5 of this ProfileMain.

        avizo_5  Předmět notifikačního emailu  při poslání  ke kontrole Odboru rozpočtu|   # noqa: E501

        :param avizo_5: The avizo_5 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_5 = avizo_5

    @property
    def avizo_6(self):
        """Gets the avizo_6 of this ProfileMain.  # noqa: E501

        avizo_6  Předmět notifikačního emailu  při poslání  k Odboru rozpočtu - přidělení právníkovi|   # noqa: E501

        :return: The avizo_6 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_6

    @avizo_6.setter
    def avizo_6(self, avizo_6):
        """Sets the avizo_6 of this ProfileMain.

        avizo_6  Předmět notifikačního emailu  při poslání  k Odboru rozpočtu - přidělení právníkovi|   # noqa: E501

        :param avizo_6: The avizo_6 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_6 = avizo_6

    @property
    def avizo_7(self):
        """Gets the avizo_7 of this ProfileMain.  # noqa: E501

        avizo_7  Předmět notifikačního emailu  při poslání  ke kontrole Odboru rozpočtu - právnik|   # noqa: E501

        :return: The avizo_7 of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._avizo_7

    @avizo_7.setter
    def avizo_7(self, avizo_7):
        """Sets the avizo_7 of this ProfileMain.

        avizo_7  Předmět notifikačního emailu  při poslání  ke kontrole Odboru rozpočtu - právnik|   # noqa: E501

        :param avizo_7: The avizo_7 of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._avizo_7 = avizo_7

    @property
    def evidence_status_shortcut_list(self):
        """Gets the evidence_status_shortcut_list of this ProfileMain.  # noqa: E501

        list_of_evidence_status_shortcut  Seznam stavů pro evidenční list zkratka|   # noqa: E501

        :return: The evidence_status_shortcut_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._evidence_status_shortcut_list

    @evidence_status_shortcut_list.setter
    def evidence_status_shortcut_list(self, evidence_status_shortcut_list):
        """Sets the evidence_status_shortcut_list of this ProfileMain.

        list_of_evidence_status_shortcut  Seznam stavů pro evidenční list zkratka|   # noqa: E501

        :param evidence_status_shortcut_list: The evidence_status_shortcut_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._evidence_status_shortcut_list = evidence_status_shortcut_list

    @property
    def evidence_status_list(self):
        """Gets the evidence_status_list of this ProfileMain.  # noqa: E501

        list_of_evidence_status  Seznam stavů pro evidenční list plný text|   # noqa: E501

        :return: The evidence_status_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._evidence_status_list

    @evidence_status_list.setter
    def evidence_status_list(self, evidence_status_list):
        """Sets the evidence_status_list of this ProfileMain.

        list_of_evidence_status  Seznam stavů pro evidenční list plný text|   # noqa: E501

        :param evidence_status_list: The evidence_status_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._evidence_status_list = evidence_status_list

    @property
    def cover_status_shortcut_list(self):
        """Gets the cover_status_shortcut_list of this ProfileMain.  # noqa: E501

        list_of_cover_status_shortcut  Seznam stavu pro kryci list zkratka|   # noqa: E501

        :return: The cover_status_shortcut_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._cover_status_shortcut_list

    @cover_status_shortcut_list.setter
    def cover_status_shortcut_list(self, cover_status_shortcut_list):
        """Sets the cover_status_shortcut_list of this ProfileMain.

        list_of_cover_status_shortcut  Seznam stavu pro kryci list zkratka|   # noqa: E501

        :param cover_status_shortcut_list: The cover_status_shortcut_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._cover_status_shortcut_list = cover_status_shortcut_list

    @property
    def cover_status_list(self):
        """Gets the cover_status_list of this ProfileMain.  # noqa: E501

        list_of_cover_status  Seznam stavu pro kryci list plný text|   # noqa: E501

        :return: The cover_status_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._cover_status_list

    @cover_status_list.setter
    def cover_status_list(self, cover_status_list):
        """Sets the cover_status_list of this ProfileMain.

        list_of_cover_status  Seznam stavu pro kryci list plný text|   # noqa: E501

        :param cover_status_list: The cover_status_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._cover_status_list = cover_status_list

    @property
    def fields_to_log_list(self):
        """Gets the fields_to_log_list of this ProfileMain.  # noqa: E501

        fields2Log    Seznam polí, jejichž hodnoty se mají logovat při uložení Evidenčního listu|   # noqa: E501

        :return: The fields_to_log_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields_to_log_list

    @fields_to_log_list.setter
    def fields_to_log_list(self, fields_to_log_list):
        """Sets the fields_to_log_list of this ProfileMain.

        fields2Log    Seznam polí, jejichž hodnoty se mají logovat při uložení Evidenčního listu|   # noqa: E501

        :param fields_to_log_list: The fields_to_log_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._fields_to_log_list = fields_to_log_list

    @property
    def bcc_list(self):
        """Gets the bcc_list of this ProfileMain.  # noqa: E501

        BlindCopy to notification  # noqa: E501

        :return: The bcc_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._bcc_list

    @bcc_list.setter
    def bcc_list(self, bcc_list):
        """Sets the bcc_list of this ProfileMain.

        BlindCopy to notification  # noqa: E501

        :param bcc_list: The bcc_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._bcc_list = bcc_list

    @property
    def budget_department_head(self):
        """Gets the budget_department_head of this ProfileMain.  # noqa: E501

        budget_department_head  Ředitel OR (zobrazení) - slouží pro zobrazení, kdo je ředitel OR. Osoba v tomto # # poli uvidí souhrný pohled všech listů. |   # noqa: E501

        :return: The budget_department_head of this ProfileMain.  # noqa: E501
        :rtype: str
        """
        return self._budget_department_head

    @budget_department_head.setter
    def budget_department_head(self, budget_department_head):
        """Sets the budget_department_head of this ProfileMain.

        budget_department_head  Ředitel OR (zobrazení) - slouží pro zobrazení, kdo je ředitel OR. Osoba v tomto # # poli uvidí souhrný pohled všech listů. |   # noqa: E501

        :param budget_department_head: The budget_department_head of this ProfileMain.  # noqa: E501
        :type: str
        """

        self._budget_department_head = budget_department_head

    @property
    def alpha_help_path_list(self):
        """Gets the alpha_help_path_list of this ProfileMain.  # noqa: E501

        alpha_help_path  Odkaz na nápovědu na serveru Alpha  # noqa: E501

        :return: The alpha_help_path_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._alpha_help_path_list

    @alpha_help_path_list.setter
    def alpha_help_path_list(self, alpha_help_path_list):
        """Sets the alpha_help_path_list of this ProfileMain.

        alpha_help_path  Odkaz na nápovědu na serveru Alpha  # noqa: E501

        :param alpha_help_path_list: The alpha_help_path_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._alpha_help_path_list = alpha_help_path_list

    @property
    def ghoul_help_path_list(self):
        """Gets the ghoul_help_path_list of this ProfileMain.  # noqa: E501

        ghoul_help_path  Odkaz na nápovědu na serveru Ghoul  # noqa: E501

        :return: The ghoul_help_path_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._ghoul_help_path_list

    @ghoul_help_path_list.setter
    def ghoul_help_path_list(self, ghoul_help_path_list):
        """Sets the ghoul_help_path_list of this ProfileMain.

        ghoul_help_path  Odkaz na nápovědu na serveru Ghoul  # noqa: E501

        :param ghoul_help_path_list: The ghoul_help_path_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._ghoul_help_path_list = ghoul_help_path_list

    @property
    def profile_db_pub_list(self):
        """Gets the profile_db_pub_list of this ProfileMain.  # noqa: E501

        Profile_DB_Pub  ContentDB  # noqa: E501

        :return: The profile_db_pub_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._profile_db_pub_list

    @profile_db_pub_list.setter
    def profile_db_pub_list(self, profile_db_pub_list):
        """Sets the profile_db_pub_list of this ProfileMain.

        Profile_DB_Pub  ContentDB  # noqa: E501

        :param profile_db_pub_list: The profile_db_pub_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._profile_db_pub_list = profile_db_pub_list

    @property
    def info_db_alpha_list(self):
        """Gets the info_db_alpha_list of this ProfileMain.  # noqa: E501

        Info_DB_Alpha  InfoDB - Alpha  # noqa: E501

        :return: The info_db_alpha_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._info_db_alpha_list

    @info_db_alpha_list.setter
    def info_db_alpha_list(self, info_db_alpha_list):
        """Sets the info_db_alpha_list of this ProfileMain.

        Info_DB_Alpha  InfoDB - Alpha  # noqa: E501

        :param info_db_alpha_list: The info_db_alpha_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._info_db_alpha_list = info_db_alpha_list

    @property
    def info_db_ghoul_list(self):
        """Gets the info_db_ghoul_list of this ProfileMain.  # noqa: E501

        Info_DB_Ghoul  InfoDB - Ghoul  # noqa: E501

        :return: The info_db_ghoul_list of this ProfileMain.  # noqa: E501
        :rtype: list[str]
        """
        return self._info_db_ghoul_list

    @info_db_ghoul_list.setter
    def info_db_ghoul_list(self, info_db_ghoul_list):
        """Sets the info_db_ghoul_list of this ProfileMain.

        Info_DB_Ghoul  InfoDB - Ghoul  # noqa: E501

        :param info_db_ghoul_list: The info_db_ghoul_list of this ProfileMain.  # noqa: E501
        :type: list[str]
        """

        self._info_db_ghoul_list = info_db_ghoul_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileMain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileMain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
