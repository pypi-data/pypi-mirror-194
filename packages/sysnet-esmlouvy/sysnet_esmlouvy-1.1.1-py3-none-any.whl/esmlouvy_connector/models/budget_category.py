# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BudgetCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domino': 'DominoCommons',
        'department': 'str',
        'category': 'str',
        'category_parsed': 'str',
        'description': 'str'
    }

    attribute_map = {
        'domino': 'domino',
        'department': 'department',
        'category': 'category',
        'category_parsed': 'category_parsed',
        'description': 'description'
    }

    def __init__(self, domino=None, department=None, category=None, category_parsed=None, description=None):  # noqa: E501
        """BudgetCategory - a model defined in Swagger"""  # noqa: E501
        self._domino = None
        self._department = None
        self._category = None
        self._category_parsed = None
        self._description = None
        self.discriminator = None
        if domino is not None:
            self.domino = domino
        if department is not None:
            self.department = department
        if category is not None:
            self.category = category
        if category_parsed is not None:
            self.category_parsed = category_parsed
        if description is not None:
            self.description = description

    @property
    def domino(self):
        """Gets the domino of this BudgetCategory.  # noqa: E501


        :return: The domino of this BudgetCategory.  # noqa: E501
        :rtype: DominoCommons
        """
        return self._domino

    @domino.setter
    def domino(self, domino):
        """Sets the domino of this BudgetCategory.


        :param domino: The domino of this BudgetCategory.  # noqa: E501
        :type: DominoCommons
        """

        self._domino = domino

    @property
    def department(self):
        """Gets the department of this BudgetCategory.  # noqa: E501

        odbor  # noqa: E501

        :return: The department of this BudgetCategory.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this BudgetCategory.

        odbor  # noqa: E501

        :param department: The department of this BudgetCategory.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def category(self):
        """Gets the category of this BudgetCategory.  # noqa: E501

        rozpočtové zařazení (bez pomlček)  # noqa: E501

        :return: The category of this BudgetCategory.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BudgetCategory.

        rozpočtové zařazení (bez pomlček)  # noqa: E501

        :param category: The category of this BudgetCategory.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def category_parsed(self):
        """Gets the category_parsed of this BudgetCategory.  # noqa: E501

        ParsedCategory - rozpočtové zařazení (s pomlčkami)  # noqa: E501

        :return: The category_parsed of this BudgetCategory.  # noqa: E501
        :rtype: str
        """
        return self._category_parsed

    @category_parsed.setter
    def category_parsed(self, category_parsed):
        """Sets the category_parsed of this BudgetCategory.

        ParsedCategory - rozpočtové zařazení (s pomlčkami)  # noqa: E501

        :param category_parsed: The category_parsed of this BudgetCategory.  # noqa: E501
        :type: str
        """

        self._category_parsed = category_parsed

    @property
    def description(self):
        """Gets the description of this BudgetCategory.  # noqa: E501

        popis  # noqa: E501

        :return: The description of this BudgetCategory.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BudgetCategory.

        popis  # noqa: E501

        :param description: The description of this BudgetCategory.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
