# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseSheetDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document': 'BaseDominoDocument',
        'container_id': 'str',
        'confirmed_id': 'bool',
        'workflow': 'DocumentWorkflow',
        'urgent': 'bool',
        'subject': 'str',
        'subject_mime': 'str',
        'subject_short': 'str',
        'comment': 'str',
        'attachments': 'list[DocumentAttachment]',
        'log': 'list[str]',
        'log_calendar': 'list[str]'
    }

    attribute_map = {
        'document': 'document',
        'container_id': 'container_id',
        'confirmed_id': 'confirmed_id',
        'workflow': 'workflow',
        'urgent': 'urgent',
        'subject': 'subject',
        'subject_mime': 'subject_mime',
        'subject_short': 'subject_short',
        'comment': 'comment',
        'attachments': 'attachments',
        'log': 'log',
        'log_calendar': 'log_calendar'
    }

    def __init__(self, document=None, container_id=None, confirmed_id=None, workflow=None, urgent=None, subject=None, subject_mime=None, subject_short=None, comment=None, attachments=None, log=None, log_calendar=None):  # noqa: E501
        """BaseSheetDocument - a model defined in Swagger"""  # noqa: E501
        self._document = None
        self._container_id = None
        self._confirmed_id = None
        self._workflow = None
        self._urgent = None
        self._subject = None
        self._subject_mime = None
        self._subject_short = None
        self._comment = None
        self._attachments = None
        self._log = None
        self._log_calendar = None
        self.discriminator = None
        if document is not None:
            self.document = document
        if container_id is not None:
            self.container_id = container_id
        if confirmed_id is not None:
            self.confirmed_id = confirmed_id
        if workflow is not None:
            self.workflow = workflow
        if urgent is not None:
            self.urgent = urgent
        if subject is not None:
            self.subject = subject
        if subject_mime is not None:
            self.subject_mime = subject_mime
        if subject_short is not None:
            self.subject_short = subject_short
        if comment is not None:
            self.comment = comment
        if attachments is not None:
            self.attachments = attachments
        if log is not None:
            self.log = log
        if log_calendar is not None:
            self.log_calendar = log_calendar

    @property
    def document(self):
        """Gets the document of this BaseSheetDocument.  # noqa: E501


        :return: The document of this BaseSheetDocument.  # noqa: E501
        :rtype: BaseDominoDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this BaseSheetDocument.


        :param document: The document of this BaseSheetDocument.  # noqa: E501
        :type: BaseDominoDocument
        """

        self._document = document

    @property
    def container_id(self):
        """Gets the container_id of this BaseSheetDocument.  # noqa: E501

        UUID kontejneru, kam dokument patří  # noqa: E501

        :return: The container_id of this BaseSheetDocument.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this BaseSheetDocument.

        UUID kontejneru, kam dokument patří  # noqa: E501

        :param container_id: The container_id of this BaseSheetDocument.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def confirmed_id(self):
        """Gets the confirmed_id of this BaseSheetDocument.  # noqa: E501

        Vytvořeno agentem importu daz z CSV  # noqa: E501

        :return: The confirmed_id of this BaseSheetDocument.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed_id

    @confirmed_id.setter
    def confirmed_id(self, confirmed_id):
        """Sets the confirmed_id of this BaseSheetDocument.

        Vytvořeno agentem importu daz z CSV  # noqa: E501

        :param confirmed_id: The confirmed_id of this BaseSheetDocument.  # noqa: E501
        :type: bool
        """

        self._confirmed_id = confirmed_id

    @property
    def workflow(self):
        """Gets the workflow of this BaseSheetDocument.  # noqa: E501


        :return: The workflow of this BaseSheetDocument.  # noqa: E501
        :rtype: DocumentWorkflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this BaseSheetDocument.


        :param workflow: The workflow of this BaseSheetDocument.  # noqa: E501
        :type: DocumentWorkflow
        """

        self._workflow = workflow

    @property
    def urgent(self):
        """Gets the urgent of this BaseSheetDocument.  # noqa: E501

        Urgentní zakázka  # noqa: E501

        :return: The urgent of this BaseSheetDocument.  # noqa: E501
        :rtype: bool
        """
        return self._urgent

    @urgent.setter
    def urgent(self, urgent):
        """Sets the urgent of this BaseSheetDocument.

        Urgentní zakázka  # noqa: E501

        :param urgent: The urgent of this BaseSheetDocument.  # noqa: E501
        :type: bool
        """

        self._urgent = urgent

    @property
    def subject(self):
        """Gets the subject of this BaseSheetDocument.  # noqa: E501

        Předmět budoucí zakázky včetně zdůvodnění smlouvy  # noqa: E501

        :return: The subject of this BaseSheetDocument.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this BaseSheetDocument.

        Předmět budoucí zakázky včetně zdůvodnění smlouvy  # noqa: E501

        :param subject: The subject of this BaseSheetDocument.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def subject_mime(self):
        """Gets the subject_mime of this BaseSheetDocument.  # noqa: E501

        subject_rtf - Předmět budoucí zakázky včetně zdůvodnění smlouvy (MIME multipart).  Nepoužívat pro upload. Jen kvůli zpětné kompatibilitě. |   # noqa: E501

        :return: The subject_mime of this BaseSheetDocument.  # noqa: E501
        :rtype: str
        """
        return self._subject_mime

    @subject_mime.setter
    def subject_mime(self, subject_mime):
        """Sets the subject_mime of this BaseSheetDocument.

        subject_rtf - Předmět budoucí zakázky včetně zdůvodnění smlouvy (MIME multipart).  Nepoužívat pro upload. Jen kvůli zpětné kompatibilitě. |   # noqa: E501

        :param subject_mime: The subject_mime of this BaseSheetDocument.  # noqa: E501
        :type: str
        """

        self._subject_mime = subject_mime

    @property
    def subject_short(self):
        """Gets the subject_short of this BaseSheetDocument.  # noqa: E501

        Předmět budoucí zakázky velmi stručně pro zápis do účetního systému (150 znaků) |   # noqa: E501

        :return: The subject_short of this BaseSheetDocument.  # noqa: E501
        :rtype: str
        """
        return self._subject_short

    @subject_short.setter
    def subject_short(self, subject_short):
        """Sets the subject_short of this BaseSheetDocument.

        Předmět budoucí zakázky velmi stručně pro zápis do účetního systému (150 znaků) |   # noqa: E501

        :param subject_short: The subject_short of this BaseSheetDocument.  # noqa: E501
        :type: str
        """

        self._subject_short = subject_short

    @property
    def comment(self):
        """Gets the comment of this BaseSheetDocument.  # noqa: E501

        Poznmka odboru rozpočtu  # noqa: E501

        :return: The comment of this BaseSheetDocument.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this BaseSheetDocument.

        Poznmka odboru rozpočtu  # noqa: E501

        :param comment: The comment of this BaseSheetDocument.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def attachments(self):
        """Gets the attachments of this BaseSheetDocument.  # noqa: E501

        Souborové přílohy  # noqa: E501

        :return: The attachments of this BaseSheetDocument.  # noqa: E501
        :rtype: list[DocumentAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this BaseSheetDocument.

        Souborové přílohy  # noqa: E501

        :param attachments: The attachments of this BaseSheetDocument.  # noqa: E501
        :type: list[DocumentAttachment]
        """

        self._attachments = attachments

    @property
    def log(self):
        """Gets the log of this BaseSheetDocument.  # noqa: E501

        Procesní logy k dokumentu  # noqa: E501

        :return: The log of this BaseSheetDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this BaseSheetDocument.

        Procesní logy k dokumentu  # noqa: E501

        :param log: The log of this BaseSheetDocument.  # noqa: E501
        :type: list[str]
        """

        self._log = log

    @property
    def log_calendar(self):
        """Gets the log_calendar of this BaseSheetDocument.  # noqa: E501

        Procesní logy k platebnímu kalendáři  # noqa: E501

        :return: The log_calendar of this BaseSheetDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._log_calendar

    @log_calendar.setter
    def log_calendar(self, log_calendar):
        """Sets the log_calendar of this BaseSheetDocument.

        Procesní logy k platebnímu kalendáři  # noqa: E501

        :param log_calendar: The log_calendar of this BaseSheetDocument.  # noqa: E501
        :type: list[str]
        """

        self._log_calendar = log_calendar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseSheetDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSheetDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
