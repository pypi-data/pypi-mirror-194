# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentAttachmentList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'search': 'str',
        'category': 'str',
        'storage': 'str',
        'container_id': 'str',
        'document_id': 'str',
        'start': 'int',
        'page_size': 'int',
        'page': 'int',
        'count': 'int',
        'entries': 'list[DocumentAttachmentEntry]'
    }

    attribute_map = {
        'key': 'key',
        'search': 'search',
        'category': 'category',
        'storage': 'storage',
        'container_id': 'container_id',
        'document_id': 'document_id',
        'start': 'start',
        'page_size': 'page_size',
        'page': 'page',
        'count': 'count',
        'entries': 'entries'
    }

    def __init__(self, key=None, search=None, category=None, storage=None, container_id=None, document_id=None, start=None, page_size=None, page=None, count=None, entries=None):  # noqa: E501
        """DocumentAttachmentList - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._search = None
        self._category = None
        self._storage = None
        self._container_id = None
        self._document_id = None
        self._start = None
        self._page_size = None
        self._page = None
        self._count = None
        self._entries = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if search is not None:
            self.search = search
        if category is not None:
            self.category = category
        if storage is not None:
            self.storage = storage
        if container_id is not None:
            self.container_id = container_id
        if document_id is not None:
            self.document_id = document_id
        if start is not None:
            self.start = start
        if page_size is not None:
            self.page_size = page_size
        if page is not None:
            self.page = page
        if count is not None:
            self.count = count
        if entries is not None:
            self.entries = entries

    @property
    def key(self):
        """Gets the key of this DocumentAttachmentList.  # noqa: E501

        Může být identifikátor nebo jiný textový klíč (např. čj.)  # noqa: E501

        :return: The key of this DocumentAttachmentList.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DocumentAttachmentList.

        Může být identifikátor nebo jiný textový klíč (např. čj.)  # noqa: E501

        :param key: The key of this DocumentAttachmentList.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def search(self):
        """Gets the search of this DocumentAttachmentList.  # noqa: E501

        Text pro fulltextové vyhledávání  # noqa: E501

        :return: The search of this DocumentAttachmentList.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this DocumentAttachmentList.

        Text pro fulltextové vyhledávání  # noqa: E501

        :param search: The search of this DocumentAttachmentList.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def category(self):
        """Gets the category of this DocumentAttachmentList.  # noqa: E501

        Vrácená kategorie  # noqa: E501

        :return: The category of this DocumentAttachmentList.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DocumentAttachmentList.

        Vrácená kategorie  # noqa: E501

        :param category: The category of this DocumentAttachmentList.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def storage(self):
        """Gets the storage of this DocumentAttachmentList.  # noqa: E501

        Replica ID storage application  # noqa: E501

        :return: The storage of this DocumentAttachmentList.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this DocumentAttachmentList.

        Replica ID storage application  # noqa: E501

        :param storage: The storage of this DocumentAttachmentList.  # noqa: E501
        :type: str
        """

        self._storage = storage

    @property
    def container_id(self):
        """Gets the container_id of this DocumentAttachmentList.  # noqa: E501

        Identifikátor kontejneru  # noqa: E501

        :return: The container_id of this DocumentAttachmentList.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this DocumentAttachmentList.

        Identifikátor kontejneru  # noqa: E501

        :param container_id: The container_id of this DocumentAttachmentList.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def document_id(self):
        """Gets the document_id of this DocumentAttachmentList.  # noqa: E501

        UUID identifikátor rodičovského dokumentu  # noqa: E501

        :return: The document_id of this DocumentAttachmentList.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentAttachmentList.

        UUID identifikátor rodičovského dokumentu  # noqa: E501

        :param document_id: The document_id of this DocumentAttachmentList.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def start(self):
        """Gets the start of this DocumentAttachmentList.  # noqa: E501

        Počáteční dokument na stránce  # noqa: E501

        :return: The start of this DocumentAttachmentList.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this DocumentAttachmentList.

        Počáteční dokument na stránce  # noqa: E501

        :param start: The start of this DocumentAttachmentList.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def page_size(self):
        """Gets the page_size of this DocumentAttachmentList.  # noqa: E501

        Velikost stránky  # noqa: E501

        :return: The page_size of this DocumentAttachmentList.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DocumentAttachmentList.

        Velikost stránky  # noqa: E501

        :param page_size: The page_size of this DocumentAttachmentList.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page(self):
        """Gets the page of this DocumentAttachmentList.  # noqa: E501

        Požadovaná stránka  # noqa: E501

        :return: The page of this DocumentAttachmentList.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this DocumentAttachmentList.

        Požadovaná stránka  # noqa: E501

        :param page: The page of this DocumentAttachmentList.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def count(self):
        """Gets the count of this DocumentAttachmentList.  # noqa: E501

        celkový počet vrácených položek  # noqa: E501

        :return: The count of this DocumentAttachmentList.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DocumentAttachmentList.

        celkový počet vrácených položek  # noqa: E501

        :param count: The count of this DocumentAttachmentList.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def entries(self):
        """Gets the entries of this DocumentAttachmentList.  # noqa: E501


        :return: The entries of this DocumentAttachmentList.  # noqa: E501
        :rtype: list[DocumentAttachmentEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this DocumentAttachmentList.


        :param entries: The entries of this DocumentAttachmentList.  # noqa: E501
        :type: list[DocumentAttachmentEntry]
        """

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentAttachmentList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentAttachmentList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
