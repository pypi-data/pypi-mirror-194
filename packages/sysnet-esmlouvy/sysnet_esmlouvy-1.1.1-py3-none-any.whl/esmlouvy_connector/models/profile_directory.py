# coding: utf-8

"""
    Datový konektor Domino pro eSMLOUVY

    Toto je datový konektor umožňující datovou výměnu mezi obchodní logikou aplikace eSMLOUVY a datovým serverem HCL Domino.  Ovládá se pomocí REST API   # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileDirectory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domino': 'DominoCommons',
        'categories': 'list[str]',
        'value_title': 'str',
        'value_description': 'str',
        'value_name': 'list[str]',
        'value_code': 'list[str]',
        'values': 'list[str]'
    }

    attribute_map = {
        'domino': 'domino',
        'categories': 'categories',
        'value_title': 'value_title',
        'value_description': 'value_description',
        'value_name': 'value_name',
        'value_code': 'value_code',
        'values': 'values'
    }

    def __init__(self, domino=None, categories=None, value_title=None, value_description=None, value_name=None, value_code=None, values=None):  # noqa: E501
        """ProfileDirectory - a model defined in Swagger"""  # noqa: E501
        self._domino = None
        self._categories = None
        self._value_title = None
        self._value_description = None
        self._value_name = None
        self._value_code = None
        self._values = None
        self.discriminator = None
        if domino is not None:
            self.domino = domino
        if categories is not None:
            self.categories = categories
        if value_title is not None:
            self.value_title = value_title
        if value_description is not None:
            self.value_description = value_description
        if value_name is not None:
            self.value_name = value_name
        if value_code is not None:
            self.value_code = value_code
        if values is not None:
            self.values = values

    @property
    def domino(self):
        """Gets the domino of this ProfileDirectory.  # noqa: E501


        :return: The domino of this ProfileDirectory.  # noqa: E501
        :rtype: DominoCommons
        """
        return self._domino

    @domino.setter
    def domino(self, domino):
        """Sets the domino of this ProfileDirectory.


        :param domino: The domino of this ProfileDirectory.  # noqa: E501
        :type: DominoCommons
        """

        self._domino = domino

    @property
    def categories(self):
        """Gets the categories of this ProfileDirectory.  # noqa: E501

        Categories - Kategorie  # noqa: E501

        :return: The categories of this ProfileDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProfileDirectory.

        Categories - Kategorie  # noqa: E501

        :param categories: The categories of this ProfileDirectory.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def value_title(self):
        """Gets the value_title of this ProfileDirectory.  # noqa: E501

        ValueTitle - Název  # noqa: E501

        :return: The value_title of this ProfileDirectory.  # noqa: E501
        :rtype: str
        """
        return self._value_title

    @value_title.setter
    def value_title(self, value_title):
        """Sets the value_title of this ProfileDirectory.

        ValueTitle - Název  # noqa: E501

        :param value_title: The value_title of this ProfileDirectory.  # noqa: E501
        :type: str
        """

        self._value_title = value_title

    @property
    def value_description(self):
        """Gets the value_description of this ProfileDirectory.  # noqa: E501

        ValueDescription - Popis  # noqa: E501

        :return: The value_description of this ProfileDirectory.  # noqa: E501
        :rtype: str
        """
        return self._value_description

    @value_description.setter
    def value_description(self, value_description):
        """Sets the value_description of this ProfileDirectory.

        ValueDescription - Popis  # noqa: E501

        :param value_description: The value_description of this ProfileDirectory.  # noqa: E501
        :type: str
        """

        self._value_description = value_description

    @property
    def value_name(self):
        """Gets the value_name of this ProfileDirectory.  # noqa: E501

        ValueName - Text  # noqa: E501

        :return: The value_name of this ProfileDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """Sets the value_name of this ProfileDirectory.

        ValueName - Text  # noqa: E501

        :param value_name: The value_name of this ProfileDirectory.  # noqa: E501
        :type: list[str]
        """

        self._value_name = value_name

    @property
    def value_code(self):
        """Gets the value_code of this ProfileDirectory.  # noqa: E501

        ValueCode - Zkratka  # noqa: E501

        :return: The value_code of this ProfileDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._value_code

    @value_code.setter
    def value_code(self, value_code):
        """Sets the value_code of this ProfileDirectory.

        ValueCode - Zkratka  # noqa: E501

        :param value_code: The value_code of this ProfileDirectory.  # noqa: E501
        :type: list[str]
        """

        self._value_code = value_code

    @property
    def values(self):
        """Gets the values of this ProfileDirectory.  # noqa: E501

        Values - computed  # noqa: E501

        :return: The values of this ProfileDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ProfileDirectory.

        Values - computed  # noqa: E501

        :param values: The values of this ProfileDirectory.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileDirectory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileDirectory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
