{"version":3,"sources":["StreamlitFreeGrid.tsx","index.tsx"],"names":["getDataGridInfos","df","labels","hide","types","data","columns","rows","columnVisibility","n","p","regex","RegExp","push","field","headerName","flex","editable","_loop","columnCell","getCell","j","content","toString","columnData","Object","keys","includes","params","React","createElement","Box","overflow","Typography","value","typeData","type","alt","undefined","id","src","height","Date","toLocaleString","lang","options","CheckIcon","color","CloseIcon","test","i","row","StreamlitFreeGrid","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","props","pageSize","render","sx","width","DataGrid","initialState","columnVisibilityModel","disableSelectionOnClick","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","MyComponent","document","getElementById"],"mappings":"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","file":"static/js/main.b678ef52.chunk.js","sourcesContent":["import {\n  ArrowTable,\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {Box, Typography} from \"@mui/material\";\nimport {DataGrid, GridColDef, GridColumnVisibilityModel, GridRowId, GridValueGetterParams} from '@mui/x-data-grid';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\n\ninterface State {\n}\n\ninterface Data {\n  columns: GridColDef[],\n  rows: object[],\n  columnVisibility: GridColumnVisibilityModel\n}\n\ninterface TypeData {\n  type: string\n  options?: object\n  lang?: string\n}\n\n\nconst getDataGridInfos = (df: ArrowTable, labels: object, hide: string[], types: object) => {\n  const data: Data = {columns: [], rows: [], columnVisibility: {}}\n  const n = df.rows\n  const p = df.columns\n  const regex: RegExp = new RegExp(\"[0-9]+\")\n  data.columns.push({field: \"id\", headerName: \"id\", flex: 1, editable: false,})\n  data.columnVisibility[\"id\"] = false\n  // generate columns data\n  for (let j = 1; j < p ; j++) {\n    const columnCell = df.getCell(0, j)\n    let field: string = (columnCell.content !== null && columnCell.content !== \"\")? columnCell.content.toString(): j.toString()\n    let headerName: string\n    if (field === \"id\") {\n      field = \"_id\"\n      headerName = \"_id\"\n    }\n    // headerName from labels props\n    if (Object.keys(labels).includes(field)) {\n      headerName = labels[field as keyof object]\n    } else {\n      headerName = field\n    }\n    // generate column\n    const columnData: GridColDef = {field: field, headerName: headerName, flex: 1, editable: false,}\n    columnData[\"renderCell\"] = params => (<Box overflow=\"auto\"><Typography>{params.value.toString()}</Typography></Box>)\n    if (Object.keys(types).includes(field)) {\n      const typeData: TypeData = types[field as keyof object]\n      switch (typeData.type) {\n        case \"image\":\n          columnData[\"renderCell\"] = params => (<img alt={(params.id !== undefined)? headerName+params.id.toString(): headerName+\"null\"} src={params.value} height=\"100%\"/>)\n          break\n        case \"date\":\n          columnData[\"valueFormatter\"] = params => new Date(params?.value * 1000000).toLocaleString(typeData.lang, typeData.options)\n          break\n        case \"bool\":\n          columnData[\"renderCell\"] = params => (params.value)? (<CheckIcon color=\"success\"/>): (<CloseIcon color=\"error\"/>)\n          break\n      }\n    }\n    data.columns.push(columnData)\n    // hide columns from hide props\n    data.columnVisibility[field] = !(regex.test(field) || hide.includes(field))\n  }\n  // generate rows data\n  for (let i = 1; i < n; i++) {\n    const row: any = {}\n    row[\"id\"] = i\n    for (let j = 1; j < p; j++) {\n      row[data.columns[j].field] = df.getCell(i, j).content\n    }\n    data.rows.push(row)\n  }\n  return data\n}\n\nclass StreamlitFreeGrid extends StreamlitComponentBase<State> {\n  public state: State = {}\n  private df: ArrowTable = this.props.args[\"df\"]\n  private height: number = this.props.args[\"height\"]\n  private pageSize: number = this.props.args[\"pageSize\"]\n  private labels: object = this.props.args[\"labels\"]\n  private hide: string[] = this.props.args[\"hide\"]\n  private types: object = this.props.args[\"types\"]\n\n  public render = (): ReactNode => {\n    const data = getDataGridInfos(this.df, this.labels, this.hide, this.types)\n    return (\n      <Box\n        sx={{\n          height: this.height,\n          width: \"100%\",\n        }}\n      >\n        <DataGrid\n          initialState={{\n            columns: {columnVisibilityModel: data.columnVisibility}\n          }}\n          columns={data.columns}\n          rows={data.rows}\n          pageSize={this.pageSize}\n          disableSelectionOnClick/>\n      </Box>\n    )\n  }\n}\n\nexport default withStreamlitConnection(StreamlitFreeGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./StreamlitFreeGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}