{"version":3,"file":"e85057ce.js","mappings":";;AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;;;;;;;;;;;;;;;;;;;;AC7GA;;;ACoDA;;AAEA;;AAOA;;;;AAKA;;AAGA;;;;;AAMA;;;AA7GA;;;AAmHA;;;AAKA;;;AAKA;;;;;AAMA;;;AAnIA;;;AAyIA;;;AAGA;;;AAKA;;;AAIA;;;;;;AAQA;;;AA7JA;;;AAmKA;;;AAKA;;;;;;;AASA;;;AAjLA;;;AAuLA;;;AAKA;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsLA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/dialogs/restart/dialog-restart.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport { mdiAutoFix, mdiPower, mdiPowerCycle, mdiRefresh } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { shouldHandleRequestSelectedEvent } from \"../../common/mwc/handle-request-selected-event\";\nimport \"../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-list-item\";\nimport {\n  extractApiErrorMessage,\n  ignoreSupervisorError,\n} from \"../../data/hassio/common\";\nimport {\n  fetchHassioHostInfo,\n  HassioHostInfo,\n  rebootHost,\n  shutdownHost,\n} from \"../../data/hassio/host\";\nimport { haStyle, haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { showToast } from \"../../util/toast\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../generic/show-dialog-box\";\n\n@customElement(\"dialog-restart\")\nclass DialogRestart extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _open = false;\n\n  @state()\n  private _loadingHostInfo = false;\n\n  @state()\n  private _hostInfo?: HassioHostInfo;\n\n  public async showDialog(): Promise<void> {\n    const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n\n    this._open = true;\n\n    if (isHassioLoaded && !this._hostInfo) {\n      this._loadingHostInfo = true;\n      try {\n        this._hostInfo = await fetchHassioHostInfo(this.hass);\n      } catch (_err) {\n        // Do nothing\n      } finally {\n        this._loadingHostInfo = false;\n      }\n    }\n\n    const showReload = this.hass.userData?.showAdvanced;\n    const showRebootShutdown = !!this._hostInfo;\n\n    // Present restart core dialog if no host actions and not advanced mode as it's the only option\n    if (!showReload && !showRebootShutdown) {\n      this._open = false;\n      this._showRestartDialog().then(() => this.closeDialog());\n      return;\n    }\n\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._open = false;\n    this._loadingHostInfo = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._open) {\n      return html``;\n    }\n\n    const showReload = this.hass.userData?.showAdvanced;\n    const showRebootShutdown = !!this._hostInfo;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        hideActions\n        .heading=${!this._loadingHostInfo\n          ? createCloseHeading(\n              this.hass,\n              this.hass.localize(\"ui.dialogs.restart.heading\")\n            )\n          : undefined}\n      >\n        ${this._loadingHostInfo\n          ? html`\n              <div class=\"loader\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <mwc-list dialogInitialFocus>\n                ${showReload\n                  ? html`\n                      <ha-list-item\n                        graphic=\"avatar\"\n                        twoline\n                        hasMeta\n                        @request-selected=${this._reload}\n                      >\n                        <div slot=\"graphic\" class=\"icon-background reload\">\n                          <ha-svg-icon .path=${mdiAutoFix}></ha-svg-icon>\n                        </div>\n                        <span>\n                          ${this.hass.localize(\n                            \"ui.dialogs.restart.reload.title\"\n                          )}\n                        </span>\n                        <span slot=\"secondary\">\n                          ${this.hass.localize(\n                            \"ui.dialogs.restart.reload.description\"\n                          )}\n                        </span>\n                      </ha-list-item>\n                    `\n                  : null}\n                <ha-list-item\n                  graphic=\"avatar\"\n                  twoline\n                  hasMeta\n                  @request-selected=${this._restart}\n                >\n                  <div slot=\"graphic\" class=\"icon-background restart\">\n                    <ha-svg-icon .path=${mdiRefresh}></ha-svg-icon>\n                  </div>\n                  <span>\n                    ${this.hass.localize(\"ui.dialogs.restart.restart.title\")}\n                  </span>\n                  <span slot=\"secondary\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.restart.restart.description\"\n                    )}\n                  </span>\n                </ha-list-item>\n                ${showRebootShutdown\n                  ? html`\n                      <div class=\"divider\"></div>\n                      <p class=\"section\">\n                        ${this.hass.localize(\n                          \"ui.dialogs.restart.advanced_options\"\n                        )}\n                      </p>\n                      <ha-list-item\n                        graphic=\"avatar\"\n                        twoline\n                        hasMeta\n                        @request-selected=${this._hostReboot}\n                      >\n                        <div slot=\"graphic\" class=\"icon-background reboot\">\n                          <ha-svg-icon .path=${mdiPowerCycle}></ha-svg-icon>\n                        </div>\n                        <span>\n                          ${this.hass.localize(\n                            \"ui.dialogs.restart.reboot.title\"\n                          )}\n                        </span>\n                        <span slot=\"secondary\">\n                          ${this.hass.localize(\n                            \"ui.dialogs.restart.reboot.description\"\n                          )}\n                        </span>\n                      </ha-list-item>\n                      <ha-list-item\n                        graphic=\"avatar\"\n                        twoline\n                        hasMeta\n                        @request-selected=${this._hostShutdown}\n                      >\n                        <div slot=\"graphic\" class=\"icon-background shutdown\">\n                          <ha-svg-icon .path=${mdiPower}></ha-svg-icon>\n                        </div>\n                        <span>\n                          ${this.hass.localize(\n                            \"ui.dialogs.restart.shutdown.title\"\n                          )}\n                        </span>\n                        <span slot=\"secondary\">\n                          ${this.hass.localize(\n                            \"ui.dialogs.restart.shutdown.description\"\n                          )}\n                        </span>\n                      </ha-list-item>\n                    `\n                  : null}\n              </mwc-list>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _reload(ev) {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n\n    this.closeDialog();\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.dialogs.restart.reload.reloading\"),\n      duration: 1000,\n    });\n\n    try {\n      await this.hass.callService(\"homeassistant\", \"reload_all\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\"ui.dialogs.restart.reload.failed\"),\n        text: err.message,\n      });\n    }\n  }\n\n  private async _restart(ev) {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._showRestartDialog();\n  }\n\n  private async _showRestartDialog() {\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.restart.restart.confirm_title\"),\n      text: this.hass.localize(\n        \"ui.dialogs.restart.restart.confirm_description\"\n      ),\n      confirmText: this.hass.localize(\n        \"ui.dialogs.restart.restart.confirm_action\"\n      ),\n      destructive: true,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    this.closeDialog();\n\n    try {\n      await this.hass.callService(\"homeassistant\", \"restart\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\"ui.dialogs.restart.restart.failed\"),\n        text: err.message,\n      });\n    }\n  }\n\n  private async _hostReboot(ev): Promise<void> {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.restart.reboot.confirm_title\"),\n      text: this.hass.localize(\"ui.dialogs.restart.reboot.confirm_description\"),\n      confirmText: this.hass.localize(\n        \"ui.dialogs.restart.reboot.confirm_action\"\n      ),\n      destructive: true,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    this.closeDialog();\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.dialogs.restart.reboot.rebooting\"),\n      duration: 0,\n    });\n\n    try {\n      await rebootHost(this.hass);\n    } catch (err: any) {\n      // Ignore connection errors, these are all expected\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\"ui.dialogs.restart.reboot.failed\"),\n          text: extractApiErrorMessage(err),\n        });\n      }\n    }\n  }\n\n  private async _hostShutdown(ev): Promise<void> {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.dialogs.restart.shutdown.confirm_title\"),\n      text: this.hass.localize(\n        \"ui.dialogs.restart.shutdown.confirm_description\"\n      ),\n      confirmText: this.hass.localize(\n        \"ui.dialogs.restart.shutdown.confirm_action\"\n      ),\n      destructive: true,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    this.closeDialog();\n\n    showToast(this, {\n      message: this.hass.localize(\"ui.dialogs.restart.shutdown.shutting_down\"),\n      duration: 0,\n    });\n\n    try {\n      await shutdownHost(this.hass);\n    } catch (err: any) {\n      // Ignore connection errors, these are all expected\n      if (this.hass.connection.connected && !ignoreSupervisorError(err)) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\"ui.dialogs.restart.shutdown.failed\"),\n          text: extractApiErrorMessage(err),\n        });\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n        }\n        .icon-background {\n          border-radius: 50%;\n          color: #fff;\n        }\n        .reload {\n          background-color: #5f8a49;\n        }\n        .restart {\n          background-color: #ffd500;\n          color: #665500;\n        }\n        .reboot {\n          background-color: #ba1b1b;\n          color: #fff;\n        }\n        .shutdown {\n          background-color: #0b1d29;\n          color: #fff;\n        }\n        .divider {\n          height: 1px;\n          background-color: var(--divider-color);\n        }\n        .section {\n          font-weight: 500;\n          font-size: 14px;\n          line-height: 20px;\n          margin: 8px 0 4px 0;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        .loader {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          padding: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-restart\": DialogRestart;\n  }\n}\n"],"names":[],"sourceRoot":""}