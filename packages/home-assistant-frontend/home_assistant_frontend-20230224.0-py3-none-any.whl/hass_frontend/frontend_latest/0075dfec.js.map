{"version":3,"file":"0075dfec.js","mappings":";;;;AAoEA;AACA;;;AAQA;;AAIA;;AAGA;AAGA;;AAEA;;;AAIA;AACA;AACA;AACA;AAGA;;;;;AAKA;;AAIA;AACA;;AAEA;;;AAUA;;AAxHA;;;;AAkIA;;;;AAMA;AACA;;AAEA;AACA;;;;AAIA;;;;AAKA;AACA;;AAEA;;AAEA;;;AAIA;AACA;;AAEA;;;AAMA;;;;;AAsEA","sources":["webpack://home-assistant-frontend/./src/panels/config/areas/dialog-area-registry-detail.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport { mdiPencil } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-alert\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../../components/ha-picture-upload\";\nimport \"../../../components/ha-textfield\";\nimport { AreaRegistryEntryMutableParams } from \"../../../data/area_registry\";\nimport { showAliasesDialog } from \"../../../dialogs/aliases/show-dialog-aliases\";\nimport { CropOptions } from \"../../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { AreaRegistryDetailDialogParams } from \"./show-dialog-area-registry-detail\";\n\nconst cropOptions: CropOptions = {\n  round: false,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: 1.78,\n};\n\nclass DialogAreaDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _aliases!: string[];\n\n  @state() private _picture!: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: AreaRegistryDetailDialogParams;\n\n  @state() private _submitting?: boolean;\n\n  public async showDialog(\n    params: AreaRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry ? this._params.entry.name : \"\";\n    this._aliases = this._params.entry ? this._params.entry.aliases : [];\n    this._picture = this._params.entry?.picture || null;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = !this._isNameValid();\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          entry\n            ? entry.name\n            : this.hass.localize(\"ui.panel.config.areas.editor.default_name\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${entry\n              ? html`\n                  <div>\n                    ${this.hass.localize(\n                      \"ui.panel.config.areas.editor.area_id\"\n                    )}:\n                    ${entry.area_id}\n                  </div>\n                `\n              : \"\"}\n\n            <ha-textfield\n              .value=${this._name}\n              @input=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.name\")}\n              .errorMessage=${this.hass.localize(\n                \"ui.panel.config.areas.editor.name_required\"\n              )}\n              .invalid=${nameInvalid}\n              dialogInitialFocus\n            ></ha-textfield>\n\n            <div class=\"label\">\n              ${this.hass.localize(\n                \"ui.panel.config.areas.editor.aliases_section\"\n              )}\n            </div>\n            <mwc-list class=\"aliases\" @action=${this._handleAliasesClicked}>\n              <mwc-list-item .twoline=${this._aliases.length > 0} hasMeta>\n                <span>\n                  ${this._aliases.length > 0\n                    ? this.hass.localize(\n                        \"ui.panel.config.areas.editor.configured_aliases\",\n                        { count: this._aliases.length }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.areas.editor.no_aliases\"\n                      )}\n                </span>\n                <span slot=\"secondary\">\n                  ${[...this._aliases]\n                    .sort((a, b) =>\n                      stringCompare(a, b, this.hass.locale.language)\n                    )\n                    .join(\", \")}\n                </span>\n                <ha-svg-icon slot=\"meta\" .path=${mdiPencil}></ha-svg-icon>\n              </mwc-list-item>\n            </mwc-list>\n            <div class=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.areas.editor.aliases_description\"\n              )}\n            </div>\n\n            <ha-picture-upload\n              .hass=${this.hass}\n              .value=${this._picture}\n              crop\n              .cropOptions=${cropOptions}\n              @change=${this._pictureChanged}\n            ></ha-picture-upload>\n          </div>\n        </div>\n        ${entry\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteEntry}\n                .disabled=${this._submitting}\n              >\n                ${this.hass.localize(\"ui.panel.config.areas.editor.delete\")}\n              </mwc-button>\n            `\n          : html``}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${nameInvalid || this._submitting}\n        >\n          ${entry\n            ? this.hass.localize(\"ui.panel.config.areas.editor.update\")\n            : this.hass.localize(\"ui.panel.config.areas.editor.create\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleAliasesClicked() {\n    showAliasesDialog(this, {\n      name: this._name,\n      aliases: this._aliases,\n      updateAliases: async (aliases: string[]) => {\n        this._aliases = aliases;\n      },\n    });\n  }\n\n  private _isNameValid() {\n    return this._name.trim() !== \"\";\n  }\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _pictureChanged(ev: PolymerChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      const values: AreaRegistryEntryMutableParams = {\n        name: this._name.trim(),\n        picture: this._picture,\n        aliases: this._aliases,\n      };\n      if (this._params!.entry) {\n        await this._params!.updateEntry!(values);\n      } else {\n        await this._params!.createEntry!(values);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.areas.editor.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry!()) {\n        this.closeDialog();\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-textfield {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-registry-detail\": DialogAreaDetail;\n  }\n}\n\ncustomElements.define(\"dialog-area-registry-detail\", DialogAreaDetail);\n"],"names":[],"sourceRoot":""}