{"version":3,"file":"16986e61.js","mappings":";AA+BA;AACA;AACA;;;AAGA;AACA;;AAEA;;;AAIA;AACA;;;;;;;AAOA;;;AAKA;AACA;;;;;;AAMA;;;AAKA;AACA;;;;;;AAMA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;;AC1FA;;;AAGA;AACA;;AAEA;AACA;;;;;;;AAOA;;AAIA;;AAEA;AACA;AAGA;AAEA;AACA;;;;;;AAOA;AACA;AACA;;;;;AAKA;;;;AAKA;AACA;;AAEA;;AAEA;AAEA;;AAGA;AACA;;AAEA;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;AAgIA","sources":["webpack://home-assistant-frontend/./src/components/entity/state-info.ts","webpack://home-assistant-frontend/./src/panels/calendar/dialog-calendar-event-detail.ts"],"sourcesContent":["import \"@polymer/paper-tooltip/paper-tooltip\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-relative-time\";\nimport \"./state-badge\";\n\n@customElement(\"state-info\")\nclass StateInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  // property used only in CSS\n  @property({ type: Boolean, reflect: true }) public rtl = false;\n\n  @property() public color?: string;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    const name = computeStateName(this.stateObj);\n\n    return html`<state-badge\n        .stateObj=${this.stateObj}\n        .stateColor=${true}\n        .color=${this.color}\n      ></state-badge>\n      <div class=\"info\">\n        <div class=\"name\" .title=${name} .inDialog=${this.inDialog}>\n          ${name}\n        </div>\n        ${this.inDialog\n          ? html`<div class=\"time-ago\">\n              <ha-relative-time\n                id=\"last_changed\"\n                .hass=${this.hass}\n                .datetime=${this.stateObj.last_changed}\n                capitalize\n              ></ha-relative-time>\n              <paper-tooltip animation-delay=\"0\" for=\"last_changed\">\n                <div>\n                  <div class=\"row\">\n                    <span class=\"column-name\">\n                      ${this.hass.localize(\n                        \"ui.dialogs.more_info_control.last_changed\"\n                      )}:\n                    </span>\n                    <ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${this.stateObj.last_changed}\n                      capitalize\n                    ></ha-relative-time>\n                  </div>\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.dialogs.more_info_control.last_updated\"\n                      )}:\n                    </span>\n                    <ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${this.stateObj.last_updated}\n                      capitalize\n                    ></ha-relative-time>\n                  </div>\n                </div>\n              </paper-tooltip>\n            </div>`\n          : html`<div class=\"extra-info\"><slot></slot></div>`}\n      </div>`;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      this.rtl = computeRTL(this.hass);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        min-width: 120px;\n        white-space: nowrap;\n      }\n\n      state-badge {\n        float: left;\n      }\n      :host([rtl]) state-badge {\n        float: right;\n      }\n\n      .info {\n        margin-left: 56px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        height: 100%;\n      }\n\n      :host([rtl]) .info {\n        margin-right: 56px;\n        margin-left: 0;\n        text-align: right;\n      }\n\n      .name {\n        color: var(--primary-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .name[in-dialog],\n      :host([secondary-line]) .name {\n        line-height: 20px;\n      }\n\n      .time-ago,\n      .extra-info,\n      .extra-info > * {\n        color: var(--secondary-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .row {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        width: 100%;\n        justify-content: space-between;\n        margin: 0 2px 4px 0;\n      }\n\n      .row:last-child {\n        margin-bottom: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-info\": StateInfo;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiCalendarClock, mdiClose } from \"@mdi/js\";\nimport { addDays, isSameDay } from \"date-fns/esm\";\nimport { toDate } from \"date-fns-tz\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { formatDate } from \"../../common/datetime/format_date\";\nimport { formatDateTime } from \"../../common/datetime/format_date_time\";\nimport { formatTime } from \"../../common/datetime/format_time\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isDate } from \"../../common/string/is_date\";\nimport \"../../components/entity/state-info\";\nimport \"../../components/ha-date-input\";\nimport \"../../components/ha-time-input\";\nimport {\n  CalendarEventMutableParams,\n  deleteCalendarEvent,\n} from \"../../data/calendar\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../lovelace/components/hui-generic-entity-row\";\nimport { showConfirmEventDialog } from \"./show-confirm-event-dialog-box\";\nimport { CalendarEventDetailDialogParams } from \"./show-dialog-calendar-event-detail\";\nimport { showCalendarEventEditDialog } from \"./show-dialog-calendar-event-editor\";\nimport { renderRRuleAsText } from \"./recurrence\";\n\nclass DialogCalendarEventDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: CalendarEventDetailDialogParams;\n\n  @state() private _calendarId?: string;\n\n  @state() private _submitting = false;\n\n  @state() private _error?: string;\n\n  @state() private _data!: CalendarEventMutableParams;\n\n  public async showDialog(\n    params: CalendarEventDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    if (params.entry) {\n      const entry = params.entry!;\n      this._data = entry;\n      this._calendarId = params.calendarId;\n    }\n  }\n\n  private closeDialog(): void {\n    this._calendarId = undefined;\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this._calendarId!];\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${html`\n          <div class=\"header_title\">${this._data!.summary}</div>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.dialogs.generic.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n            class=\"header_button\"\n          ></ha-icon-button>\n        `}\n      >\n        <div class=\"content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"field\">\n            <ha-svg-icon .path=${mdiCalendarClock}></ha-svg-icon>\n            <div class=\"value\">\n              ${this._formatDateRange()}<br />\n              ${this._data!.rrule\n                ? this._renderRRuleAsText(this._data.rrule)\n                : \"\"}\n              ${this._data.description\n                ? html`<br />\n                    <div class=\"description\">${this._data.description}</div>\n                    <br />`\n                : html``}\n            </div>\n          </div>\n\n          <div class=\"attribute\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              .color=${this._params.color}\n              inDialog\n            ></state-info>\n          </div>\n        </div>\n        ${this._params.canDelete\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteEvent}\n                .disabled=${this._submitting}\n              >\n                ${this.hass.localize(\"ui.components.calendar.event.delete\")}\n              </mwc-button>\n            `\n          : \"\"}\n        ${this._params.canEdit\n          ? html`<mwc-button\n              slot=\"primaryAction\"\n              @click=${this._editEvent}\n              .disabled=${this._submitting}\n            >\n              ${this.hass.localize(\"ui.components.calendar.event.edit\")}\n            </mwc-button>`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _renderRRuleAsText(value: string) {\n    if (!value) {\n      return \"\";\n    }\n    try {\n      const ruleText = renderRRuleAsText(this.hass, value);\n      if (ruleText !== undefined) {\n        return html`<div id=\"text\">${ruleText}</div>`;\n      }\n      return html`<div id=\"text\">Cannot convert recurrence rule</div>`;\n    } catch (e) {\n      return \"Error while processing the rule\";\n    }\n  }\n\n  private _formatDateRange() {\n    // Parse a dates in the browser timezone\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const start = toDate(this._data!.dtstart, { timeZone: timeZone });\n    const endValue = toDate(this._data!.dtend, { timeZone: timeZone });\n    // All day events should be displayed as a day earlier\n    const end = isDate(this._data.dtend) ? addDays(endValue, -1) : endValue;\n    // The range can be shortened when the start and end are on the same day.\n    if (isSameDay(start, end)) {\n      if (isDate(this._data.dtstart)) {\n        // Single date string only\n        return formatDate(start, this.hass.locale);\n      }\n      // Single day with a start/end time range\n      return `${formatDate(start, this.hass.locale)} ${formatTime(\n        start,\n        this.hass.locale\n      )} - ${formatTime(end, this.hass.locale)}`;\n    }\n    // An event across multiple dates, optionally with a time range\n    return `${\n      isDate(this._data.dtstart)\n        ? formatDate(start, this.hass.locale)\n        : formatDateTime(start, this.hass.locale)\n    } - ${\n      isDate(this._data.dtend)\n        ? formatDate(end, this.hass.locale)\n        : formatDateTime(end, this.hass.locale)\n    }`;\n  }\n\n  private async _editEvent() {\n    showCalendarEventEditDialog(this, this._params!);\n    this.closeDialog();\n  }\n\n  private async _deleteEvent() {\n    this._submitting = true;\n    const entry = this._params!.entry!;\n    const range = await showConfirmEventDialog(this, {\n      title: this.hass.localize(\n        \"ui.components.calendar.event.confirm_delete.delete\"\n      ),\n      text: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.recurring_prompt\"\n          )\n        : this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.prompt\"\n          ),\n      confirmText: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete_this\"\n          )\n        : this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete\"\n          ),\n      confirmFutureText: entry.recurrence_id\n        ? this.hass.localize(\n            \"ui.components.calendar.event.confirm_delete.delete_future\"\n          )\n        : undefined,\n    });\n    if (range === undefined) {\n      // Cancel\n      this._submitting = false;\n      return;\n    }\n    try {\n      await deleteCalendarEvent(\n        this.hass!,\n        this._calendarId!,\n        entry.uid!,\n        entry.recurrence_id || \"\",\n        range!\n      );\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n      return;\n    } finally {\n      this._submitting = false;\n    }\n    await this._params!.updated();\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        state-info {\n          line-height: 40px;\n        }\n        ha-svg-icon {\n          width: 40px;\n          margin-right: 8px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n          vertical-align: top;\n        }\n        .field {\n          display: flex;\n        }\n        .description {\n          color: var(--secondary-text-color);\n          max-width: 300px;\n          overflow-wrap: break-word;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-calendar-event-detail\": DialogCalendarEventDetail;\n  }\n}\n\ncustomElements.define(\n  \"dialog-calendar-event-detail\",\n  DialogCalendarEventDetail\n);\n"],"names":[],"sourceRoot":""}