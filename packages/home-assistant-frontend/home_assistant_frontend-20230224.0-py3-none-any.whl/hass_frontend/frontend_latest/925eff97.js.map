{"version":3,"file":"925eff97.js","mappings":";AAgBA;AAGA;;ACkCA;;AAKA;;AAaA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AAEA;AAIA;AACA;AAIA;;AAEA;AACA;;AAGA;;AAMA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAKA;AACA;;;AAGA;AAmBA;;AAGA;;AAIA;AAEA;AAGA;AACA;;;AAMA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA","sources":["webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-generic-entity-row.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { DOMAINS_INPUT_ROW } from \"../../../common/const\";\nimport { toggleAttribute } from \"../../../common/dom/toggle_attribute\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-relative-time\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { createEntityNotFoundWarning } from \"./hui-warning\";\n\nclass HuiGenericEntityRow extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public config?: EntitiesCardEntityConfig;\n\n  @property() public secondaryText?: string;\n\n  @property({ type: Boolean }) public hideName = false;\n\n  // Allows to control if this row should capture the user interaction, e.g. with its\n  // toggle switch, button or input field. Some domains dynamically decide what to show\n  // => static determination will not work => the caller has to pass the desired value in.\n  // Same applies for custom components that want to override the default behavior.\n  // Default behavior is controlled by DOMAINS_INPUT_ROW.\n  @property({ type: Boolean }) public catchInteraction?;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.config) {\n      return html``;\n    }\n    const stateObj = this.config.entity\n      ? this.hass.states[this.config.entity]\n      : undefined;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this.config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const domain = computeDomain(this.config.entity);\n    // By default, we always show a pointer, since if there is no explicit configuration provided,\n    // the frontend always assumes \"more-info\" in the action handler. We only need to hide the pointer\n    // if the tap action is explicitly set to \"none\".\n    const pointer = !(\n      this.config.tap_action && this.config.tap_action.action === \"none\"\n    );\n\n    const hasSecondary = this.secondaryText || this.config.secondary_info;\n    const name = this.config.name ?? computeStateName(stateObj);\n\n    return html`\n      <state-badge\n        class=${classMap({\n          pointer,\n        })}\n        .hass=${this.hass}\n        .stateObj=${stateObj}\n        .overrideIcon=${this.config.icon}\n        .overrideImage=${this.config.image}\n        .stateColor=${this.config.state_color}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this.config!.hold_action),\n          hasDoubleClick: hasAction(this.config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(pointer ? \"0\" : undefined)}\n      ></state-badge>\n      ${!this.hideName\n        ? html` <div\n            class=\"info ${classMap({\n              pointer,\n              \"text-content\": !hasSecondary,\n            })}\"\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(this.config!.hold_action),\n              hasDoubleClick: hasAction(this.config!.double_tap_action),\n            })}\n            .title=${name}\n          >\n            ${this.config.name || computeStateName(stateObj)}\n            ${hasSecondary\n              ? html`\n                  <div class=\"secondary\">\n                    ${this.secondaryText ||\n                    (this.config.secondary_info === \"entity-id\"\n                      ? stateObj.entity_id\n                      : this.config.secondary_info === \"last-changed\"\n                      ? html`\n                          <ha-relative-time\n                            .hass=${this.hass}\n                            .datetime=${stateObj.last_changed}\n                            capitalize\n                          ></ha-relative-time>\n                        `\n                      : this.config.secondary_info === \"last-updated\"\n                      ? html`\n                          <ha-relative-time\n                            .hass=${this.hass}\n                            .datetime=${stateObj.last_updated}\n                            capitalize\n                          ></ha-relative-time>\n                        `\n                      : this.config.secondary_info === \"last-triggered\"\n                      ? stateObj.attributes.last_triggered\n                        ? html`\n                            <ha-relative-time\n                              .hass=${this.hass}\n                              .datetime=${stateObj.attributes.last_triggered}\n                              capitalize\n                            ></ha-relative-time>\n                          `\n                        : this.hass.localize(\n                            \"ui.panel.lovelace.cards.entities.never_triggered\"\n                          )\n                      : this.config.secondary_info === \"position\" &&\n                        stateObj.attributes.current_position !== undefined\n                      ? `${this.hass.localize(\"ui.card.cover.position\")}: ${\n                          stateObj.attributes.current_position\n                        }`\n                      : this.config.secondary_info === \"tilt-position\" &&\n                        stateObj.attributes.current_tilt_position !== undefined\n                      ? `${this.hass.localize(\n                          \"ui.card.cover.tilt_position\"\n                        )}: ${stateObj.attributes.current_tilt_position}`\n                      : this.config.secondary_info === \"brightness\" &&\n                        stateObj.attributes.brightness\n                      ? html`${Math.round(\n                          (stateObj.attributes.brightness / 255) * 100\n                        )}\n                        %`\n                      : \"\")}\n                  </div>\n                `\n              : \"\"}\n          </div>`\n        : html``}\n      ${this.catchInteraction ?? !DOMAINS_INPUT_ROW.includes(domain)\n        ? html`<div\n            class=\"text-content value ${classMap({\n              pointer,\n            })}\"\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(this.config!.hold_action),\n              hasDoubleClick: hasAction(this.config!.double_tap_action),\n            })}\n          >\n            <div class=\"state\"><slot></slot></div>\n          </div>`\n        : html`<slot></slot>`}\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"no-secondary\",\n      !this.secondaryText && !this.config?.secondary_info\n    );\n    if (changedProps.has(\"hass\")) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass!));\n    }\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this.config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n        flex-direction: row;\n      }\n      .info {\n        margin-left: 16px;\n        margin-right: 8px;\n        flex: 1 1 30%;\n      }\n      .info,\n      .info > * {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .flex ::slotted(*) {\n        margin-left: 8px;\n        min-width: 0;\n      }\n      .flex ::slotted([slot=\"secondary\"]) {\n        margin-left: 0;\n      }\n      .secondary,\n      ha-relative-time {\n        color: var(--secondary-text-color);\n      }\n      state-badge {\n        flex: 0 0 40px;\n      }\n      :host([rtl]) .flex {\n        margin-left: 0;\n        margin-right: 16px;\n      }\n      :host([rtl]) .flex ::slotted(*) {\n        margin-left: 0;\n        margin-right: 8px;\n      }\n      .pointer {\n        cursor: pointer;\n      }\n      .state {\n        text-align: right;\n      }\n      .state.rtl {\n        text-align: left;\n      }\n      .value {\n        direction: ltr;\n      }\n    `;\n  }\n}\ncustomElements.define(\"hui-generic-entity-row\", HuiGenericEntityRow);\n"],"names":[],"sourceRoot":""}