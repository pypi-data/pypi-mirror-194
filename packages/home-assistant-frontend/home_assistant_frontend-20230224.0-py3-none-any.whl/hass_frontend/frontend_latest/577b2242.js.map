{"version":3,"file":"577b2242.js","mappings":";;AAqBA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA","sources":["webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n"],"names":[],"sourceRoot":""}