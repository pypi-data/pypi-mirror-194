{"version":3,"file":"d27418db.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;AC5HA;;;AANA;;;;;;;;;;;;;;;;;AA6BA;;;;ACiDA;AACA;;;;;AAQA;;;;;;;;AAUA;;AA9GA;AAiHA;;AAIA;;;;;AAOA;;;;;AAMA;AACA;;;;AAIA;;AAEA;;AAEA;;;;;AAaA;;AAGA;;;;;;AA3JA;AAkKA;;AAIA;;AAtKA;;;AA6KA;;;AAIA;;;;AAIA;;;;;;AASA;;;;;;;;;;;;;;;;;;;;AA6CA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-tip.ts","webpack://home-assistant-frontend/./src/panels/config/automation/dialog-new-automation.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { mdiLightbulbOutline } from \"@mdi/js\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { property, customElement } from \"lit/decorators\";\nimport { HomeAssistant } from \"../types\";\n\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-tip\")\nclass HaTip extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  public render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-svg-icon .path=${mdiLightbulbOutline}></ha-svg-icon>\n      <span class=\"prefix\"\n        >${this.hass.localize(\"ui.panel.config.tips.tip\")}</span\n      >\n      <span class=\"text\"><slot></slot></span>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      text-align: center;\n    }\n\n    .text {\n      direction: var(--direction);\n      margin-left: 2px;\n      margin-inline-start: 2px;\n      margin-inline-end: initial;\n      color: var(--secondary-text-color);\n    }\n\n    .prefix {\n      font-weight: 500;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tip\": HaTip;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport {\n  mdiAccount,\n  mdiFile,\n  mdiHomeAssistant,\n  mdiOpenInNew,\n  mdiPencilOutline,\n  mdiWeb,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { shouldHandleRequestSelectedEvent } from \"../../../common/mwc/handle-request-selected-event\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-tip\";\nimport { showAutomationEditor } from \"../../../data/automation\";\nimport {\n  Blueprint,\n  Blueprints,\n  BlueprintSourceType,\n  fetchBlueprints,\n  getBlueprintSourceType,\n} from \"../../../data/blueprint\";\nimport { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\nconst SOURCE_TYPE_ICONS: Record<BlueprintSourceType, string> = {\n  local: mdiFile,\n  community: mdiAccount,\n  homeassistant: mdiHomeAssistant,\n};\n\n@customElement(\"ha-dialog-new-automation\")\nclass DialogNewAutomation extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  @state() public blueprints?: Blueprints;\n\n  public showDialog(): void {\n    this._opened = true;\n    fetchBlueprints(this.hass!, \"automation\").then((blueprints) => {\n      this.blueprints = blueprints;\n    });\n  }\n\n  public closeDialog(): void {\n    if (this._opened) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._opened = false;\n  }\n\n  private _processedBlueprints = memoizeOne((blueprints?: Blueprints) => {\n    if (!blueprints) {\n      return [];\n    }\n    const result = Object.entries(blueprints)\n      .filter((entry): entry is [string, Blueprint] => !(\"error\" in entry[1]))\n      .map(([path, blueprint]) => {\n        const sourceType = getBlueprintSourceType(blueprint);\n\n        return {\n          ...blueprint.metadata,\n          sourceType,\n          path,\n        };\n      });\n    return result.sort((a, b) =>\n      stringCompare(a.name, b.name, this.hass!.locale.language)\n    );\n  });\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n\n    const processedBlueprints = this._processedBlueprints(this.blueprints);\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.automation.dialog_new.header\")\n        )}\n      >\n        <mwc-list\n          innerRole=\"listbox\"\n          itemRoles=\"option\"\n          innerAriaLabel=${this.hass.localize(\n            \"ui.panel.config.automation.dialog_new.header\"\n          )}\n          rootTabbable\n          dialogInitialFocus\n        >\n          <ha-list-item\n            hasmeta\n            twoline\n            graphic=\"icon\"\n            @request-selected=${this._blank}\n          >\n            <ha-svg-icon slot=\"graphic\" .path=${mdiPencilOutline}></ha-svg-icon>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.dialog_new.create_empty\"\n            )}\n            <span slot=\"secondary\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.dialog_new.create_empty_description\"\n              )}\n            </span>\n            <ha-icon-next slot=\"meta\"></ha-icon-next>\n          </ha-list-item>\n          <li divider role=\"separator\"></li>\n          ${processedBlueprints.map(\n            (blueprint) => html`\n              <ha-list-item\n                hasmeta\n                twoline\n                graphic=\"icon\"\n                @request-selected=${this._blueprint}\n                .path=${blueprint.path}\n              >\n                <ha-svg-icon\n                  slot=\"graphic\"\n                  .path=${SOURCE_TYPE_ICONS[blueprint.sourceType]}\n                ></ha-svg-icon>\n                ${blueprint.name}\n                <span slot=\"secondary\">\n                  ${blueprint.author\n                    ? this.hass.localize(\n                        `ui.panel.config.automation.dialog_new.blueprint_source.author`,\n                        { author: blueprint.author }\n                      )\n                    : this.hass.localize(\n                        `ui.panel.config.automation.dialog_new.blueprint_source.${blueprint.sourceType}`\n                      )}\n                </span>\n                <ha-icon-next slot=\"meta\"></ha-icon-next>\n              </ha-list-item>\n            `\n          )}\n          ${processedBlueprints.length === 0\n            ? html`\n                <a\n                  href=${documentationUrl(this.hass, \"/get-blueprints\")}\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  class=\"item\"\n                >\n                  <ha-list-item hasmeta twoline graphic=\"icon\">\n                    <ha-svg-icon slot=\"graphic\" .path=${mdiWeb}></ha-svg-icon>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.dialog_new.create_blueprint\"\n                    )}\n                    <span slot=\"secondary\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.dialog_new.create_blueprint_description\"\n                      )}\n                    </span>\n                    <ha-svg-icon slot=\"meta\" path=${mdiOpenInNew}></ha-svg-icon>\n                  </ha-list-item>\n                </a>\n              `\n            : html`\n                <ha-tip>\n                  <a\n                    href=${documentationUrl(this.hass, \"/get-blueprints\")}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.dialog_new.discover_blueprint_tip\"\n                    )}\n                  </a>\n                </ha-tip>\n              `}\n        </mwc-list>\n      </ha-dialog>\n    `;\n  }\n\n  private async _blueprint(ev) {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    const path = (ev.currentTarget! as any).path;\n    this.closeDialog();\n    showAutomationEditor({ use_blueprint: { path } });\n  }\n\n  private async _blank(ev) {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this.closeDialog();\n    showAutomationEditor();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n          --mdc-dialog-max-height: 60vh;\n        }\n        @media all and (min-width: 550px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 500px;\n          }\n        }\n        ha-icon-next {\n          width: 24px;\n        }\n        ha-tip {\n          margin-top: 8px;\n          margin-bottom: 4px;\n        }\n        a.item {\n          text-decoration: unset;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-new-automation\": DialogNewAutomation;\n  }\n}\n"],"names":[],"sourceRoot":""}