{"version":3,"file":"e9605520.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;AC3DA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;ACxGA;AAEA;;;;;;;;;;AA0BA;;;;ACjCA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;ACmLA;AACA;AACA;;AAEA;;;AAnQA;AAwQA;AAGA;;AAEA;AAEA;;AAGA;;AAEA;;AAGA;;;;;;AAOA;AACA;;AAEA;;AAIA;;AAGA;;AAGA;;AAEA;;AAGA;;AAGA;;;;;;AAMA;;;AAKA;;;;AAMA;;;AAIA;AAGA;;AAGA;AACA;;AAEA;;AAIA;AAEA;AAEA;AACA;;AAIA;AAEA;;AAGA;AAEA;AAEA;AAOA;AAEA;AACA;;AAEA;AAGA;AAEA;AAEA;AAEA;;;AAIA;;;AAKA;;;;;AAMA;AACA;AAQA;;;;;;;AAOA;;;AAGA;;AAEA;;;;;;AAWA;AACA;AAQA;;;AAGA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts","webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/panels/config/hardware/ha-config-hardware.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n","import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a>${r}</a>`\n      : html`<a target=${this.openNewTab ? \"_blank\" : \"\"} href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiPower } from \"@mdi/js\";\nimport type { ChartOptions } from \"chart.js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { numberFormatToLocale } from \"../../../common/number/format_number\";\nimport { round } from \"../../../common/number/round\";\nimport { blankBeforePercent } from \"../../../common/translations/blank_before_percent\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport \"../../../components/chart/ha-chart-base\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  ConfigEntry,\n  subscribeConfigEntries,\n} from \"../../../data/config_entries\";\nimport {\n  BOARD_NAMES,\n  HardwareInfo,\n  SystemStatusStreamMessage,\n} from \"../../../data/hardware\";\nimport {\n  fetchHassioHassOsInfo,\n  HassioHassOSInfo,\n} from \"../../../data/hassio/host\";\nimport { scanUSBDevices } from \"../../../data/usb\";\nimport { showOptionsFlowDialog } from \"../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { showRestartDialog } from \"../../../dialogs/restart/show-dialog-restart\";\nimport \"../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { DEFAULT_PRIMARY_COLOR } from \"../../../resources/ha-style\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { hardwareBrandsUrl } from \"../../../util/brands-url\";\nimport { showhardwareAvailableDialog } from \"./show-dialog-hardware-available\";\n\nconst DATASAMPLES = 60;\n\nconst DATA_SET_CONFIG = {\n  fill: \"origin\",\n  borderColor: DEFAULT_PRIMARY_COLOR,\n  backgroundColor: DEFAULT_PRIMARY_COLOR + \"2B\",\n  pointRadius: 0,\n  lineTension: 0.2,\n  borderWidth: 1,\n};\n\n@customElement(\"ha-config-hardware\")\nclass HaConfigHardware extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _error?: { code: string; message: string };\n\n  @state() private _OSData?: HassioHassOSInfo;\n\n  @state() private _hardwareInfo?: HardwareInfo;\n\n  @state() private _chartOptions?: ChartOptions;\n\n  @state() private _systemStatusData?: SystemStatusStreamMessage;\n\n  @state() private _configEntries?: { [id: string]: ConfigEntry };\n\n  private _memoryEntries: { x: number; y: number | null }[] = [];\n\n  private _cpuEntries: { x: number; y: number | null }[] = [];\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    const subs = [\n      subscribeConfigEntries(\n        this.hass,\n        (messages) => {\n          let fullUpdate = false;\n          const newEntries: ConfigEntry[] = [];\n          messages.forEach((message) => {\n            if (message.type === null || message.type === \"added\") {\n              newEntries.push(message.entry);\n              if (message.type === null) {\n                fullUpdate = true;\n              }\n            } else if (message.type === \"removed\") {\n              if (this._configEntries) {\n                delete this._configEntries[message.entry.entry_id];\n              }\n            } else if (message.type === \"updated\") {\n              if (this._configEntries) {\n                const newEntry = message.entry;\n                this._configEntries[message.entry.entry_id] = newEntry;\n              }\n            }\n          });\n          if (!newEntries.length && !fullUpdate) {\n            return;\n          }\n          const entries = [\n            ...(fullUpdate ? [] : Object.values(this._configEntries || {})),\n            ...newEntries,\n          ];\n          const configEntries: { [id: string]: ConfigEntry } = {};\n          for (const entry of entries) {\n            configEntries[entry.entry_id] = entry;\n          }\n          this._configEntries = configEntries;\n        },\n        { type: [\"hardware\"] }\n      ),\n    ];\n\n    if (isComponentLoaded(this.hass, \"hardware\")) {\n      subs.push(\n        this.hass.connection.subscribeMessage<SystemStatusStreamMessage>(\n          (message) => {\n            // Only store the last 60 entries\n            this._memoryEntries.shift();\n            this._cpuEntries.shift();\n\n            this._memoryEntries.push({\n              x: new Date(message.timestamp).getTime(),\n              y: message.memory_used_percent,\n            });\n            this._cpuEntries.push({\n              x: new Date(message.timestamp).getTime(),\n              y: message.cpu_percent,\n            });\n\n            this._systemStatusData = message;\n          },\n          {\n            type: \"hardware/subscribe_system_status\",\n          }\n        )\n      );\n    }\n\n    return subs;\n  }\n\n  protected willUpdate(): void {\n    if (!this.hasUpdated) {\n      this._chartOptions = {\n        animation: false,\n        responsive: true,\n        scales: {\n          y: {\n            gridLines: {\n              drawTicks: false,\n            },\n            ticks: {\n              maxTicksLimit: 7,\n              fontSize: 10,\n              max: 100,\n              min: 0,\n              stepSize: 1,\n              callback: (value) =>\n                value + blankBeforePercent(this.hass.locale) + \"%\",\n            },\n          },\n          x: {\n            type: \"time\",\n            adapters: {\n              date: {\n                locale: this.hass.locale,\n              },\n            },\n            gridLines: {\n              display: true,\n              drawTicks: false,\n            },\n            ticks: {\n              maxRotation: 0,\n              sampleSize: 5,\n              autoSkipPadding: 20,\n              major: {\n                enabled: true,\n              },\n              fontSize: 10,\n              autoSkip: true,\n              maxTicksLimit: 5,\n            },\n          },\n        },\n        // @ts-expect-error\n        locale: numberFormatToLocale(this.hass.locale),\n      };\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._load();\n\n    const date = new Date();\n    // Force graph to start drawing from the right\n    for (let i = 0; i < DATASAMPLES; i++) {\n      const t = new Date(date);\n      t.setSeconds(t.getSeconds() - 5 * (DATASAMPLES - i));\n      this._memoryEntries.push({ x: t.getTime(), y: null });\n      this._cpuEntries.push({ x: t.getTime(), y: null });\n    }\n  }\n\n  protected render(): TemplateResult {\n    let boardId: string | undefined;\n    let boardName: string | undefined;\n    let imageURL: string | undefined;\n    let documentationURL: string | undefined;\n    let boardConfigEntries: ConfigEntry[] = [];\n\n    const boardData = this._hardwareInfo?.hardware.find(\n      (hw) => hw.board !== null\n    );\n\n    const dongles = this._hardwareInfo?.hardware.filter(\n      (hw) =>\n        hw.dongle !== null &&\n        (!hw.config_entries.length ||\n          hw.config_entries.some(\n            (entryId) =>\n              this._configEntries?.[entryId] &&\n              !this._configEntries[entryId].disabled_by\n          ))\n    );\n\n    if (boardData) {\n      boardConfigEntries = boardData.config_entries\n        .map((id) => this._configEntries?.[id])\n        .filter(\n          (entry) => entry?.supports_options && !entry.disabled_by\n        ) as ConfigEntry[];\n      boardId = boardData.board!.hassio_board_id;\n      boardName = boardData.name;\n      documentationURL = boardData.url;\n      imageURL = hardwareBrandsUrl({\n        category: \"boards\",\n        manufacturer: boardData.board!.manufacturer,\n        model: boardData.board!.model,\n        darkOptimized: this.hass.themes?.darkMode,\n      });\n    } else if (this._OSData?.board) {\n      boardId = this._OSData.board;\n      boardName = BOARD_NAMES[this._OSData.board];\n    }\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.hardware.caption\")}\n      >\n        ${isComponentLoaded(this.hass, \"hassio\")\n          ? html`\n              <ha-icon-button\n                slot=\"toolbar-icon\"\n                .path=${mdiPower}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.hardware.restart_homeassistant\"\n                )}\n                @click=${this._showRestartDialog}\n              ></ha-icon-button>\n            `\n          : \"\"}\n        ${this._error\n          ? html`\n              <ha-alert alert-type=\"error\"\n                >${this._error.message || this._error.code}</ha-alert\n              >\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${boardName\n            ? html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    <mwc-list>\n                      <ha-list-item\n                        noninteractive\n                        graphic=${ifDefined(imageURL ? \"medium\" : undefined)}\n                        .twoline=${Boolean(boardId)}\n                      >\n                        ${imageURL\n                          ? html`<img alt=\"\" slot=\"graphic\" src=${imageURL} />`\n                          : \"\"}\n                        <span class=\"primary-text\">\n                          ${boardName ||\n                          this.hass.localize(\"ui.panel.config.hardware.board\")}\n                        </span>\n                        ${boardId\n                          ? html`\n                              <span class=\"secondary-text\" slot=\"secondary\"\n                                >${boardId}</span\n                              >\n                            `\n                          : \"\"}\n                      </ha-list-item>\n                      ${documentationURL\n                        ? html`\n                            <ha-clickable-list-item\n                              .href=${documentationURL}\n                              openNewTab\n                              twoline\n                              hasMeta\n                            >\n                              <span\n                                >${this.hass.localize(\n                                  \"ui.panel.config.hardware.documentation\"\n                                )}</span\n                              >\n                              <span slot=\"secondary\"\n                                >${this.hass.localize(\n                                  \"ui.panel.config.hardware.documentation_description\"\n                                )}</span\n                              >\n                              <ha-icon-next slot=\"meta\"></ha-icon-next>\n                            </ha-clickable-list-item>\n                          `\n                        : \"\"}\n                    </mwc-list>\n                  </div>\n                  ${boardConfigEntries.length ||\n                  isComponentLoaded(this.hass, \"hassio\")\n                    ? html`<div class=\"card-actions\">\n                        ${boardConfigEntries.length\n                          ? html`\n                              <mwc-button\n                                .entry=${boardConfigEntries[0]}\n                                @click=${this._openOptionsFlow}\n                              >\n                                ${this.hass.localize(\n                                  \"ui.panel.config.hardware.configure\"\n                                )}\n                              </mwc-button>\n                            `\n                          : null}\n                        ${isComponentLoaded(this.hass, \"hassio\")\n                          ? html`\n                              <mwc-button @click=${this._openHardware}>\n                                ${this.hass.localize(\n                                  \"ui.panel.config.hardware.available_hardware.title\"\n                                )}\n                              </mwc-button>\n                            `\n                          : null}\n                      </div>`\n                    : \"\"}\n                </ha-card>\n              `\n            : \"\"}\n          ${dongles?.length\n            ? html`<ha-card>\n                ${dongles.map((dongle) => {\n                  const configEntry = dongle.config_entries\n                    .map((id) => this._configEntries?.[id])\n                    .filter(\n                      (entry) => entry?.supports_options && !entry.disabled_by\n                    )[0];\n                  return html`<div class=\"row\">\n                    ${dongle.name}${configEntry\n                      ? html`<mwc-button\n                          .entry=${configEntry}\n                          @click=${this._openOptionsFlow}\n                        >\n                          ${this.hass.localize(\n                            \"ui.panel.config.hardware.configure\"\n                          )}\n                        </mwc-button>`\n                      : \"\"}\n                  </div>`;\n                })}\n              </ha-card>`\n            : \"\"}\n          ${this._systemStatusData\n            ? html`<ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.hardware.processor\"\n                      )}\n                    </div>\n                    <div class=\"value\">\n                      ${this._systemStatusData.cpu_percent ||\n                      \"-\"}${blankBeforePercent(this.hass.locale)}%\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .hass=${this.hass}\n                      .data=${{\n                        datasets: [\n                          {\n                            ...DATA_SET_CONFIG,\n                            data: this._cpuEntries,\n                          },\n                        ],\n                      }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>\n                <ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\"ui.panel.config.hardware.memory\")}\n                    </div>\n                    <div class=\"value\">\n                      ${round(this._systemStatusData.memory_used_mb / 1024, 1)}\n                      GB /\n                      ${round(\n                        (this._systemStatusData.memory_used_mb! +\n                          this._systemStatusData.memory_free_mb!) /\n                          1024,\n                        0\n                      )}\n                      GB\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .hass=${this.hass}\n                      .data=${{\n                        datasets: [\n                          {\n                            ...DATA_SET_CONFIG,\n                            data: this._memoryEntries,\n                          },\n                        ],\n                      }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>`\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _load() {\n    if (isComponentLoaded(this.hass, \"usb\")) {\n      await scanUSBDevices(this.hass);\n    }\n\n    const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n    try {\n      if (isComponentLoaded(this.hass, \"hardware\")) {\n        this._hardwareInfo = await this.hass.callWS({ type: \"hardware/info\" });\n      }\n\n      if (isHassioLoaded && !this._hardwareInfo?.hardware.length) {\n        this._OSData = await fetchHassioHassOsInfo(this.hass);\n      }\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _openOptionsFlow(ev) {\n    const entry = ev.currentTarget.entry;\n    if (!entry) {\n      return;\n    }\n    showOptionsFlowDialog(this, entry);\n  }\n\n  private async _openHardware() {\n    showhardwareAvailableDialog(this);\n  }\n\n  private async _showRestartDialog() {\n    showRestartDialog(this);\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 0 auto;\n        height: 100%;\n        justify-content: space-between;\n        flex-direction: column;\n        display: flex;\n        margin-bottom: 16px;\n      }\n      .card-content {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 16px;\n      }\n\n      .primary-text {\n        font-size: 16px;\n      }\n      .secondary-text {\n        font-size: 14px;\n      }\n\n      .header {\n        padding: 16px;\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .header .title {\n        color: var(--secondary-text-color);\n        font-size: 18px;\n      }\n\n      .header .value {\n        font-size: 16px;\n      }\n      .row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        height: 48px;\n        padding: 8px 16px;\n      }\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-hardware\": HaConfigHardware;\n  }\n}\n"],"names":[],"sourceRoot":""}