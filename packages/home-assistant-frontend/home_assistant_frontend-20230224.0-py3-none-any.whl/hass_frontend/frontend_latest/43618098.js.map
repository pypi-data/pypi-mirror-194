{"version":3,"file":"43618098.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;;AC/FA;AACA;;;;AAUA;AAOA;AAGA;AACA;;AAXA;AAEA;;;AAeA;AACA;AA7EA;;;;AAoFA;AAGA;;;AAGA;;;AAGA;;AA7FA;;;;;;AAqGA;;;;;;AAMA;;;AAKA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/dialog-manage-cloudhook/dialog-manage-cloudhook.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiContentCopy, mdiOpenInNew } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { copyToClipboard } from \"../../../../common/util/copy-clipboard\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../../components/ha-textfield\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showToast } from \"../../../../util/toast\";\nimport { WebhookDialogParams } from \"./show-dialog-manage-cloudhook\";\n\nexport class DialogManageCloudhook extends LitElement {\n  protected hass?: HomeAssistant;\n\n  @state() private _params?: WebhookDialogParams;\n\n  @query(\"ha-textfield\") _input!: HaTextField;\n\n  public showDialog(params: WebhookDialogParams) {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._params) {\n      return html``;\n    }\n    const { webhook, cloudhook } = this._params;\n    const docsUrl =\n      webhook.domain === \"automation\"\n        ? documentationUrl(\n            this.hass!,\n            \"/docs/automation/trigger/#webhook-trigger\"\n          )\n        : documentationUrl(this.hass!, `/integrations/${webhook.domain}/`);\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass!,\n          this.hass!.localize(\n            \"ui.panel.config.cloud.dialog_cloudhook.webhook_for\",\n            { name: webhook.name }\n          )\n        )}\n      >\n        <div>\n          <p>\n            ${!cloudhook.managed\n              ? html`\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.dialog_cloudhook.managed_by_integration\"\n                  )}\n                `\n              : html`\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.dialog_cloudhook.info_disable_webhook\"\n                  )}\n                  <button class=\"link\" @click=${this._disableWebhook}>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.dialog_cloudhook.link_disable_webhook\"\n                    )}</button\n                  >.\n                `}\n            <br />\n            <a href=${docsUrl} target=\"_blank\" rel=\"noreferrer\">\n              ${this.hass!.localize(\n                \"ui.panel.config.cloud.dialog_cloudhook.view_documentation\"\n              )}\n              <ha-svg-icon .path=${mdiOpenInNew}></ha-svg-icon>\n            </a>\n          </p>\n          <ha-textfield\n            .label=${this.hass!.localize(\n              \"ui.panel.config.cloud.dialog_cloudhook.public_url\"\n            )}\n            .value=${cloudhook.cloudhook_url}\n            iconTrailing\n            readOnly\n            @click=${this.focusInput}\n          >\n            <ha-icon-button\n              @click=${this._copyUrl}\n              slot=\"trailingIcon\"\n              .path=${mdiContentCopy}\n            ></ha-icon-button>\n          </ha-textfield>\n        </div>\n\n        <a\n          href=${docsUrl}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          slot=\"secondaryAction\"\n        >\n          <mwc-button>\n            ${this.hass!.localize(\n              \"ui.panel.config.cloud.dialog_cloudhook.view_documentation\"\n            )}\n          </mwc-button>\n        </a>\n        <mwc-button @click=${this.closeDialog} slot=\"primaryAction\">\n          ${this.hass!.localize(\"ui.panel.config.cloud.dialog_cloudhook.close\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _disableWebhook() {\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.config.cloud.dialog_cloudhook.confirm_disable_title\"\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.config.cloud.dialog_cloudhook.confirm_disable_text\",\n        { name: this._params!.webhook.name }\n      ),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirmText: this.hass!.localize(\"ui.common.disable\"),\n      destructive: true,\n    });\n    if (confirmed) {\n      this._params!.disableHook();\n      this.closeDialog();\n    }\n  }\n\n  private focusInput(ev) {\n    const inputElement = ev.currentTarget as HaTextField;\n    inputElement.select();\n  }\n\n  private async _copyUrl(ev): Promise<void> {\n    if (!this.hass) return;\n    ev.stopPropagation();\n    const inputElement = ev.target.parentElement as HaTextField;\n    inputElement.select();\n    const url = this.hass.hassUrl(inputElement.value);\n\n    await copyToClipboard(url);\n    showToast(this, {\n      message: this.hass.localize(\"ui.common.copied_clipboard\"),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          width: 650px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        ha-textfield > ha-icon-button {\n          --mdc-icon-button-size: 24px;\n          --mdc-icon-size: 18px;\n        }\n        button.link {\n          color: var(--primary-color);\n          text-decoration: none;\n        }\n        a {\n          text-decoration: none;\n        }\n        a ha-svg-icon {\n          --mdc-icon-size: 16px;\n        }\n        p {\n          margin-top: 0;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-manage-cloudhook\": DialogManageCloudhook;\n  }\n}\n\ncustomElements.define(\"dialog-manage-cloudhook\", DialogManageCloudhook);\n"],"names":[],"sourceRoot":""}