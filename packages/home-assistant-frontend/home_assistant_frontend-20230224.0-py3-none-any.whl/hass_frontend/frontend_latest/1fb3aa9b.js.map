{"version":3,"file":"1fb3aa9b.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;AC5EA;;;AAGA;;;AAaA;;AAUA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;;;;AAKA;AACA;;AAEA;;AAIA;;;AAIA;AACA;;AAGA;;AAQA;;;AAIA;AACA;;;AAKA;;;AAYA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/lovelace/dashboards/dialog-lovelace-dashboard-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../common/string/slugify\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport { CoreFrontendUserData } from \"../../../../data/frontend\";\nimport {\n  LovelaceDashboard,\n  LovelaceDashboardCreateParams,\n  LovelaceDashboardMutableParams,\n} from \"../../../../data/lovelace\";\nimport { DEFAULT_PANEL, setDefaultPanel } from \"../../../../data/panel\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceDashboardDetailsDialogParams } from \"./show-dialog-lovelace-dashboard-detail\";\n\n@customElement(\"dialog-lovelace-dashboard-detail\")\nexport class DialogLovelaceDashboardDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: LovelaceDashboardDetailsDialogParams;\n\n  @state() private _urlPathChanged = false;\n\n  @state() private _data?: Partial<LovelaceDashboard>;\n\n  @state() private _error?: Record<string, string>;\n\n  @state() private _submitting = false;\n\n  public showDialog(params: LovelaceDashboardDetailsDialogParams): void {\n    this._params = params;\n    this._error = undefined;\n    this._urlPathChanged = false;\n    if (this._params.dashboard) {\n      this._data = this._params.dashboard;\n    } else {\n      this._data = {\n        show_in_sidebar: true,\n        icon: undefined,\n        title: \"\",\n        require_admin: false,\n        mode: \"storage\",\n      };\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._data = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._data) {\n      return html``;\n    }\n    const defaultPanelUrlPath = this.hass.defaultPanel;\n    const titleInvalid = !this._data.title || !this._data.title.trim();\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.urlPath\n            ? this._data.title ||\n                this.hass.localize(\n                  \"ui.panel.config.lovelace.dashboards.detail.edit_dashboard\"\n                )\n            : this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.detail.new_dashboard\"\n              )\n        )}\n      >\n        <div>\n          ${this._params.dashboard && !this._params.dashboard.id\n            ? this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.cant_edit_yaml\"\n              )\n            : this._params.urlPath === \"lovelace\"\n            ? this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.cant_edit_default\"\n              )\n            : html`\n                <ha-form\n                  .schema=${this._schema(this._params, this.hass.userData)}\n                  .data=${this._data}\n                  .hass=${this.hass}\n                  .error=${this._error}\n                  .computeLabel=${this._computeLabel}\n                  @value-changed=${this._valueChanged}\n                ></ha-form>\n              `}\n        </div>\n        ${this._params.urlPath\n          ? html`\n              ${this._params.dashboard?.id\n                ? html`\n                    <mwc-button\n                      slot=\"secondaryAction\"\n                      class=\"warning\"\n                      @click=${this._deleteDashboard}\n                      .disabled=${this._submitting}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.lovelace.dashboards.detail.delete\"\n                      )}\n                    </mwc-button>\n                  `\n                : \"\"}\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=${this._toggleDefault}\n                .disabled=${this._params.urlPath === \"lovelace\" &&\n                defaultPanelUrlPath === \"lovelace\"}\n              >\n                ${this._params.urlPath === defaultPanelUrlPath\n                  ? this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.remove_default\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.set_default\"\n                    )}\n              </mwc-button>\n            `\n          : \"\"}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateDashboard}\n          .disabled=${(this._error && \"url_path\" in this._error) ||\n          titleInvalid ||\n          this._submitting}\n          dialogInitialFocus\n        >\n          ${this._params.urlPath\n            ? this._params.dashboard?.id\n              ? this.hass.localize(\n                  \"ui.panel.config.lovelace.dashboards.detail.update\"\n                )\n              : this.hass.localize(\"ui.common.close\")\n            : this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.detail.create\"\n              )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _schema = memoizeOne(\n    (\n      params: LovelaceDashboardDetailsDialogParams,\n      userData: CoreFrontendUserData | null | undefined\n    ) =>\n      [\n        {\n          name: \"title\",\n          required: true,\n          selector: {\n            text: {},\n          },\n        },\n        {\n          name: \"icon\",\n          required: true,\n          selector: {\n            icon: {},\n          },\n        },\n        ...(!params.dashboard && userData?.showAdvanced\n          ? ([\n              {\n                name: \"url_path\",\n                required: true,\n                selector: { text: {} },\n              },\n            ] as const)\n          : []),\n        {\n          name: \"require_admin\",\n          required: true,\n          selector: {\n            boolean: {},\n          },\n        },\n        {\n          name: \"show_in_sidebar\",\n          required: true,\n          selector: {\n            boolean: {},\n          },\n        },\n      ] as const\n  );\n\n  private _computeLabel = (\n    entry: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.lovelace.dashboards.detail.${\n        entry.name === \"show_in_sidebar\"\n          ? \"show_sidebar\"\n          : entry.name === \"url_path\"\n          ? \"url\"\n          : entry.name\n      }`\n    );\n\n  private _valueChanged(ev: CustomEvent) {\n    this._error = undefined;\n    const value = ev.detail.value;\n    if (value.url_path !== this._data?.url_path) {\n      this._urlPathChanged = true;\n      if (\n        !value.url_path ||\n        value.url_path === \"lovelace\" ||\n        !/^[a-zA-Z0-9_-]+-[a-zA-Z0-9_-]+$/.test(value.url_path)\n      ) {\n        this._error = {\n          url_path: this.hass.localize(\n            \"ui.panel.config.lovelace.dashboards.detail.url_error_msg\"\n          ),\n        };\n      }\n    }\n    if (value.title !== this._data?.title) {\n      this._data = value;\n      this._fillUrlPath(value.title);\n    } else {\n      this._data = value;\n    }\n  }\n\n  private _fillUrlPath(title: string) {\n    if ((this.hass.userData?.showAdvanced && this._urlPathChanged) || !title) {\n      return;\n    }\n\n    const slugifyTitle = slugify(title, \"-\");\n    this._data = {\n      ...this._data,\n      url_path: slugifyTitle.includes(\"-\")\n        ? slugifyTitle\n        : `dashboard-${slugifyTitle}`,\n    };\n  }\n\n  private _toggleDefault() {\n    const urlPath = this._params?.urlPath;\n    if (!urlPath) {\n      return;\n    }\n    setDefaultPanel(\n      this,\n      urlPath === this.hass.defaultPanel ? DEFAULT_PANEL : urlPath\n    );\n  }\n\n  private async _updateDashboard() {\n    if (this._params?.urlPath && !this._params.dashboard?.id) {\n      this.closeDialog();\n    }\n    this._submitting = true;\n    try {\n      if (this._params!.dashboard) {\n        const values: Partial<LovelaceDashboardMutableParams> = {\n          require_admin: this._data!.require_admin,\n          show_in_sidebar: this._data!.show_in_sidebar,\n          icon: this._data!.icon || undefined,\n          title: this._data!.title,\n        };\n        await this._params!.updateDashboard(values);\n      } else {\n        await this._params!.createDashboard(\n          this._data as LovelaceDashboardCreateParams\n        );\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = { base: err?.message || \"Unknown error\" };\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteDashboard() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeDashboard()) {\n        this.closeDialog();\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyleDialog, css``];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-lovelace-dashboard-detail\": DialogLovelaceDashboardDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}