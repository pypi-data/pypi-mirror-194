{"version":3,"file":"f8572554.js","mappings":";AA8EA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAmCA;ACxGA;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-target.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts"],"sourcesContent":["import { HassEntity, HassServiceTarget } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport {\n  DeviceRegistryEntry,\n  getDeviceIntegrationLookup,\n} from \"../../data/device_registry\";\nimport {\n  EntitySources,\n  fetchEntitySourcesWithCache,\n} from \"../../data/entity_sources\";\nimport {\n  filterSelectorDevices,\n  filterSelectorEntities,\n  TargetSelector,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-target-picker\";\n\n@customElement(\"ha-selector-target\")\nexport class HaTargetSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: TargetSelector;\n\n  @property() public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _entitySources?: EntitySources;\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  private _hasIntegration(selector: TargetSelector) {\n    return (\n      (selector.target?.entity &&\n        ensureArray(selector.target.entity).some(\n          (filter) => filter.integration\n        )) ||\n      (selector.target?.device &&\n        ensureArray(selector.target.device).some(\n          (device) => device.integration\n        ))\n    );\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return html``;\n    }\n\n    return html`<ha-target-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .helper=${this.helper}\n      .deviceFilter=${this._filterDevices}\n      .entityFilter=${this._filterEntities}\n      .disabled=${this.disabled}\n    ></ha-target-picker>`;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector.target?.entity) {\n      return true;\n    }\n\n    return ensureArray(this.selector.target.entity).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (!this.selector.target?.device) {\n      return true;\n    }\n\n    const deviceIntegrations = this._entitySources\n      ? this._deviceIntegrationLookup(\n          this._entitySources,\n          Object.values(this.hass.entities)\n        )\n      : undefined;\n\n    return ensureArray(this.selector.target.device).some((filter) =>\n      filterSelectorDevices(filter, device, deviceIntegrations)\n    );\n  };\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-target-picker {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-target\": HaTargetSelector;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n"],"names":[],"sourceRoot":""}