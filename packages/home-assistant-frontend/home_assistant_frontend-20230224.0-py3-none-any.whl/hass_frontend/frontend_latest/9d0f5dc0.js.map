{"version":3,"file":"9d0f5dc0.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAkCA;AClBA;AAGA;;;;AC4DA;;AAEA;;;;;AASA;;AAIA;AACA;AACA;;;;;;;AASA;AACA;AACA;;;AAKA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;;;ACtMA;;;AAKA;;;AAKA;;;;AAMA;AAIA;;AAEA;;AAMA;;AAGA;AAEA;;AAEA;;AAEA;;AAGA;;;AAIA;AACA;AACA;AACA;;AAEA;;;AAvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;;ACnDA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAGA;;;;;;AAQA;;AAGA;AACA;;;;;AAOA;;AAEA;;;AAIA;;;AAKA;;;AAOA;AAEA;;;AAIA;AACA;AACA;AACA;;;;;AAMA;;;;AAKA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA","sources":["webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-device-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-device-pairing-status-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-add-devices-page.ts"],"sourcesContent":["import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport memoizeOne from \"memoize-one\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../../../common/entity/compute_state_name\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/entity/state-badge\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-service-description\";\nimport { updateDeviceRegistryEntry } from \"../../../../../data/device_registry\";\nimport { ZHADevice } from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../../../components/ha-area-picker\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../../../../../mixins/subscribe-mixin\";\nimport {\n  subscribeEntityRegistry,\n  EntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../../../data/entity_registry\";\nimport { EntityRegistryStateEntry } from \"../../../devices/ha-config-device-page\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport { getIeeeTail } from \"./functions\";\nimport { slugify } from \"../../../../../common/string/slugify\";\n\n@customElement(\"zha-device-card\")\nclass ZHADeviceCard extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device?: ZHADevice;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _entities: EntityRegistryEntry[] = [];\n\n  private _deviceEntities = memoizeOne(\n    (\n      deviceId: string,\n      entities: EntityRegistryEntry[]\n    ): EntityRegistryStateEntry[] =>\n      entities\n        .filter((entity) => entity.device_id === deviceId)\n        .map((entity) => ({\n          ...entity,\n          stateName: this._computeEntityName(entity),\n        }))\n        .sort((ent1, ent2) =>\n          stringCompare(\n            ent1.stateName || `zzz${ent1.entity_id}`,\n            ent2.stateName || `zzz${ent2.entity_id}`,\n            this.hass.locale.language\n          )\n        )\n  );\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.device) {\n      return html``;\n    }\n    const entities = this._deviceEntities(\n      this.device.device_reg_id,\n      this._entities\n    );\n\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          <div>\n            <div class=\"model\">${this.device.model}</div>\n            <div class=\"manuf\">\n              ${this.hass.localize(\n                \"ui.dialogs.zha_device_info.manuf\",\n                \"manufacturer\",\n                this.device.manufacturer\n              )}\n            </div>\n          </div>\n\n          <div class=\"device-entities\">\n            ${entities.map((entity) =>\n              !entity.disabled_by\n                ? html`\n                    <state-badge\n                      @click=${this._openMoreInfo}\n                      .title=${entity.stateName!}\n                      .stateObj=${this.hass!.states[entity.entity_id]}\n                      slot=\"item-icon\"\n                    ></state-badge>\n                  `\n                : \"\"\n            )}\n          </div>\n          <paper-input\n            type=\"string\"\n            @change=${this._rename}\n            .value=${this.device.user_given_name || this.device.name}\n            .label=${this.hass.localize(\n              \"ui.dialogs.zha_device_info.zha_device_card.device_name_placeholder\"\n            )}\n          ></paper-input>\n          <ha-area-picker\n            .hass=${this.hass}\n            .device=${this.device.device_reg_id}\n            @value-changed=${this._areaPicked}\n          ></ha-area-picker>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _rename(event): Promise<void> {\n    if (!this.hass || !this.device) {\n      return;\n    }\n    const device = this.device;\n\n    const oldDeviceName = device.user_given_name || device.name;\n    const newDeviceName = event.target.value;\n    this.device.user_given_name = newDeviceName;\n    await updateDeviceRegistryEntry(this.hass, device.device_reg_id, {\n      name_by_user: newDeviceName,\n    });\n\n    if (!oldDeviceName || !newDeviceName || oldDeviceName === newDeviceName) {\n      return;\n    }\n    const entities = this._deviceEntities(device.device_reg_id, this._entities);\n\n    const oldDeviceEntityId = slugify(oldDeviceName);\n    const newDeviceEntityId = slugify(newDeviceName);\n    const ieeeTail = getIeeeTail(device.ieee);\n\n    const updateProms = entities.map((entity) => {\n      const name = entity.name || entity.stateName;\n      let newEntityId: string | null = null;\n      let newName: string | null = null;\n\n      if (name && name.includes(oldDeviceName)) {\n        newName = name.replace(` ${ieeeTail}`, \"\");\n        newName = newName.replace(oldDeviceName, newDeviceName);\n        newEntityId = entity.entity_id.replace(`_${ieeeTail}`, \"\");\n        newEntityId = newEntityId.replace(oldDeviceEntityId, newDeviceEntityId);\n      }\n\n      if (!newName && !newEntityId) {\n        return undefined;\n      }\n\n      return updateEntityRegistryEntry(this.hass!, entity.entity_id, {\n        name: newName || name,\n        disabled_by: entity.disabled_by,\n        new_entity_id: newEntityId || entity.entity_id,\n      });\n    });\n    await Promise.all(updateProms);\n  }\n\n  private _openMoreInfo(ev: MouseEvent): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: (ev.currentTarget as any).stateObj.entity_id,\n    });\n  }\n\n  private _computeEntityName(entity: EntityRegistryEntry): string | null {\n    if (this.hass.states[entity.entity_id]) {\n      return computeStateName(this.hass.states[entity.entity_id]);\n    }\n    return entity.name;\n  }\n\n  private async _areaPicked(ev: CustomEvent) {\n    const picker = ev.currentTarget as any;\n\n    const area = ev.detail.value;\n    try {\n      await updateDeviceRegistryEntry(this.hass, this.device!.device_reg_id, {\n        area_id: area,\n      });\n      this.device!.area_id = area;\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.error_saving_area\",\n          \"error\",\n          err.message\n        ),\n      });\n      picker.value = null;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .device-entities {\n          display: flex;\n          flex-wrap: wrap;\n          padding: 4px;\n          justify-content: left;\n          min-height: 48px;\n        }\n        .device {\n          width: 30%;\n        }\n        .device .name {\n          font-weight: bold;\n        }\n        .device .manuf {\n          color: var(--secondary-text-color);\n          margin-bottom: 20px;\n          word-wrap: break-word;\n        }\n        .extra-info {\n          margin-top: 8px;\n          word-wrap: break-word;\n        }\n        state-badge {\n          cursor: pointer;\n        }\n\n        ha-card {\n          border: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-card\": ZHADeviceCard;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/entity/state-badge\";\nimport \"../../../../../components/ha-area-picker\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-service-description\";\nimport {\n  CONFIGURED,\n  INCOMPLETE_PAIRING_STATUSES,\n  INITIALIZED,\n  INTERVIEW_COMPLETE,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { formatAsPaddedHex } from \"./functions\";\nimport \"./zha-device-card\";\n\n@customElement(\"zha-device-pairing-status-card\")\nclass ZHADevicePairingStatusCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device?: ZHADevice;\n\n  @property({ type: Boolean }) public narrow?: boolean;\n\n  @state() private _showHelp = false;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.device) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        outlined\n        class=\"discovered ${classMap({\n          initialized: this.device.pairing_status === INITIALIZED,\n        })}\"\n        ><div class=\"header\">\n          <h4>\n            ${this.hass!.localize(\n              `ui.panel.config.zha.device_pairing_card.${this.device.pairing_status}`\n            )}\n          </h4>\n          <h1>\n            ${this.hass!.localize(\n              `ui.panel.config.zha.device_pairing_card.${this.device.pairing_status}_status_text`\n            )}\n          </h1>\n        </div>\n        <div class=\"card-content\">\n          ${[INTERVIEW_COMPLETE, CONFIGURED].includes(\n            this.device.pairing_status!\n          )\n            ? html`\n                <div class=\"model\">${this.device.model}</div>\n                <div class=\"manuf\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.zha_device_info.manuf\",\n                    \"manufacturer\",\n                    this.device.manufacturer\n                  )}\n                </div>\n              `\n            : html``}\n          <div class=\"info\">\n            ${INCOMPLETE_PAIRING_STATUSES.includes(this.device.pairing_status!)\n              ? html`\n                  <div class=\"text\">IEEE: ${this.device.ieee}</div>\n                  <div class=\"text\">\n                    NWK: ${formatAsPaddedHex(this.device.nwk)}\n                  </div>\n                `\n              : html``}\n          </div>\n          ${this.device.pairing_status === INITIALIZED\n            ? html`\n                <zha-device-card\n                  class=\"card\"\n                  .hass=${this.hass}\n                  .device=${this.device}\n                  .narrow=${this.narrow}\n                  .showHelp=${this._showHelp}\n                ></zha-device-card>\n              `\n            : html``}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .discovered {\n          --ha-card-border-color: var(--primary-color);\n        }\n        .discovered.initialized {\n          --ha-card-border-color: var(--success-color);\n        }\n        .discovered .header {\n          background: var(--primary-color);\n          color: var(--text-primary-color);\n          padding: 8px;\n          text-align: center;\n          margin-bottom: 20px;\n          /* Padding is subtracted for nested elements with border radiuses */\n          border-top-left-radius: calc(\n            var(--ha-card-border-radius, 12px) - 2px\n          );\n          border-top-right-radius: calc(\n            var(--ha-card-border-radius, 12px) - 2px\n          );\n        }\n        .discovered.initialized .header {\n          background: var(--success-color);\n        }\n        h1 {\n          margin: 0;\n        }\n        h4 {\n          margin: 0;\n        }\n        .text,\n        .manuf,\n        .model {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-pairing-status-card\": ZHADevicePairingStatusCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../components/ha-circular-progress\";\nimport \"../../../../../components/ha-service-description\";\nimport {\n  DEVICE_MESSAGE_TYPES,\n  LOG_OUTPUT,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../../../types\";\nimport { zhaTabs } from \"./zha-config-dashboard\";\nimport \"./zha-device-pairing-status-card\";\n\n@customElement(\"zha-add-devices-page\")\nclass ZHAAddDevicesPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public isWide?: boolean;\n\n  @property({ attribute: false }) public route?: Route;\n\n  @state() private _error?: string;\n\n  @state() private _discoveredDevices: Record<string, ZHADevice> = {};\n\n  @state() private _formattedEvents = \"\";\n\n  @state() private _active = false;\n\n  @state() private _showHelp = false;\n\n  @state() private _showLogs = false;\n\n  private _ieeeAddress?: string;\n\n  private _addDevicesTimeoutHandle: any = undefined;\n\n  private _subscribed?: Promise<() => Promise<void>>;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.route && this.route.path && this.route.path !== \"\") {\n      this._ieeeAddress = this.route.path.substring(1);\n    } else {\n      this._ieeeAddress = undefined;\n    }\n    this._subscribe();\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._unsubscribe();\n    this._error = undefined;\n    this._discoveredDevices = {};\n    this._formattedEvents = \"\";\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      changedProps.has(\"hass\") &&\n      !this._active &&\n      !changedProps.get(\"hass\")\n    ) {\n      this._subscribe();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route!}\n        .tabs=${zhaTabs}\n      >\n        <mwc-button slot=\"toolbar-icon\" @click=${this._toggleLogs}\n          >${this._showLogs ? \"Hide logs\" : \"Show logs\"}</mwc-button\n        >\n        <div class=\"searching\">\n          ${this._active\n            ? html`\n                <h1>\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.add_device_page.spinner\"\n                  )}\n                </h1>\n                <ha-circular-progress\n                  active\n                  alt=\"Searching\"\n                ></ha-circular-progress>\n              `\n            : html`\n                <div>\n                  <mwc-button @click=${this._subscribe} class=\"search-button\">\n                    ${this.hass!.localize(\n                      \"ui.panel.config.zha.add_device_page.search_again\"\n                    )}\n                  </mwc-button>\n                </div>\n              `}\n        </div>\n        ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n        <div class=\"content\">\n          ${Object.keys(this._discoveredDevices).length < 1\n            ? html`\n                <div class=\"discovery-text\">\n                  <h4>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.zha.add_device_page.pairing_mode\"\n                    )}\n                  </h4>\n                  <h4>\n                    ${this.hass!.localize(\n                      this._active\n                        ? \"ui.panel.config.zha.add_device_page.discovered_text\"\n                        : \"ui.panel.config.zha.add_device_page.no_devices_found\"\n                    )}\n                  </h4>\n                </div>\n              `\n            : html`\n                ${Object.values(this._discoveredDevices).map(\n                  (device) => html`\n                    <zha-device-pairing-status-card\n                      class=\"card\"\n                      .hass=${this.hass}\n                      .device=${device}\n                      .narrow=${this.narrow}\n                      .showHelp=${this._showHelp}\n                    ></zha-device-pairing-status-card>\n                  `\n                )}\n              `}\n        </div>\n        ${this._showLogs\n          ? html`<paper-textarea\n              readonly\n              max-rows=\"10\"\n              class=\"log\"\n              value=${this._formattedEvents}\n            >\n            </paper-textarea>`\n          : \"\"}\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _toggleLogs() {\n    this._showLogs = !this._showLogs;\n  }\n\n  private _handleMessage(message: any): void {\n    if (message.type === LOG_OUTPUT) {\n      this._formattedEvents += message.log_entry.message + \"\\n\";\n      if (this.shadowRoot) {\n        const paperTextArea = this.shadowRoot.querySelector(\"paper-textarea\");\n        if (paperTextArea) {\n          const textArea = (paperTextArea.inputElement as any).textarea;\n          textArea.scrollTop = textArea.scrollHeight;\n        }\n      }\n    }\n    if (message.type && DEVICE_MESSAGE_TYPES.includes(message.type)) {\n      this._discoveredDevices[message.device_info.ieee] = message.device_info;\n    }\n  }\n\n  private _unsubscribe(): void {\n    this._active = false;\n    if (this._addDevicesTimeoutHandle) {\n      clearTimeout(this._addDevicesTimeoutHandle);\n    }\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _deactivate(): void {\n    this._active = false;\n    if (this._addDevicesTimeoutHandle) {\n      clearTimeout(this._addDevicesTimeoutHandle);\n    }\n  }\n\n  private _subscribe(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._active = true;\n    const data: any = { type: \"zha/devices/permit\", duration: 254 };\n    if (this._ieeeAddress) {\n      data.ieee = this._ieeeAddress;\n    }\n    this._subscribed = this.hass.connection.subscribeMessage(\n      (message) => this._handleMessage(message),\n      data\n    );\n    this._addDevicesTimeoutHandle = setTimeout(\n      () => this._deactivate(),\n      254000\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .discovery-text {\n          width: 100%;\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        .content {\n          display: flex;\n          flex-wrap: wrap;\n          padding: 4px;\n          justify-content: center;\n        }\n        .error {\n          color: var(--error-color);\n        }\n        ha-circular-progress {\n          padding: 20px;\n        }\n        .searching {\n          margin-top: 20px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        .card {\n          margin: 8px;\n        }\n        .log {\n          padding: 16px;\n        }\n        .toggle-help-icon {\n          position: absolute;\n          margin-top: 16px;\n          margin-right: 16px;\n          top: -6px;\n          right: 0;\n          color: var(--primary-color);\n        }\n        ha-service-description {\n          margin-top: 16px;\n          margin-left: 16px;\n          display: block;\n          color: grey;\n        }\n        .search-button {\n          margin-top: 16px;\n          margin-left: 16px;\n        }\n        .help-text {\n          color: grey;\n          padding-left: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-add-devices-page\": ZHAAddDevicesPage;\n  }\n}\n"],"names":[],"sourceRoot":""}