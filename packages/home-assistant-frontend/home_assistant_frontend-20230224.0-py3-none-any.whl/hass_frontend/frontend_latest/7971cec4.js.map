{"version":3,"file":"7971cec4.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;ACnEA;AACA;;;AAGA;AAGA;;;AAQA;AAGA;AAGA;AAKA;;;AAKA;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA;AAEA;AAGA;AAEA;;AAGA;AACA;AACA;AAGA;;AArEA;;;;;;;;;;;;;;;;;;;;;;;AAuGA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/profile/dialog-ha-mfa-module-setup-flow.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-form/ha-form\";\nimport \"../../components/ha-markdown\";\nimport { autocompleteLoginFields } from \"../../data/auth\";\nimport {\n  DataEntryFlowStep,\n  DataEntryFlowStepForm,\n} from \"../../data/data_entry_flow\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\nlet instance = 0;\n\n@customElement(\"ha-mfa-module-setup-flow\")\nclass HaMfaModuleSetupFlow extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @state() private _dialogClosedCallback?: (params: {\n    flowFinished: boolean;\n  }) => void;\n\n  @state() private _instance?: number;\n\n  @state() private _loading = false;\n\n  @state() private _opened = false;\n\n  @state() private _stepData: any = {};\n\n  @state() private _step?: DataEntryFlowStep;\n\n  @state() private _errorMessage?: string;\n\n  public showDialog({ continueFlowId, mfaModuleId, dialogClosedCallback }) {\n    this._instance = instance++;\n    this._dialogClosedCallback = dialogClosedCallback;\n    this._opened = true;\n\n    const fetchStep = continueFlowId\n      ? this.hass.callWS({\n          type: \"auth/setup_mfa\",\n          flow_id: continueFlowId,\n        })\n      : this.hass.callWS({\n          type: \"auth/setup_mfa\",\n          mfa_module_id: mfaModuleId,\n        });\n\n    const curInstance = this._instance;\n\n    fetchStep.then((step) => {\n      if (curInstance !== this._instance) return;\n\n      this._processStep(step);\n    });\n  }\n\n  public closeDialog() {\n    // Closed dialog by clicking on the overlay\n    if (this._step) {\n      this._flowDone();\n    }\n    this._opened = false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        .heading=${this._computeStepTitle()}\n        @closed=${this.closeDialog}\n      >\n        <div>\n          ${this._errorMessage\n            ? html`<div class=\"error\">${this._errorMessage}</div>`\n            : \"\"}\n          ${!this._step\n            ? html`<div class=\"init-spinner\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>`\n            : html`${this._step.type === \"abort\"\n                ? html` <ha-markdown\n                    allowsvg\n                    breaks\n                    .content=${this.hass.localize(\n                      `component.auth.mfa_setup.${this._step.handler}.abort.${this._step.reason}`\n                    )}\n                  ></ha-markdown>`\n                : this._step.type === \"create_entry\"\n                ? html`<p>\n                    ${this.hass.localize(\n                      \"ui.panel.profile.mfa_setup.step_done\",\n                      \"step\",\n                      this._step.title\n                    )}\n                  </p>`\n                : this._step.type === \"form\"\n                ? html`<ha-markdown\n                      allowsvg\n                      breaks\n                      .content=${this.hass.localize(\n                        `component.auth.mfa_setup.${this._step!.handler}.step.${\n                          (this._step! as DataEntryFlowStepForm).step_id\n                        }.description`,\n                        this._step!.description_placeholders\n                      )}\n                    ></ha-markdown>\n                    <ha-form\n                      .hass=${this.hass}\n                      .data=${this._stepData}\n                      .schema=${autocompleteLoginFields(this._step.data_schema)}\n                      .error=${this._step.errors}\n                      .computeLabel=${this._computeLabel}\n                      .computeError=${this._computeError}\n                      @value-changed=${this._stepDataChanged}\n                    ></ha-form>`\n                : \"\"}`}\n        </div>\n        ${[\"abort\", \"create_entry\"].includes(this._step?.type || \"\")\n          ? html`<mwc-button slot=\"primaryAction\" @click=${this.closeDialog}\n              >${this.hass.localize(\n                \"ui.panel.profile.mfa_setup.close\"\n              )}</mwc-button\n            >`\n          : \"\"}\n        ${this._step?.type === \"form\"\n          ? html`<mwc-button\n              slot=\"primaryAction\"\n              .disabled=${this._loading}\n              @click=${this._submitStep}\n              >${this.hass.localize(\n                \"ui.panel.profile.mfa_setup.submit\"\n              )}</mwc-button\n            >`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .error {\n          color: red;\n        }\n        ha-dialog {\n          max-width: 500px;\n        }\n        ha-markdown {\n          --markdown-svg-background-color: white;\n          --markdown-svg-color: black;\n          display: block;\n          margin: 0 auto;\n        }\n        ha-markdown a {\n          color: var(--primary-color);\n        }\n        .init-spinner {\n          padding: 10px 100px 34px;\n          text-align: center;\n        }\n        .submit-spinner {\n          margin-right: 16px;\n        }\n      `,\n    ];\n  }\n\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.hass.loadBackendTranslation(\"mfa_setup\", \"auth\");\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.key === \"Enter\") {\n        this._submitStep();\n      }\n    });\n  }\n\n  private _stepDataChanged(ev: CustomEvent) {\n    this._stepData = ev.detail.value;\n  }\n\n  private _submitStep() {\n    this._loading = true;\n    this._errorMessage = undefined;\n\n    const curInstance = this._instance;\n\n    this.hass\n      .callWS({\n        type: \"auth/setup_mfa\",\n        flow_id: this._step!.flow_id,\n        user_input: this._stepData,\n      })\n      .then(\n        (step) => {\n          if (curInstance !== this._instance) {\n            return;\n          }\n\n          this._processStep(step);\n          this._loading = false;\n        },\n        (err) => {\n          this._errorMessage =\n            (err && err.body && err.body.message) || \"Unknown error occurred\";\n          this._loading = false;\n        }\n      );\n  }\n\n  private _processStep(step) {\n    if (!step.errors) step.errors = {};\n    this._step = step;\n    // We got a new form if there are no errors.\n    if (Object.keys(step.errors).length === 0) {\n      this._stepData = {};\n    }\n  }\n\n  private _flowDone() {\n    const flowFinished = Boolean(\n      this._step && [\"create_entry\", \"abort\"].includes(this._step.type)\n    );\n\n    this._dialogClosedCallback!({\n      flowFinished,\n    });\n\n    this._errorMessage = undefined;\n    this._step = undefined;\n    this._stepData = {};\n    this._dialogClosedCallback = undefined;\n    this.closeDialog();\n  }\n\n  private _computeStepTitle() {\n    return this._step?.type === \"abort\"\n      ? this.hass.localize(\"ui.panel.profile.mfa_setup.title_aborted\")\n      : this._step?.type === \"create_entry\"\n      ? this.hass.localize(\"ui.panel.profile.mfa_setup.title_success\")\n      : this._step?.type === \"form\"\n      ? this.hass.localize(\n          `component.auth.mfa_setup.${this._step.handler}.step.${this._step.step_id}.title`\n        )\n      : \"\";\n  }\n\n  private _computeLabel = (schema) =>\n    this.hass.localize(\n      `component.auth.mfa_setup.${this._step!.handler}.step.${\n        (this._step! as DataEntryFlowStepForm).step_id\n      }.data.${schema.name}`\n    ) || schema.name;\n\n  private _computeError = (error) =>\n    this.hass.localize(\n      `component.auth.mfa_setup.${this._step!.handler}.error.${error}`\n    ) || error;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-mfa-module-setup-flow\": HaMfaModuleSetupFlow;\n  }\n}\n"],"names":[],"sourceRoot":""}