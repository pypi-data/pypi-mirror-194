{"version":3,"file":"c29b7670.js","mappings":";AA4IA;;AAEA;;;AAGA;AACA;;;;;;AAMA;;;AAOA;;;AAQA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-statistic-card.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { formatNumber } from \"../../../common/number/format_number\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-state-icon\";\nimport {\n  fetchStatistic,\n  getDisplayUnit,\n  getStatisticLabel,\n  getStatisticMetadata,\n  isExternalStatistic,\n  StatisticsMetaData,\n} from \"../../../data/recorder\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createHeaderFooterElement } from \"../create-element/create-header-footer-element\";\nimport {\n  LovelaceCard,\n  LovelaceCardEditor,\n  LovelaceHeaderFooter,\n} from \"../types\";\nimport { HuiErrorCard } from \"./hui-error-card\";\nimport { EntityCardConfig, StatisticCardConfig } from \"./types\";\n\n@customElement(\"hui-statistic-card\")\nexport class HuiStatisticCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-statistic-card-editor\");\n    return document.createElement(\"hui-statistic-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFill: string[]\n  ) {\n    const includeDomains = [\"sensor\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFill,\n      includeDomains,\n      (stateObj: HassEntity) => \"state_class\" in stateObj.attributes\n    );\n\n    return {\n      entity: foundEntities[0] || \"\",\n      period: { calendar: { period: \"month\" } },\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticCardConfig;\n\n  @state() private _value?: number | null;\n\n  @state() private _metadata?: StatisticsMetaData;\n\n  @state() private _error?: string;\n\n  private _interval?: number;\n\n  private _footerElement?: HuiErrorCard | LovelaceHeaderFooter;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this._interval);\n  }\n\n  public setConfig(config: StatisticCardConfig): void {\n    if (!config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n    if (!config.stat_type) {\n      throw new Error(\"Statistic type must be specified\");\n    }\n    if (!config.period) {\n      throw new Error(\"Period must be specified\");\n    }\n    if (\n      config.entity &&\n      !isExternalStatistic(config.entity) &&\n      !isValidEntityId(config.entity)\n    ) {\n      throw new Error(\"Invalid entity\");\n    }\n\n    this._config = config;\n    this._error = undefined;\n    this._fetchStatistic();\n    this._fetchMetadata();\n\n    if (this._config.footer) {\n      this._footerElement = createHeaderFooterElement(this._config.footer);\n    } else if (this._footerElement) {\n      this._footerElement = undefined;\n    }\n  }\n\n  public async getCardSize(): Promise<number> {\n    let size = 2;\n    if (this._footerElement) {\n      const footerSize = computeCardSize(this._footerElement);\n      size += footerSize instanceof Promise ? await footerSize : footerSize;\n    }\n    return size;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    if (this._error) {\n      return html` <ha-alert alert-type=\"error\">${this._error}</ha-alert> `;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n    const name =\n      this._config.name ||\n      getStatisticLabel(this.hass, this._config.entity, this._metadata);\n\n    return html`\n      <ha-card @click=${this._handleClick} tabindex=\"0\">\n        <div class=\"header\">\n          <div class=\"name\" .title=${name}>${name}</div>\n          <div class=\"icon\">\n            <ha-state-icon\n              .icon=${this._config.icon}\n              .state=${stateObj}\n            ></ha-state-icon>\n          </div>\n        </div>\n        <div class=\"info\">\n          <span class=\"value\"\n            >${this._value === undefined\n              ? \"\"\n              : this._value === null\n              ? \"?\"\n              : formatNumber(this._value, this.hass.locale)}</span\n          >\n          <span class=\"measurement\"\n            >${this._config.unit ||\n            getDisplayUnit(\n              this.hass,\n              this._config.entity,\n              this._metadata\n            )}</span\n          >\n        </div>\n        ${this._footerElement}\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    // Side Effect used to update footer hass while keeping optimizations\n    if (this._footerElement) {\n      this._footerElement.hass = this.hass;\n    }\n    if (\n      changedProps.has(\"_value\") ||\n      changedProps.has(\"_metadata\") ||\n      changedProps.has(\"_error\")\n    ) {\n      return true;\n    }\n    if (this._config) {\n      return hasConfigOrEntityChanged(this, changedProps);\n    }\n    return true;\n  }\n\n  protected firstUpdated() {\n    this._fetchStatistic();\n    this._fetchMetadata();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | EntityCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config!.theme);\n    }\n  }\n\n  private async _fetchStatistic() {\n    if (!this.hass || !this._config) {\n      return;\n    }\n    clearInterval(this._interval);\n    this._interval = window.setInterval(\n      () => this._fetchStatistic(),\n      5 * 1000 * 60\n    );\n    try {\n      const stats = await fetchStatistic(\n        this.hass,\n        this._config.entity,\n        this._config.period\n      );\n      this._value = stats[this._config!.stat_type];\n      this._error = undefined;\n    } catch (e: any) {\n      this._error = e.message;\n    }\n  }\n\n  private async _fetchMetadata() {\n    if (!this.hass || !this._config) {\n      return;\n    }\n    try {\n      this._metadata = (\n        await getStatisticMetadata(this.hass, [this._config.entity])\n      )?.[0];\n    } catch (e: any) {\n      this._error = e.message;\n    }\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", { entityId: this._config!.entity });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-card {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          cursor: pointer;\n          outline: none;\n        }\n\n        .header {\n          display: flex;\n          padding: 8px 16px 0;\n          justify-content: space-between;\n        }\n\n        .name {\n          color: var(--secondary-text-color);\n          line-height: 40px;\n          font-weight: 500;\n          font-size: 16px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n\n        .icon {\n          color: var(--state-icon-color, #44739e);\n          line-height: 40px;\n        }\n\n        .info {\n          padding: 0px 16px 16px;\n          margin-top: -4px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          line-height: 28px;\n        }\n\n        .value {\n          font-size: 28px;\n          margin-right: 4px;\n        }\n\n        .measurement {\n          font-size: 18px;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistic-card\": HuiStatisticCard;\n  }\n}\n"],"names":[],"sourceRoot":""}