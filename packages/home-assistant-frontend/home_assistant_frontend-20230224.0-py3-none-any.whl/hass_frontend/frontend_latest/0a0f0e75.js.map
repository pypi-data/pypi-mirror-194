{"version":3,"file":"0a0f0e75.js","mappings":";;AAkDA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;ACuEA;AACA;AACA;AACA;;;AAMA;;;AAGA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AAKA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAnFA;;;;;;;;;;;;;;;;AAiNA;;;AC3ZA;AAGA;;;;AAQA;;AAaA;;;AAKA;;;AAGA;;;AAKA;;AA1BA;;AAGA;;;AAKA;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;ACnEA;;;AAQA;;;;;AAQA;;;;AAKA;;;AAKA;;;;AAMA;;;;AAKA;AACA;AACA;AACA;;;;AAIA;;;AAKA;AACA;;;AAGA;;;AAKA;AACA;;;;;;;AAQA;AACA;;AAzEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0OA","sources":["webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-entities-card-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/header-footer-editor/hui-header-footer-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/hui-entities-card-row-editor.ts"],"sourcesContent":["import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  boolean,\n  dynamic,\n  enums,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  type,\n  union,\n} from \"superstruct\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { customType } from \"../../../../common/structs/is-custom-type\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-textfield\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-switch\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { EntitiesCardConfig } from \"../../cards/types\";\nimport \"../../../../components/ha-theme-picker\";\nimport { TIMESTAMP_RENDERING_FORMATS } from \"../../components/types\";\nimport type { LovelaceRowConfig } from \"../../entity-rows/types\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport \"../header-footer-editor/hui-header-footer-editor\";\nimport \"../hui-entities-card-row-editor\";\nimport \"../hui-sub-element-editor\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport {\n  EditorTarget,\n  EditSubElementEvent,\n  SubElementEditorConfig,\n} from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { buttonEntityConfigStruct } from \"../structs/button-entity-struct\";\nimport { isCustomType } from \"../../../../data/lovelace_custom_cards\";\n\nconst buttonEntitiesRowConfigStruct = object({\n  type: literal(\"button\"),\n  entity: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  action_name: optional(string()),\n  tap_action: actionConfigStruct,\n  hold_action: optional(actionConfigStruct),\n  double_tap_action: optional(actionConfigStruct),\n});\n\nconst castEntitiesRowConfigStruct = object({\n  type: literal(\"cast\"),\n  view: optional(union([string(), number()])),\n  dashboard: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  hide_if_unavailable: optional(boolean()),\n});\n\nconst callServiceEntitiesRowConfigStruct = object({\n  type: literal(\"call-service\"),\n  name: string(),\n  service: string(),\n  icon: optional(string()),\n  action_name: optional(string()),\n  // \"service_data\" is kept for backwards compatibility. Replaced by \"data\".\n  service_data: optional(any()),\n  data: optional(any()),\n});\n\nconst conditionalEntitiesRowConfigStruct = object({\n  type: literal(\"conditional\"),\n  row: any(),\n  conditions: array(\n    object({\n      entity: string(),\n      state: optional(string()),\n      state_not: optional(string()),\n    })\n  ),\n});\n\nconst dividerEntitiesRowConfigStruct = object({\n  type: literal(\"divider\"),\n  style: optional(any()),\n});\n\nconst sectionEntitiesRowConfigStruct = object({\n  type: literal(\"section\"),\n  label: optional(string()),\n});\n\nconst webLinkEntitiesRowConfigStruct = object({\n  type: literal(\"weblink\"),\n  url: string(),\n  name: optional(string()),\n  icon: optional(string()),\n});\n\nconst buttonsEntitiesRowConfigStruct = object({\n  type: literal(\"buttons\"),\n  entities: array(buttonEntityConfigStruct),\n});\n\nconst attributeEntitiesRowConfigStruct = object({\n  type: literal(\"attribute\"),\n  entity: string(),\n  attribute: string(),\n  prefix: optional(string()),\n  suffix: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  format: optional(enums(TIMESTAMP_RENDERING_FORMATS)),\n});\n\nconst textEntitiesRowConfigStruct = object({\n  type: literal(\"text\"),\n  name: string(),\n  text: string(),\n  icon: optional(string()),\n});\n\nconst customEntitiesRowConfigStruct = type({\n  type: customType(),\n});\n\nconst entitiesRowConfigStruct = dynamic<any>((value) => {\n  if (value && typeof value === \"object\" && \"type\" in value) {\n    if (isCustomType((value as LovelaceRowConfig).type!)) {\n      return customEntitiesRowConfigStruct;\n    }\n\n    switch ((value as LovelaceRowConfig).type!) {\n      case \"attribute\": {\n        return attributeEntitiesRowConfigStruct;\n      }\n      case \"button\": {\n        return buttonEntitiesRowConfigStruct;\n      }\n      case \"buttons\": {\n        return buttonsEntitiesRowConfigStruct;\n      }\n      case \"call-service\": {\n        return callServiceEntitiesRowConfigStruct;\n      }\n      case \"cast\": {\n        return castEntitiesRowConfigStruct;\n      }\n      case \"conditional\": {\n        return conditionalEntitiesRowConfigStruct;\n      }\n      case \"divider\": {\n        return dividerEntitiesRowConfigStruct;\n      }\n      case \"section\": {\n        return sectionEntitiesRowConfigStruct;\n      }\n      case \"text\": {\n        return textEntitiesRowConfigStruct;\n      }\n      case \"weblink\": {\n        return webLinkEntitiesRowConfigStruct;\n      }\n    }\n  }\n\n  // No \"type\" property => has to be the default entity row config struct\n  return entitiesConfigStruct;\n});\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(union([string(), boolean()])),\n    entity: optional(entityId()),\n    theme: optional(string()),\n    icon: optional(string()),\n    show_header_toggle: optional(boolean()),\n    state_color: optional(boolean()),\n    entities: array(entitiesRowConfigStruct),\n    header: optional(headerFooterConfigStructs),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\n@customElement(\"hui-entities-card-editor\")\nexport class HuiEntitiesCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntitiesCardConfig;\n\n  @state() private _configEntities?: LovelaceRowConfig[];\n\n  @state() private _subElementEditorConfig?: SubElementEditorConfig;\n\n  public setConfig(config: EntitiesCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    if (this._subElementEditorConfig) {\n      return html`\n        <hui-sub-element-editor\n          .hass=${this.hass}\n          .config=${this._subElementEditorConfig}\n          @go-back=${this._goBack}\n          @config-changed=${this._handleSubElementChanged}\n        >\n        </hui-sub-element-editor>\n      `;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <ha-textfield\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @input=${this._valueChanged}\n        ></ha-textfield>\n        <ha-theme-picker\n          .hass=${this.hass}\n          .value=${this._theme}\n          .label=${`${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.theme\"\n          )} (${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})`}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></ha-theme-picker>\n        <div class=\"side-by-side\">\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.entities.show_header_toggle\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._config!.show_header_toggle !== false}\n              .configValue=${\"show_header_toggle\"}\n              @change=${this._valueChanged}\n            ></ha-switch>\n          </ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.state_color\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._config!.state_color}\n              .configValue=${\"state_color\"}\n              @change=${this._valueChanged}\n            ></ha-switch>\n          </ha-formfield>\n        </div>\n        <hui-header-footer-editor\n          .hass=${this.hass}\n          .configValue=${\"header\"}\n          .config=${this._config.header}\n          @value-changed=${this._valueChanged}\n          @edit-detail-element=${this._editDetailElement}\n        ></hui-header-footer-editor>\n        <hui-header-footer-editor\n          .hass=${this.hass}\n          .configValue=${\"footer\"}\n          .config=${this._config.footer}\n          @value-changed=${this._valueChanged}\n          @edit-detail-element=${this._editDetailElement}\n        ></hui-header-footer-editor>\n      </div>\n      <hui-entities-card-row-editor\n        .hass=${this.hass}\n        .entities=${this._configEntities}\n        @entities-changed=${this._valueChanged}\n        @edit-detail-element=${this._editDetailElement}\n      ></hui-entities-card-row-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n    const configValue =\n      target.configValue || this._subElementEditorConfig?.type;\n    const value =\n      target.checked !== undefined\n        ? target.checked\n        : target.value || ev.detail.config || ev.detail.value;\n\n    if (\n      (configValue! === \"title\" && target.value === this._title) ||\n      (configValue! === \"theme\" && target.value === this._theme)\n    ) {\n      return;\n    }\n\n    if (configValue === \"row\" || (ev.detail && ev.detail.entities)) {\n      const newConfigEntities =\n        ev.detail.entities || this._configEntities!.concat();\n      if (configValue === \"row\") {\n        if (!value) {\n          newConfigEntities.splice(this._subElementEditorConfig!.index!, 1);\n          this._goBack();\n        } else {\n          newConfigEntities[this._subElementEditorConfig!.index!] = value;\n        }\n\n        this._subElementEditorConfig!.elementConfig = value;\n      }\n\n      this._config = { ...this._config!, entities: newConfigEntities };\n      this._configEntities = processEditorEntities(this._config!.entities);\n    } else if (configValue) {\n      if (value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [configValue]: value,\n        };\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleSubElementChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const configValue = this._subElementEditorConfig?.type;\n    const value = ev.detail.config;\n\n    if (configValue === \"row\") {\n      const newConfigEntities = this._configEntities!.concat();\n      if (!value) {\n        newConfigEntities.splice(this._subElementEditorConfig!.index!, 1);\n        this._goBack();\n      } else {\n        newConfigEntities[this._subElementEditorConfig!.index!] = value;\n      }\n\n      this._config = { ...this._config!, entities: newConfigEntities };\n      this._configEntities = processEditorEntities(this._config!.entities);\n    } else if (configValue) {\n      if (value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [configValue]: value,\n        };\n      }\n    }\n\n    this._subElementEditorConfig = {\n      ...this._subElementEditorConfig!,\n      elementConfig: value,\n    };\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _editDetailElement(ev: HASSDomEvent<EditSubElementEvent>): void {\n    this._subElementEditorConfig = ev.detail.subElementConfig;\n  }\n\n  private _goBack(): void {\n    this._subElementEditorConfig = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .edit-entity-row-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-size: 18px;\n        }\n\n        hui-header-footer-editor {\n          padding-top: 4px;\n        }\n\n        ha-textfield {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-editor\": HuiEntitiesCardEditor;\n  }\n}\n","import { mdiClose, mdiPencil, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-button\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { LovelaceHeaderFooterConfig } from \"../../header-footer/types\";\nimport { showCreateHeaderFooterDialog } from \"./show-create-headerfooter-dialog\";\n\n@customElement(\"hui-header-footer-editor\")\nexport class HuiHeaderFooterEditor extends LitElement {\n  public hass!: HomeAssistant;\n\n  public lovelaceConfig!: LovelaceConfig;\n\n  @property({ attribute: false }) public config?: LovelaceHeaderFooterConfig;\n\n  @property() public configValue!: \"header\" | \"footer\";\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        <span>\n          ${this.hass.localize(\n            `ui.panel.lovelace.editor.header-footer.${this.configValue}`\n          )}:\n          ${!this.config?.type\n            ? this.hass!.localize(\"ui.panel.lovelace.editor.common.none\")\n            : this.hass!.localize(\n                `ui.panel.lovelace.editor.header-footer.types.${this.config?.type}.name`\n              )}\n        </span>\n      </div>\n      <div>\n        ${!this.config?.type\n          ? html`\n              <ha-icon-button\n                .label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.common.add\"\n                )}\n                .path=${mdiPlus}\n                class=\"add-icon\"\n                @click=${this._add}\n              ></ha-icon-button>\n            `\n          : html`\n              <ha-icon-button\n                .label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.common.clear\"\n                )}\n                .path=${mdiClose}\n                class=\"remove-icon\"\n                @click=${this._delete}\n              ></ha-icon-button>\n              <ha-icon-button\n                .label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.common.edit\"\n                )}\n                .path=${mdiPencil}\n                class=\"edit-icon\"\n                @click=${this._edit}\n              ></ha-icon-button>\n            `}\n      </div>\n    `;\n  }\n\n  private _edit(): void {\n    fireEvent(this, \"edit-detail-element\", {\n      subElementConfig: {\n        elementConfig: this.config,\n        type: this.configValue,\n      },\n    });\n  }\n\n  private _add(): void {\n    showCreateHeaderFooterDialog(this, {\n      pickHeaderFooter: (config) => this._elementPicked(config),\n      type: this.configValue,\n    });\n  }\n\n  private _elementPicked(config: LovelaceHeaderFooterConfig): void {\n    fireEvent(this, \"value-changed\", { value: config });\n    fireEvent(this, \"edit-detail-element\", {\n      subElementConfig: {\n        elementConfig: config,\n        type: this.configValue,\n      },\n    });\n  }\n\n  private _delete(): void {\n    fireEvent(this, \"value-changed\", { value: \"\" });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        font-size: 16px;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: 12px;\n      }\n\n      :host > div {\n        display: flex;\n        align-items: center;\n      }\n\n      ha-icon-button,\n      .header-footer-icon {\n        --mdc-icon-button-size: 36px;\n        color: var(--secondary-text-color);\n      }\n\n      .header-footer-icon {\n        padding-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-header-footer-editor\": HuiHeaderFooterEditor;\n  }\n}\n","import { mdiClose, mdiDrag, mdiPencil } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport { sortableStyles } from \"../../../resources/ha-sortable-style\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../resources/sortable.ondemand\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntityConfig, LovelaceRowConfig } from \"../entity-rows/types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"entities-changed\": {\n      entities: LovelaceRowConfig[];\n    };\n  }\n}\n\n@customElement(\"hui-entities-card-row-editor\")\nexport class HuiEntitiesCardRowEditor extends LitElement {\n  @property({ attribute: false }) protected hass?: HomeAssistant;\n\n  @property({ attribute: false }) protected entities?: LovelaceRowConfig[];\n\n  @property() protected label?: string;\n\n  private _entityKeys = new WeakMap<LovelaceRowConfig, string>();\n\n  private _sortable?: SortableInstance;\n\n  public disconnectedCallback() {\n    this._destroySortable();\n  }\n\n  private _getKey(action: LovelaceRowConfig) {\n    if (!this._entityKeys.has(action)) {\n      this._entityKeys.set(action, Math.random().toString());\n    }\n\n    return this._entityKeys.get(action)!;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entities || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <h3>\n        ${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entities\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.required\"\n        )})`}\n      </h3>\n      <div class=\"entities\">\n        ${repeat(\n          this.entities,\n          (entityConf) => this._getKey(entityConf),\n          (entityConf, index) => html`\n            <div class=\"entity\">\n              <div class=\"handle\">\n                <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n              </div>\n              ${entityConf.type\n                ? html`\n                    <div class=\"special-row\">\n                      <div>\n                        <span>\n                          ${this.hass!.localize(\n                            `ui.panel.lovelace.editor.card.entities.entity_row.${entityConf.type}`\n                          )}\n                        </span>\n                        <span class=\"secondary\"\n                          >${this.hass!.localize(\n                            \"ui.panel.lovelace.editor.card.entities.edit_special_row\"\n                          )}</span\n                        >\n                      </div>\n                    </div>\n                  `\n                : html`\n                    <ha-entity-picker\n                      allow-custom-entity\n                      hideClearIcon\n                      .hass=${this.hass}\n                      .value=${(entityConf as EntityConfig).entity}\n                      .index=${index}\n                      @value-changed=${this._valueChanged}\n                    ></ha-entity-picker>\n                  `}\n              <ha-icon-button\n                .label=${this.hass!.localize(\n                  \"ui.components.entity.entity-picker.clear\"\n                )}\n                .path=${mdiClose}\n                class=\"remove-icon\"\n                .index=${index}\n                @click=${this._removeRow}\n              ></ha-icon-button>\n              <ha-icon-button\n                .label=${this.hass!.localize(\n                  \"ui.components.entity.entity-picker.edit\"\n                )}\n                .path=${mdiPencil}\n                class=\"edit-icon\"\n                .index=${index}\n                @click=${this._editRow}\n              ></ha-icon-button>\n            </div>\n          `\n        )}\n      </div>\n      <ha-entity-picker\n        class=\"add-entity\"\n        .hass=${this.hass}\n        @value-changed=${this._addEntity}\n      ></ha-entity-picker>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._createSortable();\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(\n      this.shadowRoot!.querySelector(\".entities\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        handle: \".handle\",\n        onChoose: (evt: SortableEvent) => {\n          (evt.item as any).placeholder =\n            document.createComment(\"sort-placeholder\");\n          evt.item.after((evt.item as any).placeholder);\n        },\n        onEnd: (evt: SortableEvent) => {\n          // put back in original location\n          if ((evt.item as any).placeholder) {\n            (evt.item as any).placeholder.replaceWith(evt.item);\n            delete (evt.item as any).placeholder;\n          }\n          this._rowMoved(evt);\n        },\n      }\n    );\n  }\n\n  private _destroySortable() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private async _addEntity(ev: CustomEvent): Promise<void> {\n    const value = ev.detail.value;\n    if (value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: value as string,\n    });\n    (ev.target as HaEntityPicker).value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _rowMoved(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) {\n      return;\n    }\n\n    const newEntities = this.entities!.concat();\n\n    newEntities.splice(ev.newIndex!, 0, newEntities.splice(ev.oldIndex!, 1)[0]);\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _removeRow(ev: CustomEvent): void {\n    const index = (ev.currentTarget as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    newConfigEntities.splice(index, 1);\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const value = ev.detail.value;\n    const index = (ev.target as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    if (value === \"\" || value === undefined) {\n      newConfigEntities.splice(index, 1);\n    } else {\n      newConfigEntities[index] = {\n        ...newConfigEntities[index],\n        entity: value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _editRow(ev: CustomEvent): void {\n    const index = (ev.currentTarget as any).index;\n    fireEvent(this, \"edit-detail-element\", {\n      subElementConfig: {\n        index,\n        type: \"row\",\n        elementConfig: this.entities![index],\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-entity-picker {\n          margin-top: 8px;\n        }\n        .add-entity {\n          display: block;\n          margin-left: 31px;\n          margin-right: 71px;\n          margin-inline-start: 31px;\n          margin-inline-end: 71px;\n          direction: var(--direction);\n        }\n        .entity {\n          display: flex;\n          align-items: center;\n        }\n\n        .entity .handle {\n          padding-right: 8px;\n          cursor: move;\n          padding-inline-end: 8px;\n          padding-inline-start: initial;\n          direction: var(--direction);\n        }\n        .entity .handle > * {\n          pointer-events: none;\n        }\n\n        .entity ha-entity-picker {\n          flex-grow: 1;\n        }\n\n        .special-row {\n          height: 60px;\n          font-size: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex-grow: 1;\n        }\n\n        .special-row div {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .remove-icon,\n        .edit-icon {\n          --mdc-icon-button-size: 36px;\n          color: var(--secondary-text-color);\n        }\n\n        .secondary {\n          font-size: 12px;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-row-editor\": HuiEntitiesCardRowEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}