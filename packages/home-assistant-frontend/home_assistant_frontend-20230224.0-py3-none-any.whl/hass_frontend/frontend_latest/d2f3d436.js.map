{"version":3,"file":"d2f3d436.js","mappings":";;;;AAmGA;AACA;AACA;AACA;;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAOA;AC7GA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;AClCA;AACA;AA1GA;AA4GA;AAIA;;AAEA;AAGA;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AAKA;AAaA;AACA;;AAMA;;;AAGA;AACA;;AAKA;;AAiDA;;;;AAaA;;;AAIA;;AAOA;AACA;;;AAIA;AAGA;;;;AAIA;;;;AAoBA;AAEA;AAGA;AAEA;;AAIA;AApHA;;AAeA;;;AAeA;;AAcA;AA5CA;;AAIA;;AAOA;;;AA6GA;;;;;;;;;;;;;;;;;;;AA8JA","sources":["webpack://home-assistant-frontend/mwc-linear-progress-base.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-update-firmware-node.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {MDCResizeObserver, WithMDCResizeObserver} from '@material/linear-progress/types.js';\nimport {ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class LinearProgressBase extends LitElement {\n  @query('.mdc-linear-progress') protected rootEl!: HTMLElement;\n\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number}) progress = 0;\n\n  @property({type: Number}) buffer = 1;\n\n  @property({type: Boolean, reflect: true}) reverse = false;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-label'})\n  override ariaLabel!: string;\n\n  @state() protected stylePrimaryHalf = '';\n  @state() protected stylePrimaryFull = '';\n  @state() protected styleSecondaryQuarter = '';\n  @state() protected styleSecondaryHalf = '';\n  @state() protected styleSecondaryFull = '';\n  @state() protected animationReady = true;\n  @state() protected closedAnimationOff = false;\n  protected resizeObserver: MDCResizeObserver|null = null;\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // if detached and reattached\n    if (this.rootEl) {\n      this.attachResizeObserver();\n    }\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-linear-progress--closed': this.closed,\n      'mdc-linear-progress--closed-animation-off': this.closedAnimationOff,\n      'mdc-linear-progress--indeterminate': this.indeterminate,\n      // needed for controller-less render\n      'mdc-linear-progress--animation-ready': this.animationReady\n    };\n\n    /** @styleMap */\n    const rootStyles = {\n      '--mdc-linear-progress-primary-half': this.stylePrimaryHalf,\n      '--mdc-linear-progress-primary-half-neg':\n          this.stylePrimaryHalf !== '' ? `-${this.stylePrimaryHalf}` : '',\n      '--mdc-linear-progress-primary-full': this.stylePrimaryFull,\n      '--mdc-linear-progress-primary-full-neg':\n          this.stylePrimaryFull !== '' ? `-${this.stylePrimaryFull}` : '',\n      '--mdc-linear-progress-secondary-quarter': this.styleSecondaryQuarter,\n      '--mdc-linear-progress-secondary-quarter-neg':\n          this.styleSecondaryQuarter !== '' ? `-${this.styleSecondaryQuarter}` :\n                                              '',\n      '--mdc-linear-progress-secondary-half': this.styleSecondaryHalf,\n      '--mdc-linear-progress-secondary-half-neg':\n          this.styleSecondaryHalf !== '' ? `-${this.styleSecondaryHalf}` : '',\n      '--mdc-linear-progress-secondary-full': this.styleSecondaryFull,\n      '--mdc-linear-progress-secondary-full-neg':\n          this.styleSecondaryFull !== '' ? `-${this.styleSecondaryFull}` : '',\n    };\n\n    /** @styleMap */\n    const bufferBarStyles = {\n      'flex-basis': this.indeterminate ? '100%' : `${this.buffer * 100}%`,\n    };\n\n    /** @styleMap */\n    const primaryBarStyles = {\n      transform: this.indeterminate ? 'scaleX(1)' : `scaleX(${this.progress})`,\n    };\n\n    return html`\n      <div\n          role=\"progressbar\"\n          class=\"mdc-linear-progress ${classMap(classes)}\"\n          style=\"${styleMap(rootStyles)}\"\n          dir=\"${ifDefined(this.reverse ? 'rtl' : undefined)}\"\n          aria-label=\"${ifDefined(this.ariaLabel)}\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"1\"\n          aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\"\n        @transitionend=\"${this.syncClosedState}\">\n        <div class=\"mdc-linear-progress__buffer\">\n          <div\n            class=\"mdc-linear-progress__buffer-bar\"\n            style=${styleMap(bufferBarStyles)}>\n          </div>\n          <div class=\"mdc-linear-progress__buffer-dots\"></div>\n        </div>\n        <div\n            class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\"\n            style=${styleMap(primaryBarStyles)}>\n          <span class=\"mdc-linear-progress__bar-inner\"></span>\n        </div>\n        <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n          <span class=\"mdc-linear-progress__bar-inner\"></span>\n        </div>\n      </div>`;\n  }\n\n  override update(changedProperties: PropertyValues<this>) {\n    // - When showing the indicator, enable animations immediately.\n    // - On first render, disable the animation immediately.\n    // - For normal calls to hide the component, let transitionend event trigger\n    //   disabling of animations instead (see render method), so that animation\n    //   does not jump in the middle of fade out.\n    if (changedProperties.has('closed') &&\n        (!this.closed || changedProperties.get('closed') === undefined)) {\n      this.syncClosedState();\n    }\n    super.update(changedProperties);\n  }\n\n  override async firstUpdated(changed: PropertyValues<this>) {\n    super.firstUpdated(changed);\n\n    this.attachResizeObserver();\n  }\n\n  protected syncClosedState() {\n    this.closedAnimationOff = this.closed;\n  }\n\n  protected override updated(changed: PropertyValues<this>) {\n    // restart animation for timing if reverse changed and is indeterminate.\n    // don't restart here if indeterminate has changed as well because we don't\n    // want to incur an extra style recalculation\n    if (!changed.has('indeterminate') && changed.has('reverse') &&\n        this.indeterminate) {\n      this.restartAnimation();\n    }\n\n    // Recaclulate the animation css custom props and restart the calculation\n    // if this is not the first render cycle, otherwise, resize observer init\n    // will already handle this and prevent unnecessary rerender + style recalc\n    // but resize observer will not update animation vals while determinate\n    if (changed.has('indeterminate') &&\n        changed.get('indeterminate') !== undefined && this.indeterminate &&\n        (window as unknown as WithMDCResizeObserver).ResizeObserver) {\n      this.calculateAndSetAnimationDimensions(this.rootEl.offsetWidth);\n    }\n    super.updated(changed);\n  }\n\n  override disconnectedCallback() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    super.disconnectedCallback();\n  }\n\n  protected attachResizeObserver() {\n    if ((window as unknown as WithMDCResizeObserver).ResizeObserver) {\n      this.resizeObserver =\n          new (window as unknown as WithMDCResizeObserver)\n              .ResizeObserver((entries) => {\n                if (!this.indeterminate) {\n                  return;\n                }\n\n                for (const entry of entries) {\n                  if (entry.contentRect) {\n                    const width = entry.contentRect.width;\n                    this.calculateAndSetAnimationDimensions(width);\n                  }\n                }\n              });\n      this.resizeObserver.observe(this.rootEl);\n      return;\n    }\n\n    this.resizeObserver = null;\n  }\n\n  protected calculateAndSetAnimationDimensions(width: number) {\n    const primaryHalf = width * 0.8367142;\n    const primaryFull = width * 2.00611057;\n    const secondaryQuarter = width * 0.37651913;\n    const secondaryHalf = width * 0.84386165;\n    const secondaryFull = width * 1.60277782;\n\n    this.stylePrimaryHalf = `${primaryHalf}px`;\n    this.stylePrimaryFull = `${primaryFull}px`;\n    this.styleSecondaryQuarter = `${secondaryQuarter}px`;\n    this.styleSecondaryHalf = `${secondaryHalf}px`;\n    this.styleSecondaryFull = `${secondaryFull}px`;\n\n    // need to restart animation for custom props to apply to keyframes\n    this.restartAnimation();\n  }\n\n  protected async restartAnimation() {\n    this.animationReady = false;\n    await this.updateComplete;\n    await new Promise(requestAnimationFrame);\n    this.animationReady = true;\n    await this.updateComplete;\n  }\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"../../../../../components/ha-file-upload\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport \"../../../../../components/ha-svg-icon\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiCheckCircle, mdiCloseCircle, mdiFileUpload } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  DeviceRegistryEntry,\n  computeDeviceName,\n} from \"../../../../../data/device_registry\";\nimport {\n  abortZwaveNodeFirmwareUpdate,\n  ControllerFirmwareUpdateStatus,\n  fetchZwaveIsNodeFirmwareUpdateInProgress,\n  fetchZwaveNodeStatus,\n  NodeFirmwareUpdateStatus,\n  NodeStatus,\n  subscribeZwaveNodeStatus,\n  subscribeZwaveNodeFirmwareUpdate,\n  uploadFirmwareAndBeginUpdate,\n  ZWaveJSNodeFirmwareUpdateFinishedMessage,\n  ZWaveJSFirmwareUpdateProgressMessage,\n  ZWaveJSNodeStatusUpdatedMessage,\n  ZWaveJSNodeStatus,\n  ZWaveJSControllerFirmwareUpdateFinishedMessage,\n} from \"../../../../../data/zwave_js\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSUpdateFirmwareNodeDialogParams } from \"./show-dialog-zwave_js-update-firmware-node\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../../dialogs/generic/show-dialog-box\";\nimport { HaFormSchema } from \"../../../../../components/ha-form/types\";\n\nconst firmwareTargetSchema: HaFormSchema[] = [\n  {\n    name: \"firmware_target\",\n    type: \"integer\",\n    valueMin: 0,\n  },\n];\n\n@customElement(\"dialog-zwave_js-update-firmware-node\")\nclass DialogZWaveJSUpdateFirmwareNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private device?: DeviceRegistryEntry;\n\n  @state() private _uploading = false;\n\n  @state()\n  private _updateFinishedMessage?:\n    | ZWaveJSNodeFirmwareUpdateFinishedMessage\n    | ZWaveJSControllerFirmwareUpdateFinishedMessage;\n\n  @state()\n  private _updateProgressMessage?: ZWaveJSFirmwareUpdateProgressMessage;\n\n  @state() private _updateInProgress = false;\n\n  @state() private _firmwareFile?: File;\n\n  @state() private _nodeStatus?: ZWaveJSNodeStatus;\n\n  @state() private _firmwareTarget?: number;\n\n  private _subscribedNodeStatus?: Promise<UnsubscribeFunc>;\n\n  private _subscribedNodeFirmwareUpdate?: Promise<UnsubscribeFunc>;\n\n  private _deviceName?: string;\n\n  public showDialog(params: ZWaveJSUpdateFirmwareNodeDialogParams): void {\n    this._deviceName = computeDeviceName(params.device, this.hass!);\n    this.device = params.device;\n    this._fetchData();\n    this._subscribeNodeStatus();\n  }\n\n  public closeDialog(): void {\n    this._unsubscribeNodeFirmwareUpdate();\n    this._unsubscribeNodeStatus();\n    this.device = undefined;\n    this._updateProgressMessage = undefined;\n    this._updateFinishedMessage = undefined;\n    this._firmwareFile = undefined;\n    this._nodeStatus = undefined;\n    this._firmwareTarget = undefined;\n    this._uploading = this._updateInProgress = false;\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.device ||\n      !this._nodeStatus ||\n      this._updateInProgress === undefined\n    ) {\n      return html``;\n    }\n\n    const beginFirmwareUpdateHTML = html`<ha-file-upload\n        .hass=${this.hass}\n        .uploading=${this._uploading}\n        .icon=${mdiFileUpload}\n        label=${this._firmwareFile?.name ??\n        this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.upload_firmware\"\n        )}\n        @file-picked=${this._uploadFile}\n      ></ha-file-upload>\n      ${this._nodeStatus.is_controller_node\n        ? html``\n        : html`<p>\n              ${this.hass.localize(\n                \"ui.panel.config.zwave_js.update_firmware.firmware_target_intro\"\n              )}\n            </p>\n            <ha-form\n              .hass=${this.hass}\n              .data=${{ firmware_target: this._firmwareTarget }}\n              .schema=${firmwareTargetSchema}\n              @value-changed=${this._firmwareTargetChanged}\n            ></ha-form>`}\n      <mwc-button\n        slot=\"primaryAction\"\n        @click=${this._beginFirmwareUpdate}\n        .disabled=${this._firmwareFile === undefined}\n      >\n        ${this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.begin_update\"\n        )}\n      </mwc-button>`;\n\n    const status = this._updateFinishedMessage\n      ? this._updateFinishedMessage.success\n        ? \"success\"\n        : \"error\"\n      : undefined;\n\n    const localizationKeySuffix = this._nodeStatus.is_controller_node\n      ? \"_controller\"\n      : \"\";\n\n    const abortFirmwareUpdateButton = this._nodeStatus.is_controller_node\n      ? html``\n      : html`\n          <mwc-button slot=\"primaryAction\" @click=${this._abortFirmwareUpdate}>\n            ${this.hass.localize(\n              \"ui.panel.config.zwave_js.update_firmware.abort\"\n            )}\n          </mwc-button>\n        `;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.update_firmware.title\")\n        )}\n      >\n        ${!this._updateProgressMessage && !this._updateFinishedMessage\n          ? !this._updateInProgress\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    `ui.panel.config.zwave_js.update_firmware.introduction${localizationKeySuffix}`,\n                    {\n                      device: html`<strong>${this._deviceName}</strong>`,\n                    }\n                  )}\n                </p>\n                ${beginFirmwareUpdateHTML}\n              `\n            : html`\n                <p>\n                  ${this._nodeStatus.status === NodeStatus.Asleep\n                    ? this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.queued\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.awake\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )}\n                </p>\n                <p>\n                  ${this._nodeStatus.status === NodeStatus.Asleep\n                    ? this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.close_queued\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.close\",\n                        {\n                          device: html`<strong>${this._deviceName}</strong>`,\n                        }\n                      )}\n                </p>\n                ${abortFirmwareUpdateButton}\n              `\n          : this._updateProgressMessage && !this._updateFinishedMessage\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.update_firmware.in_progress\",\n                  {\n                    device: html`<strong>${this._deviceName}</strong>`,\n                    progress: (\n                      (this._updateProgressMessage.sent_fragments * 100) /\n                      this._updateProgressMessage.total_fragments\n                    ).toFixed(2),\n                  }\n                )}\n              </p>\n              <mwc-linear-progress\n                determinate\n                .progress=${this._updateProgressMessage.sent_fragments /\n                this._updateProgressMessage.total_fragments}\n              ></mwc-linear-progress>\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.update_firmware.close\",\n                  {\n                    device: html`<strong>${this._deviceName}</strong>`,\n                  }\n                )}\n              </p>\n              ${abortFirmwareUpdateButton}\n            `\n          : html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${this._updateFinishedMessage!.success\n                    ? mdiCheckCircle\n                    : mdiCloseCircle}\n                  .class=${status}\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      `ui.panel.config.zwave_js.update_firmware.finished_status.${status}`,\n                      {\n                        device: html`<strong>${this._deviceName}</strong>`,\n                        message: this.hass.localize(\n                          `ui.panel.config.zwave_js.update_firmware.finished_status.${\n                            this._nodeStatus.is_controller_node\n                              ? ControllerFirmwareUpdateStatus[\n                                  this._updateFinishedMessage!.status\n                                ]\n                              : NodeFirmwareUpdateStatus[\n                                  this._updateFinishedMessage!.status\n                                ]\n                          }`\n                        ),\n                      }\n                    )}\n                  </p>\n                </div>\n              </div>\n              ${this._updateFinishedMessage!.success\n                ? html`<p>\n                    ${this.hass.localize(\n                      `ui.panel.config.zwave_js.update_firmware.finished_status.done${localizationKeySuffix}`\n                    )}\n                  </p>`\n                : html`<p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.update_firmware.finished_status.try_again\"\n                      )}\n                    </p>\n                    ${beginFirmwareUpdateHTML}`}\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    [this._nodeStatus, this._updateInProgress] = await Promise.all([\n      fetchZwaveNodeStatus(this.hass, this.device!.id),\n      fetchZwaveIsNodeFirmwareUpdateInProgress(this.hass, this.device!.id),\n    ]);\n    if (this._updateInProgress) {\n      this._subscribeNodeFirmwareUpdate();\n    }\n  }\n\n  private async _beginFirmwareUpdate(): Promise<void> {\n    this._uploading = true;\n    this._updateProgressMessage = this._updateFinishedMessage = undefined;\n    try {\n      this._subscribeNodeFirmwareUpdate();\n      await uploadFirmwareAndBeginUpdate(\n        this.hass,\n        this.device!.id,\n        this._firmwareFile!,\n        this._firmwareTarget\n      );\n      this._updateInProgress = true;\n      this._uploading = false;\n    } catch (err: any) {\n      this._unsubscribeNodeFirmwareUpdate();\n      this._uploading = false;\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.upload_failed\"\n        ),\n        text: err.message,\n        confirmText: this.hass!.localize(\"ui.common.close\"),\n      });\n    }\n  }\n\n  private async _abortFirmwareUpdate(): Promise<void> {\n    if (\n      await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.zwave_js.update_firmware.confirm_abort\",\n          {\n            device: html`<strong>${this._deviceName}</strong>`,\n          }\n        ),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n      })\n    ) {\n      this._unsubscribeNodeFirmwareUpdate();\n      try {\n        await abortZwaveNodeFirmwareUpdate(this.hass, this.device!.id);\n      } catch (err: any) {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.zwave_js.update_firmware.abort_failed\"\n          ),\n          text: err.message,\n          confirmText: this.hass!.localize(\"ui.common.close\"),\n        });\n      }\n      this._firmwareFile = undefined;\n      this._updateFinishedMessage = undefined;\n      this._updateProgressMessage = undefined;\n      this._updateInProgress = false;\n    }\n  }\n\n  private _subscribeNodeStatus(): void {\n    if (!this.hass || !this.device || this._subscribedNodeStatus) {\n      return;\n    }\n    this._subscribedNodeStatus = subscribeZwaveNodeStatus(\n      this.hass,\n      this.device.id,\n      (message: ZWaveJSNodeStatusUpdatedMessage) => {\n        this._nodeStatus!.status = message.status;\n      }\n    );\n  }\n\n  private _unsubscribeNodeStatus(): void {\n    if (!this._subscribedNodeStatus) {\n      return;\n    }\n    this._subscribedNodeStatus.then((unsub) => unsub());\n    this._subscribedNodeStatus = undefined;\n  }\n\n  private _subscribeNodeFirmwareUpdate(): void {\n    if (!this.hass || !this.device || this._subscribedNodeFirmwareUpdate) {\n      return;\n    }\n    this._subscribedNodeFirmwareUpdate = subscribeZwaveNodeFirmwareUpdate(\n      this.hass,\n      this.device.id,\n      (\n        message:\n          | ZWaveJSFirmwareUpdateProgressMessage\n          | ZWaveJSControllerFirmwareUpdateFinishedMessage\n          | ZWaveJSNodeFirmwareUpdateFinishedMessage\n      ) => {\n        if (message.event === \"firmware update progress\") {\n          if (!this._updateFinishedMessage) {\n            this._updateProgressMessage = message;\n          }\n        } else {\n          this._unsubscribeNodeFirmwareUpdate();\n          this._updateProgressMessage = undefined;\n          this._updateInProgress = false;\n          this._updateFinishedMessage = message;\n        }\n      }\n    );\n  }\n\n  private _unsubscribeNodeFirmwareUpdate(): void {\n    if (!this._subscribedNodeFirmwareUpdate) {\n      return;\n    }\n    this._subscribedNodeFirmwareUpdate.then((unsub) => unsub());\n    this._subscribedNodeFirmwareUpdate = undefined;\n  }\n\n  private async _firmwareTargetChanged(ev) {\n    this._firmwareTarget = ev.detail.value.firmware_target;\n  }\n\n  private async _uploadFile(ev) {\n    this._firmwareFile = ev.detail.files[0];\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .success {\n          color: var(--success-color);\n        }\n\n        .error {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n          margin-bottom: 5px;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-update-firmware-node\": DialogZWaveJSUpdateFirmwareNode;\n  }\n}\n"],"names":[],"sourceRoot":""}