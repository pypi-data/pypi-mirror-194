{"version":3,"file":"c0e9f0c3.js","mappings":";;AAiJA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-weather-forecast-card-editor.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport { UNAVAILABLE } from \"../../../../data/entity\";\nimport type { WeatherEntity } from \"../../../../data/weather\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { WeatherForecastCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    theme: optional(string()),\n    show_current: optional(boolean()),\n    show_forecast: optional(boolean()),\n    secondary_info_attribute: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    double_tap_action: optional(actionConfigStruct),\n  })\n);\n\n@customElement(\"hui-weather-forecast-card-editor\")\nexport class HuiWeatherForecastCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: WeatherForecastCardConfig;\n\n  public setConfig(config: WeatherForecastCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n\n    if (\n      /* cannot show forecast in case it is unavailable on the entity */\n      (config.show_forecast === true && this._has_forecast === false) ||\n      /* cannot hide both weather and forecast, need one of them */\n      (config.show_current === false && config.show_forecast === false)\n    ) {\n      /* reset to sane default, show weather, but hide forecast */\n      fireEvent(this, \"config-changed\", {\n        config: { ...config, show_current: true, show_forecast: false },\n      });\n    }\n  }\n\n  get _has_forecast(): boolean | undefined {\n    if (this.hass && this._config) {\n      const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n      if (stateObj && stateObj.state !== UNAVAILABLE) {\n        return !!stateObj.attributes.forecast?.length;\n      }\n    }\n    return undefined;\n  }\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc, hasForecast?: boolean) =>\n      [\n        {\n          name: \"entity\",\n          required: true,\n          selector: { entity: { domain: \"weather\" } },\n        },\n        { name: \"name\", selector: { text: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"secondary_info_attribute\",\n              selector: { attribute: {} },\n              context: { filter_entity: \"entity\" },\n            },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n        ...(hasForecast\n          ? ([\n              {\n                name: \"forecast\",\n                selector: {\n                  select: {\n                    options: [\n                      {\n                        value: \"show_both\",\n                        label: localize(\n                          \"ui.panel.lovelace.editor.card.weather-forecast.show_both\"\n                        ),\n                      },\n                      {\n                        value: \"show_current\",\n                        label: localize(\n                          \"ui.panel.lovelace.editor.card.weather-forecast.show_only_current\"\n                        ),\n                      },\n                      {\n                        value: \"show_forecast\",\n                        label: localize(\n                          \"ui.panel.lovelace.editor.card.weather-forecast.show_only_forecast\"\n                        ),\n                      },\n                    ],\n                  },\n                },\n              },\n            ] as const)\n          : []),\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(this.hass.localize, this._has_forecast);\n\n    const data: WeatherForecastCardConfig = {\n      show_current: true,\n      show_forecast: this._has_forecast,\n      ...this._config,\n    };\n\n    data.forecast =\n      data.show_current && data.show_forecast\n        ? \"show_both\"\n        : data.show_current\n        ? \"show_current\"\n        : \"show_forecast\";\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    if (config.forecast === \"show_both\") {\n      config.show_current = true;\n      config.show_forecast = true;\n    } else if (config.forecast === \"show_current\") {\n      config.show_current = true;\n      config.show_forecast = false;\n    } else {\n      config.show_current = false;\n      config.show_forecast = true;\n    }\n\n    delete config.forecast;\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"entity\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entity\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.required\"\n        )})`;\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"forecast\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.weather-forecast.weather_to_show\"\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-forecast-card-editor\": HuiWeatherForecastCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}