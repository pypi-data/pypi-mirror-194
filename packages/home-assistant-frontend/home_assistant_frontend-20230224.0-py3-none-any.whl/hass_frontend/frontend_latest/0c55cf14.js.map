{"version":3,"file":"0c55cf14.js","mappings":";;;AA8BA;AACA;AACA;AACA;AACA;;AAGA;;;;;AA+CA","sources":["webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-location.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type {\n  LocationSelector,\n  LocationSelectorValue,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { MarkerLocation } from \"../map/ha-locations-editor\";\nimport \"../map/ha-locations-editor\";\n\n@customElement(\"ha-selector-location\")\nexport class HaLocationSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: LocationSelector;\n\n  @property() public value?: LocationSelectorValue;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected render() {\n    return html`\n      <ha-locations-editor\n        class=\"flex\"\n        .hass=${this.hass}\n        .helper=${this.helper}\n        .locations=${this._location(this.selector, this.value)}\n        @location-updated=${this._locationChanged}\n        @radius-updated=${this._radiusChanged}\n      ></ha-locations-editor>\n    `;\n  }\n\n  private _location = memoizeOne(\n    (\n      selector: LocationSelector,\n      value?: LocationSelectorValue\n    ): MarkerLocation[] => {\n      const computedStyles = getComputedStyle(this);\n      const zoneRadiusColor = selector.location?.radius\n        ? computedStyles.getPropertyValue(\"--zone-radius-color\") ||\n          computedStyles.getPropertyValue(\"--accent-color\")\n        : undefined;\n      return [\n        {\n          id: \"location\",\n          latitude: value?.latitude || this.hass.config.latitude,\n          longitude: value?.longitude || this.hass.config.longitude,\n          radius: selector.location?.radius ? value?.radius || 1000 : undefined,\n          radius_color: zoneRadiusColor,\n          icon:\n            selector.location?.icon || selector.location?.radius\n              ? \"mdi:map-marker-radius\"\n              : \"mdi:map-marker\",\n          location_editable: true,\n          radius_editable: true,\n        },\n      ];\n    }\n  );\n\n  private _locationChanged(ev: CustomEvent) {\n    const [latitude, longitude] = ev.detail.location;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.value, latitude, longitude },\n    });\n  }\n\n  private _radiusChanged(ev: CustomEvent) {\n    const radius = ev.detail.radius;\n    fireEvent(this, \"value-changed\", { value: { ...this.value, radius } });\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      height: 400px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-location\": HaLocationSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}