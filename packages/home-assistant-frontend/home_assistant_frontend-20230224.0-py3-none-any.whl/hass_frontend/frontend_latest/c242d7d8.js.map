{"version":3,"file":"c242d7d8.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;AC7FA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;;ACjEA;AAhGA;;;AAoGA;AACA;;AAEA;;;AAGA;;;AAKA;;;;;AAQA;;;AAGA;AACA;AAGA;;;;;AAKA;;;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;AAGA;;AAGA;;AAEA;AACA;AAGA;AACA;;AAGA;;;;;AAOA;AACA;AACA;;;AAGA;;AAGA;;AAEA;AACA;AAGA;AACA;;AAGA;;;;;AAOA;AACA;AACA;;;AAGA;AAEA;;;;AAMA;AACA;AACA;;AAEA;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;AAIA;;;;;;;;;;;;AAsFA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/config/energy/dialogs/dialog-energy-water-settings.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiWater } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/entity/ha-statistic-picker\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-textfield\";\nimport {\n  emptyWaterEnergyPreference,\n  WaterSourceTypeEnergyPreference,\n} from \"../../../../data/energy\";\nimport {\n  getStatisticMetadata,\n  getDisplayUnit,\n  isExternalStatistic,\n} from \"../../../../data/recorder\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EnergySettingsWaterDialogParams } from \"./show-dialogs-energy\";\nimport { getSensorDeviceClassConvertibleUnits } from \"../../../../data/sensor\";\n\n@customElement(\"dialog-energy-water-settings\")\nexport class DialogEnergyWaterSettings\n  extends LitElement\n  implements HassDialog<EnergySettingsWaterDialogParams>\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: EnergySettingsWaterDialogParams;\n\n  @state() private _source?: WaterSourceTypeEnergyPreference;\n\n  @state() private _costs?: \"no-costs\" | \"number\" | \"entity\" | \"statistic\";\n\n  @state() private _pickedDisplayUnit?: string | null;\n\n  @state() private _water_units?: string[];\n\n  @state() private _error?: string;\n\n  public async showDialog(\n    params: EnergySettingsWaterDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._source = params.source\n      ? { ...params.source }\n      : emptyWaterEnergyPreference();\n    this._pickedDisplayUnit = getDisplayUnit(\n      this.hass,\n      params.source?.stat_energy_from,\n      params.metadata\n    );\n    this._costs = this._source.entity_energy_price\n      ? \"entity\"\n      : this._source.number_energy_price\n      ? \"number\"\n      : this._source.stat_cost\n      ? \"statistic\"\n      : \"no-costs\";\n    this._water_units = (\n      await getSensorDeviceClassConvertibleUnits(this.hass, \"water\")\n    ).units;\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._source = undefined;\n    this._error = undefined;\n    this._pickedDisplayUnit = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._source) {\n      return html``;\n    }\n\n    const pickableUnit = this._water_units?.join(\", \") || \"\";\n\n    const unitPrice = this._pickedDisplayUnit\n      ? `${this.hass.config.currency}/${this._pickedDisplayUnit}`\n      : undefined;\n\n    const externalSource =\n      this._source.stat_energy_from &&\n      isExternalStatistic(this._source.stat_energy_from);\n\n    return html`\n      <ha-dialog\n        open\n        .heading=${html`<ha-svg-icon\n            .path=${mdiWater}\n            style=\"--mdc-icon-size: 32px;\"\n          ></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.water.dialog.header\")}`}\n        @closed=${this.closeDialog}\n      >\n        ${this._error ? html`<p class=\"error\">${this._error}</p>` : \"\"}\n        <div>\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.water.dialog.paragraph\"\n            )}\n          </p>\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.water.dialog.entity_para\",\n              { unit: pickableUnit }\n            )}\n          </p>\n        </div>\n\n        <ha-statistic-picker\n          .hass=${this.hass}\n          include-unit-class=\"volume\"\n          include-device-class=\"water\"\n          .value=${this._source.stat_energy_from}\n          .label=${this.hass.localize(\n            \"ui.panel.config.energy.water.dialog.water_usage\"\n          )}\n          @value-changed=${this._statisticChanged}\n          dialogInitialFocus\n        ></ha-statistic-picker>\n\n        <p>\n          ${this.hass.localize(\"ui.panel.config.energy.water.dialog.cost_para\")}\n        </p>\n\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.energy.water.dialog.no_cost\"\n          )}\n        >\n          <ha-radio\n            value=\"no-costs\"\n            name=\"costs\"\n            .checked=${this._costs === \"no-costs\"}\n            @change=${this._handleCostChanged}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.energy.water.dialog.cost_stat\"\n          )}\n        >\n          <ha-radio\n            value=\"statistic\"\n            name=\"costs\"\n            .checked=${this._costs === \"statistic\"}\n            @change=${this._handleCostChanged}\n          ></ha-radio>\n        </ha-formfield>\n        ${this._costs === \"statistic\"\n          ? html`<ha-statistic-picker\n              class=\"price-options\"\n              .hass=${this.hass}\n              statistic-types=\"sum\"\n              .value=${this._source.stat_cost}\n              .label=${`${this.hass.localize(\n                \"ui.panel.config.energy.water.dialog.cost_stat_input\"\n              )} (${this.hass.config.currency})`}\n              @value-changed=${this._priceStatChanged}\n            ></ha-statistic-picker>`\n          : \"\"}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.energy.water.dialog.cost_entity\"\n          )}\n        >\n          <ha-radio\n            value=\"entity\"\n            name=\"costs\"\n            .checked=${this._costs === \"entity\"}\n            .disabled=${externalSource}\n            @change=${this._handleCostChanged}\n          ></ha-radio>\n        </ha-formfield>\n        ${this._costs === \"entity\"\n          ? html`<ha-entity-picker\n              class=\"price-options\"\n              .hass=${this.hass}\n              include-domains='[\"sensor\", \"input_number\"]'\n              .value=${this._source.entity_energy_price}\n              .label=${`${this.hass.localize(\n                \"ui.panel.config.energy.water.dialog.cost_entity_input\"\n              )}${unitPrice ? ` (${unitPrice})` : \"\"}`}\n              @value-changed=${this._priceEntityChanged}\n            ></ha-entity-picker>`\n          : \"\"}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.energy.water.dialog.cost_number\"\n          )}\n        >\n          <ha-radio\n            value=\"number\"\n            name=\"costs\"\n            .checked=${this._costs === \"number\"}\n            .disabled=${externalSource}\n            @change=${this._handleCostChanged}\n          ></ha-radio>\n        </ha-formfield>\n        ${this._costs === \"number\"\n          ? html`<ha-textfield\n              .label=${`${this.hass.localize(\n                \"ui.panel.config.energy.water.dialog.cost_number_input\"\n              )}${unitPrice ? ` (${unitPrice})` : \"\"}`}\n              class=\"price-options\"\n              step=\".01\"\n              type=\"number\"\n              .value=${this._source.number_energy_price}\n              @change=${this._numberPriceChanged}\n              .suffix=${unitPrice || \"\"}\n            >\n            </ha-textfield>`\n          : \"\"}\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._save}\n          .disabled=${!this._source.stat_energy_from}\n          slot=\"primaryAction\"\n        >\n          ${this.hass.localize(\"ui.common.save\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleCostChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    this._costs = input.value as any;\n  }\n\n  private _numberPriceChanged(ev) {\n    this._source = {\n      ...this._source!,\n      number_energy_price: Number(ev.target.value),\n      entity_energy_price: null,\n      stat_cost: null,\n    };\n  }\n\n  private _priceStatChanged(ev: CustomEvent) {\n    this._source = {\n      ...this._source!,\n      entity_energy_price: null,\n      number_energy_price: null,\n      stat_cost: ev.detail.value,\n    };\n  }\n\n  private _priceEntityChanged(ev: CustomEvent) {\n    this._source = {\n      ...this._source!,\n      entity_energy_price: ev.detail.value,\n      number_energy_price: null,\n      stat_cost: null,\n    };\n  }\n\n  private async _statisticChanged(ev: CustomEvent<{ value: string }>) {\n    if (ev.detail.value) {\n      const metadata = await getStatisticMetadata(this.hass, [ev.detail.value]);\n      this._pickedDisplayUnit = getDisplayUnit(\n        this.hass,\n        ev.detail.value,\n        metadata[0]\n      );\n    } else {\n      this._pickedDisplayUnit = undefined;\n    }\n    if (isExternalStatistic(ev.detail.value) && this._costs !== \"statistic\") {\n      this._costs = \"no-costs\";\n    }\n    this._source = {\n      ...this._source!,\n      stat_energy_from: ev.detail.value,\n    };\n  }\n\n  private async _save() {\n    try {\n      if (this._costs === \"no-costs\") {\n        this._source!.entity_energy_price = null;\n        this._source!.number_energy_price = null;\n        this._source!.stat_cost = null;\n      }\n      await this._params!.saveCallback(this._source!);\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 430px;\n        }\n        ha-formfield {\n          display: block;\n        }\n        .price-options {\n          display: block;\n          padding-left: 52px;\n          margin-top: -8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-energy-water-settings\": DialogEnergyWaterSettings;\n  }\n}\n"],"names":[],"sourceRoot":""}