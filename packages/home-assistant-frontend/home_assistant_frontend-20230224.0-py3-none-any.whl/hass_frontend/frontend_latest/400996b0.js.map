{"version":3,"file":"400996b0.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;;;;ACjEA;ACEA;AAGA;;;ACuEA;;;AAKA;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;;;;;;;;;AAUA;AACA;;AAEA;;AAQA;AAEA;;;;AAOA;;AAEA;;AAEA;;;;;AAOA;;AAGA;;AAQA;;AAEA;;AAGA;AAEA;AAGA;;AAGA;AAEA;AAKA;;;;;;;AASA;;AAEA;AAEA;;;;AAKA;;;AAKA;;;AAKA;;;AAKA;AAKA;AACA;AACA;;;AAIA;AAEA;AAGA;;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0OA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/service/developer-tools-service.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport { ERR_CONNECTION_LOST } from \"home-assistant-js-websocket\";\nimport { load } from \"js-yaml\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { LocalStorage } from \"../../../common/decorators/local-storage\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeObjectId } from \"../../../common/entity/compute_object_id\";\nimport { hasTemplate } from \"../../../common/string/has-template\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { HaProgressButton } from \"../../../components/buttons/ha-progress-button\";\n\nimport \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-service-control\";\nimport \"../../../components/ha-service-picker\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../components/ha-yaml-editor\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { ServiceAction } from \"../../../data/script\";\nimport {\n  callExecuteScript,\n  serviceCallWillDisconnect,\n} from \"../../../data/service\";\nimport { haStyle } from \"../../../resources/styles\";\nimport \"../../../styles/polymer-ha-style\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\n\nclass HaPanelDevService extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _uiAvailable = true;\n\n  @LocalStorage(\"panel-dev-service-state-service-data\", true, false)\n  private _serviceData?: ServiceAction = { service: \"\", target: {}, data: {} };\n\n  @LocalStorage(\"panel-dev-service-state-yaml-mode\", true, false)\n  private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected firstUpdated(params) {\n    super.firstUpdated(params);\n    const serviceParam = extractSearchParam(\"service\");\n    if (serviceParam) {\n      this._serviceData = {\n        service: serviceParam,\n        target: {},\n        data: {},\n      };\n      if (this._yamlMode) {\n        this.updateComplete.then(() =>\n          this._yamlEditor?.setValue(this._serviceData)\n        );\n      }\n    } else if (!this._serviceData?.service) {\n      const domain = Object.keys(this.hass.services).sort()[0];\n      const service = Object.keys(this.hass.services[domain]).sort()[0];\n      this._serviceData = {\n        service: `${domain}.${service}`,\n        target: {},\n        data: {},\n      };\n      if (this._yamlMode) {\n        this.updateComplete.then(() =>\n          this._yamlEditor?.setValue(this._serviceData)\n        );\n      }\n    }\n    this._checkUiSupported();\n  }\n\n  protected render() {\n    const { target, fields } = this._fields(\n      this.hass.services,\n      this._serviceData?.service\n    );\n\n    const isValid = this._isValid(this._serviceData, fields, target);\n\n    return html`\n      <div class=\"content\">\n        <p>\n          ${this.hass.localize(\n            \"ui.panel.developer-tools.tabs.services.description\"\n          )}\n        </p>\n        <ha-card>\n          ${this._yamlMode\n            ? html`<div class=\"card-content\">\n                <ha-service-picker\n                  .hass=${this.hass}\n                  .value=${this._serviceData?.service}\n                  @value-changed=${this._serviceChanged}\n                ></ha-service-picker>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this._serviceData}\n                  @value-changed=${this._yamlChanged}\n                ></ha-yaml-editor>\n              </div>`\n            : html`\n                <ha-service-control\n                  .hass=${this.hass}\n                  .value=${this._serviceData}\n                  .narrow=${this.narrow}\n                  showAdvanced\n                  @value-changed=${this._serviceDataChanged}\n                  class=\"card-content\"\n                ></ha-service-control>\n              `}\n        </ha-card>\n      </div>\n      <div class=\"button-row\">\n        <div class=\"buttons\">\n          <div class=\"switch-mode-container\">\n            <mwc-button\n              @click=${this._toggleYaml}\n              .disabled=${!this._uiAvailable}\n            >\n              ${this._yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.ui_mode\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.yaml_mode\"\n                  )}\n            </mwc-button>\n            ${!this._uiAvailable\n              ? html`<span class=\"error\"\n                  >${this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.no_template_ui_support\"\n                  )}</span\n                >`\n              : \"\"}\n          </div>\n          <ha-progress-button\n            .disabled=${!isValid}\n            raised\n            @click=${this._callService}\n          >\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.services.call_service\"\n            )}\n          </ha-progress-button>\n        </div>\n      </div>\n\n      ${(this._yamlMode ? fields : this._filterSelectorFields(fields)).length\n        ? html`<div class=\"content\">\n            <ha-expansion-panel\n              .header=${this._yamlMode\n                ? this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.all_parameters\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.services.yaml_parameters\"\n                  )}\n              outlined\n              .expanded=${this._yamlMode}\n            >\n              ${this._yamlMode\n                ? html` <div class=\"description\">\n                    <h3>\n                      ${target\n                        ? html`\n                            ${this.hass.localize(\n                              \"ui.panel.developer-tools.tabs.services.accepts_target\"\n                            )}\n                          `\n                        : \"\"}\n                    </h3>\n                    ${this._serviceData?.service\n                      ? html` <a\n                          href=${documentationUrl(\n                            this.hass,\n                            \"/integrations/\" +\n                              computeDomain(this._serviceData?.service)\n                          )}\n                          title=${this.hass.localize(\n                            \"ui.components.service-control.integration_doc\"\n                          )}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <ha-icon-button\n                            class=\"help-icon\"\n                            .path=${mdiHelpCircle}\n                            .label=${this.hass!.localize(\"ui.common.help\")}\n                          ></ha-icon-button>\n                        </a>`\n                      : \"\"}\n                  </div>`\n                : \"\"}\n              <table class=\"attributes\">\n                <tr>\n                  <th>\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.column_parameter\"\n                    )}\n                  </th>\n                  <th>\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.column_description\"\n                    )}\n                  </th>\n                  <th>\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.column_example\"\n                    )}\n                  </th>\n                </tr>\n                ${(this._yamlMode\n                  ? fields\n                  : this._filterSelectorFields(fields)\n                ).map(\n                  (field) => html` <tr>\n                    <td><pre>${field.key}</pre></td>\n                    <td>${field.description}</td>\n                    <td>${field.example}</td>\n                  </tr>`\n                )}\n              </table>\n              ${this._yamlMode\n                ? html`<mwc-button @click=${this._fillExampleData}\n                    >${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.services.fill_example_data\"\n                    )}</mwc-button\n                  >`\n                : \"\"}\n            </ha-expansion-panel>\n          </div>`\n        : \"\"}\n    `;\n  }\n\n  private _filterSelectorFields = memoizeOne((fields) =>\n    fields.filter((field) => !field.selector)\n  );\n\n  private _isValid = memoizeOne((serviceData, fields, target): boolean => {\n    if (!serviceData?.service) {\n      return false;\n    }\n    const domain = computeDomain(serviceData.service);\n    const service = computeObjectId(serviceData.service);\n    if (!domain || !service) {\n      return false;\n    }\n    if (\n      target &&\n      !serviceData.target &&\n      !serviceData.data?.entity_id &&\n      !serviceData.data?.device_id &&\n      !serviceData.data?.area_id\n    ) {\n      return false;\n    }\n    for (const field of fields) {\n      if (\n        field.required &&\n        (!serviceData.data || serviceData.data[field.key] === undefined)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n\n  private _fields = memoizeOne(\n    (\n      serviceDomains: HomeAssistant[\"services\"],\n      domainService: string | undefined\n    ): { target: boolean; fields: any[] } => {\n      if (!domainService) {\n        return { target: false, fields: [] };\n      }\n      const domain = computeDomain(domainService);\n      const service = computeObjectId(domainService);\n      if (!(domain in serviceDomains)) {\n        return { target: false, fields: [] };\n      }\n      if (!(service in serviceDomains[domain])) {\n        return { target: false, fields: [] };\n      }\n      const target = \"target\" in serviceDomains[domain][service];\n      const fields = serviceDomains[domain][service].fields;\n      const result = Object.keys(fields).map((field) => ({\n        key: field,\n        ...fields[field],\n      }));\n\n      return {\n        target,\n        fields: result,\n      };\n    }\n  );\n\n  private async _callService(ev) {\n    const button = ev.currentTarget as HaProgressButton;\n    if (!this._serviceData?.service) {\n      return;\n    }\n    try {\n      await callExecuteScript(this.hass, [this._serviceData]);\n    } catch (err: any) {\n      const [domain, service] = this._serviceData.service.split(\".\", 2);\n      if (\n        err.error?.code === ERR_CONNECTION_LOST &&\n        serviceCallWillDisconnect(domain, service)\n      ) {\n        return;\n      }\n      forwardHaptic(\"failure\");\n      button.actionError();\n      showToast(this, {\n        message:\n          this.hass.localize(\n            \"ui.notification_toast.service_call_failed\",\n            \"service\",\n            this._serviceData.service\n          ) + ` ${err.message}`,\n      });\n      return;\n    }\n    button.actionSuccess();\n  }\n\n  private _toggleYaml() {\n    this._yamlMode = !this._yamlMode;\n  }\n\n  private _yamlChanged(ev) {\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._serviceDataChanged(ev);\n  }\n\n  private _checkUiSupported() {\n    if (this._serviceData && hasTemplate(this._serviceData)) {\n      this._yamlMode = true;\n      this._uiAvailable = false;\n    } else {\n      this._uiAvailable = true;\n    }\n  }\n\n  private _serviceDataChanged(ev) {\n    this._serviceData = ev.detail.value;\n    this._checkUiSupported();\n  }\n\n  private _serviceChanged(ev) {\n    ev.stopPropagation();\n    this._serviceData = { service: ev.detail.value || \"\", data: {} };\n    this._yamlEditor?.setValue(this._serviceData);\n  }\n\n  private _fillExampleData() {\n    const { fields } = this._fields(\n      this.hass.services,\n      this._serviceData?.service\n    );\n    const example = {};\n    fields.forEach((field) => {\n      if (field.example) {\n        let value: any = \"\";\n        try {\n          value = load(field.example);\n        } catch (err: any) {\n          value = field.example;\n        }\n        example[field.key] = value;\n      }\n    });\n    this._serviceData = { ...this._serviceData!, data: example };\n    this._yamlEditor?.setValue(this._serviceData);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 16px;\n          padding: max(16px, env(safe-area-inset-top))\n            max(16px, env(safe-area-inset-right))\n            max(16px, env(safe-area-inset-bottom))\n            max(16px, env(safe-area-inset-left));\n          max-width: 1200px;\n          margin: auto;\n        }\n        .button-row {\n          padding: 8px 16px;\n          padding: max(8px, env(safe-area-inset-top))\n            max(16px, env(safe-area-inset-right))\n            max(8px, env(safe-area-inset-bottom))\n            max(16px, env(safe-area-inset-left));\n          border-top: 1px solid var(--divider-color);\n          border-bottom: 1px solid var(--divider-color);\n          background: var(--card-background-color);\n          position: sticky;\n          bottom: 0;\n          box-sizing: border-box;\n          width: 100%;\n        }\n        .button-row .buttons {\n          display: flex;\n          justify-content: space-between;\n          max-width: 1200px;\n          margin: auto;\n        }\n        .switch-mode-container {\n          display: flex;\n          align-items: center;\n        }\n        .switch-mode-container .error {\n          margin-left: 8px;\n        }\n        .attributes {\n          width: 100%;\n        }\n\n        .attributes th {\n          text-align: left;\n          background-color: var(--card-background-color);\n          border-bottom: 1px solid var(--primary-text-color);\n        }\n\n        :host([rtl]) .attributes th {\n          text-align: right;\n        }\n\n        .attributes tr {\n          vertical-align: top;\n          direction: ltr;\n        }\n\n        .attributes tr:nth-child(odd) {\n          background-color: var(--table-row-background-color, #eee);\n        }\n\n        .attributes tr:nth-child(even) {\n          background-color: var(--table-row-alternative-background-color, #eee);\n        }\n\n        .attributes td:nth-child(3) {\n          white-space: pre-wrap;\n          word-break: break-word;\n        }\n\n        .attributes td {\n          padding: 4px;\n          vertical-align: middle;\n        }\n\n        .help-icon {\n          color: var(--secondary-text-color);\n        }\n        .description {\n          justify-content: space-between;\n          display: flex;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"developer-tools-service\", HaPanelDevService);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-tools-service\": HaPanelDevService;\n  }\n}\n"],"names":[],"sourceRoot":""}