{"version":3,"file":"f71f5398.js","mappings":";;;AAkDA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;AC7FA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA","sources":["webpack://home-assistant-frontend/./src/components/ha-form/ha-form-string.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts"],"sourcesContent":["import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../ha-icon-button\";\nimport \"../ha-textfield\";\nimport type { HaTextField } from \"../ha-textfield\";\nimport type {\n  HaFormElement,\n  HaFormStringData,\n  HaFormStringSchema,\n} from \"./types\";\n\nconst MASKED_FIELDS = [\"password\", \"secret\", \"token\"];\n\n@customElement(\"ha-form-string\")\nexport class HaFormString extends LitElement implements HaFormElement {\n  @property() public schema!: HaFormStringSchema;\n\n  @property() public data!: HaFormStringData;\n\n  @property() public label!: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _unmaskedPassword = false;\n\n  @query(\"ha-textfield\") private _input?: HaTextField;\n\n  public focus(): void {\n    if (this._input) {\n      this._input.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    const isPassword = MASKED_FIELDS.some((field) =>\n      this.schema.name.includes(field)\n    );\n    return html`\n      <ha-textfield\n        .type=${!isPassword\n          ? this._stringType\n          : this._unmaskedPassword\n          ? \"text\"\n          : \"password\"}\n        .label=${this.label}\n        .value=${this.data || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .required=${this.schema.required}\n        .autoValidate=${this.schema.required}\n        .name=${this.schema.name}\n        .autocomplete=${this.schema.autocomplete}\n        .suffix=${isPassword\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.schema.description?.suffix}\n        .validationMessage=${this.schema.required ? \"Required\" : undefined}\n        @input=${this._valueChanged}\n      ></ha-textfield>\n      ${isPassword\n        ? html`<ha-icon-button\n            toggles\n            .label=${`${this._unmaskedPassword ? \"Hide\" : \"Show\"} password`}\n            @click=${this._toggleUnmaskedPassword}\n            .path=${this._unmaskedPassword ? mdiEyeOff : mdiEye}\n          ></ha-icon-button>`\n        : \"\"}\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"schema\")) {\n      this.toggleAttribute(\"own-margin\", !!this.schema.required);\n    }\n  }\n\n  private _toggleUnmaskedPassword(): void {\n    this._unmaskedPassword = !this._unmaskedPassword;\n  }\n\n  private _valueChanged(ev: Event): void {\n    let value: string | undefined = (ev.target as HaTextField).value;\n    if (this.data === value) {\n      return;\n    }\n    if (value === \"\" && !this.schema.required) {\n      value = undefined;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private get _stringType(): string {\n    if (this.schema.format) {\n      if ([\"email\", \"url\"].includes(this.schema.format)) {\n        return this.schema.format;\n      }\n      if (this.schema.format === \"fqdnurl\") {\n        return \"url\";\n      }\n    }\n    return \"text\";\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      :host([own-margin]) {\n        margin-bottom: 5px;\n      }\n      ha-textfield {\n        display: block;\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 1em;\n        right: 12px;\n        --mdc-icon-button-size: 24px;\n        color: var(--secondary-text-color);\n      }\n\n      ha-icon-button {\n        inset-inline-start: initial;\n        inset-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-string\": HaFormString;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n"],"names":[],"sourceRoot":""}