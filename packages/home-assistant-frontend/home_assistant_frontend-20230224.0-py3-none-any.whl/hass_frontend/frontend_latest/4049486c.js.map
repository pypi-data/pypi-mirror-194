{"version":3,"file":"4049486c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;;;;;;ACzFA;;;;AAKA;ACsBA;AACA;AAmBA;AACA;;AAiEA;;AAIA;;;;AAKA;;AAEA;AAGA;AAWA;;;;AAKA;;AAEA;;AAGA;;AAOA;AAiBA;AACA;AAmBA;AACA;AC/HA;AAGA;AASA;AACA;AAkDA;AA3BA;AAGA;AAOA;;;;;;;AAQA;;;;AASA;;AA4CA;AACA;;AAEA;AACA;AACA;AACA;AAKA;;;AAGA;;;AAKA;;;;;AAKA;;AAIA;;;;;AAjCA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/ha-config-helpers.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        hass.loadBackendTranslation(\"selector\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      await hass.loadBackendTranslation(\"selector\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.error.${error}`,\n          step.description_placeholders\n        ) || error\n      );\n    },\n\n    renderShowFormStepFieldLocalizeValue(hass, step, key) {\n      return hass.localize(`component.${step.handler}.selector.${key}`);\n    },\n\n    renderShowFormStepSubmitButton(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.submit`\n        ) ||\n        hass.localize(\n          `ui.panel.config.integrations.config_flow.${\n            step.last_step === false ? \"next\" : \"submit\"\n          }`\n        )\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (reason !== \"loading_flow\" && reason !== \"loading_step\") {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { mdiPencilOff, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport { navigate } from \"../../../common/navigate\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport { ConfigEntry, getConfigEntries } from \"../../../data/config_entries\";\nimport { getConfigFlowHandlers } from \"../../../data/config_flow\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { showMoreInfoDialog } from \"../../../dialogs/more-info/show-ha-more-info-dialog\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../integrations/ha-integration-overflow-menu\";\nimport { HelperDomain, isHelperDomain } from \"./const\";\nimport { showHelperDetailDialog } from \"./show-dialog-helper-detail\";\n\n// This groups items by a key but only returns last entry per key.\nconst groupByOne = <T>(\n  items: T[],\n  keySelector: (item: T) => string\n): Record<string, T> => {\n  const result: Record<string, T> = {};\n  for (const item of items) {\n    result[keySelector(item)] = item;\n  }\n  return result;\n};\n\nconst getConfigEntry = (\n  entityEntries: Record<string, EntityRegistryEntry>,\n  configEntries: Record<string, ConfigEntry>,\n  entityId: string\n) => {\n  const configEntryId = entityEntries![entityId]?.config_entry_id;\n  return configEntryId ? configEntries![configEntryId] : undefined;\n};\n\n@customElement(\"ha-config-helpers\")\nexport class HaConfigHelpers extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _stateItems: HassEntity[] = [];\n\n  @state() private _entityEntries?: Record<string, EntityRegistryEntry>;\n\n  @state() private _configEntries?: Record<string, ConfigEntry>;\n\n  private _columns = memoizeOne(\n    (narrow: boolean, localize: LocalizeFunc): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        icon: {\n          title: \"\",\n          label: localize(\"ui.panel.config.helpers.picker.headers.icon\"),\n          type: \"icon\",\n          template: (icon, helper: any) =>\n            icon\n              ? html` <ha-icon .icon=${icon}></ha-icon> `\n              : html`<ha-svg-icon\n                  .path=${domainIcon(helper.type)}\n                ></ha-svg-icon>`,\n        },\n        name: {\n          title: localize(\"ui.panel.config.helpers.picker.headers.name\"),\n          main: true,\n          sortable: true,\n          filterable: true,\n          grows: true,\n          direction: \"asc\",\n          template: (name, item: any) =>\n            html`\n              ${name}\n              ${narrow\n                ? html` <div class=\"secondary\">${item.entity_id}</div> `\n                : \"\"}\n            `,\n        },\n      };\n      if (!narrow) {\n        columns.entity_id = {\n          title: localize(\"ui.panel.config.helpers.picker.headers.entity_id\"),\n          sortable: true,\n          filterable: true,\n          width: \"25%\",\n        };\n      }\n      columns.type = {\n        title: localize(\"ui.panel.config.helpers.picker.headers.type\"),\n        sortable: true,\n        width: \"25%\",\n        filterable: true,\n        template: (type: HelperDomain, row) =>\n          row.configEntry\n            ? domainToName(localize, type)\n            : html`\n                ${localize(`ui.panel.config.helpers.types.${type}`) || type}\n              `,\n      };\n      columns.editable = {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.editable\"\n        ),\n        type: \"icon\",\n        template: (editable) => html`\n          ${!editable\n            ? html`\n                <div\n                  tabindex=\"0\"\n                  style=\"display:inline-block; position: relative;\"\n                >\n                  <ha-svg-icon .path=${mdiPencilOff}></ha-svg-icon>\n                  <paper-tooltip animation-delay=\"0\" position=\"left\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.entities.picker.status.readonly\"\n                    )}\n                  </paper-tooltip>\n                </div>\n              `\n            : \"\"}\n        `,\n      };\n      return columns;\n    }\n  );\n\n  private _getItems = memoizeOne(\n    (\n      stateItems: HassEntity[],\n      entityEntries: Record<string, EntityRegistryEntry>,\n      configEntries: Record<string, ConfigEntry>\n    ) =>\n      stateItems.map((entityState) => {\n        const configEntry = getConfigEntry(\n          entityEntries,\n          configEntries,\n          entityState.entity_id\n        );\n\n        return {\n          id: entityState.entity_id,\n          icon: entityState.attributes.icon,\n          name: entityState.attributes.friendly_name || \"\",\n          entity_id: entityState.entity_id,\n          editable:\n            configEntry !== undefined || entityState.attributes.editable,\n          type: configEntry\n            ? configEntry.domain\n            : computeStateDomain(entityState),\n          configEntry,\n        };\n      })\n  );\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      this._stateItems === undefined ||\n      this._entityEntries === undefined ||\n      this._configEntries === undefined\n    ) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.devices}\n        .columns=${this._columns(this.narrow, this.hass.localize)}\n        .data=${this._getItems(\n          this._stateItems,\n          this._entityEntries,\n          this._configEntries\n        )}\n        @row-click=${this._openEditDialog}\n        hasFab\n        clickable\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.helpers.picker.no_helpers\"\n        )}\n      >\n        <ha-integration-overflow-menu\n          .hass=${this.hass}\n          slot=\"toolbar-icon\"\n        ></ha-integration-overflow-menu>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.helpers.picker.create_helper\"\n          )}\n          extended\n          @click=${this._createHelpler}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getConfigEntries();\n    if (this.route.path === \"/add\") {\n      this._handleAdd();\n    }\n  }\n\n  private async _handleAdd() {\n    const domain = extractSearchParam(\"domain\");\n    navigate(\"/config/helpers\", { replace: true });\n    if (!domain) {\n      return;\n    }\n    if (isHelperDomain(domain)) {\n      showHelperDetailDialog(this, {\n        domain,\n      });\n      return;\n    }\n    const handlers = await getConfigFlowHandlers(this.hass, [\"helper\"]);\n\n    if (!handlers.includes(domain)) {\n      const integrations = await getConfigFlowHandlers(this.hass, [\n        \"device\",\n        \"hub\",\n        \"service\",\n      ]);\n      if (integrations.includes(domain)) {\n        navigate(`/config/integrations/add?domain=${domain}`, {\n          replace: true,\n        });\n        return;\n      }\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.error\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.no_config_flow\"\n        ),\n      });\n      return;\n    }\n    const localize = await this.hass.loadBackendTranslation(\n      \"title\",\n      domain,\n      true\n    );\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.integrations.confirm_new\", {\n          integration: domainToName(localize, domain),\n        }),\n      }))\n    ) {\n      return;\n    }\n    showConfigFlowDialog(this, {\n      dialogClosedCallback: () => {\n        this._getConfigEntries();\n      },\n      startFlowHandler: domain,\n      showAdvanced: this.hass.userData?.showAdvanced,\n    });\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (!this._entityEntries || !this._configEntries) {\n      return;\n    }\n\n    let changed =\n      !this._stateItems ||\n      changedProps.has(\"_entityEntries\") ||\n      changedProps.has(\"_configEntries\");\n\n    if (!changed && changedProps.has(\"hass\")) {\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      changed = !oldHass || oldHass.states !== this.hass.states;\n    }\n    if (!changed) {\n      return;\n    }\n\n    const extraEntities = new Set<string>();\n\n    for (const entityEntry of Object.values(this._entityEntries)) {\n      if (\n        entityEntry.config_entry_id &&\n        entityEntry.config_entry_id in this._configEntries\n      ) {\n        extraEntities.add(entityEntry.entity_id);\n      }\n    }\n\n    const newStates = Object.values(this.hass!.states).filter(\n      (entity) =>\n        extraEntities.has(entity.entity_id) ||\n        isHelperDomain(computeStateDomain(entity))\n    );\n\n    if (\n      this._stateItems.length !== newStates.length ||\n      !this._stateItems.every((val, idx) => newStates[idx] === val)\n    ) {\n      this._stateItems = newStates;\n    }\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entries) => {\n        this._entityEntries = groupByOne(entries, (entry) => entry.entity_id);\n      }),\n    ];\n  }\n\n  private async _getConfigEntries() {\n    this._configEntries = groupByOne(\n      await getConfigEntries(this.hass, { type: [\"helper\"] }),\n      (entry) => entry.entry_id\n    );\n  }\n\n  private async _openEditDialog(ev: CustomEvent): Promise<void> {\n    const entityId = (ev.detail as RowClickedEvent).id;\n    showMoreInfoDialog(this, { entityId });\n  }\n\n  private _createHelpler() {\n    showHelperDetailDialog(this, {\n      dialogClosedCallback: (params) => {\n        if (params.flowFinished) {\n          this._getConfigEntries();\n        }\n      },\n    });\n  }\n}\n"],"names":[],"sourceRoot":""}