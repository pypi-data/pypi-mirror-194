{"version":3,"file":"8a077330.js","mappings":";;;AAwGA;;;AAGA;;AAKA;;AAGA;;AAIA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;;;;AAOA","sources":["webpack://home-assistant-frontend/./src/panels/config/users/dialog-admin-change-password.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-form/ha-form\";\nimport { SchemaUnion } from \"../../../components/ha-form/types\";\nimport \"../../../components/ha-textfield\";\nimport { adminChangePassword } from \"../../../data/auth\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport { AdminChangePasswordDialogParams } from \"./show-dialog-admin-change-password\";\n\nconst SCHEMA = [\n  {\n    name: \"new_password\",\n    required: true,\n    selector: {\n      text: {\n        type: \"password\",\n        autocomplete: \"new-password\",\n      },\n    },\n  },\n  {\n    name: \"password_confirm\",\n    required: true,\n    selector: {\n      text: {\n        type: \"password\",\n        autocomplete: \"new-password\",\n      },\n    },\n  },\n] as const;\n\ntype FormData = { new_password?: string; password_confirm?: string };\n\n@customElement(\"dialog-admin-change-password\")\nclass DialogAdminChangePassword extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: AdminChangePasswordDialogParams;\n\n  @state() private _userId?: string;\n\n  @state() private _data?: FormData;\n\n  @state() private _error?: Record<string, string>;\n\n  @state() private _submitting = false;\n\n  @state() private _success = false;\n\n  public showDialog(params: AdminChangePasswordDialogParams): void {\n    this._params = params;\n    this._userId = params.userId;\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._data = undefined;\n    this._submitting = false;\n    this._success = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _computeLabel = (schema: SchemaUnion<typeof SCHEMA>) =>\n    this.hass.localize(`ui.panel.config.users.change_password.${schema.name}`);\n\n  private _computeError = (error: string) =>\n    this.hass.localize(\n      `ui.panel.config.users.change_password.${error}` as any\n    ) || error;\n\n  private _validate() {\n    if (\n      this._data &&\n      this._data.new_password &&\n      this._data.password_confirm &&\n      this._data.new_password !== this._data.password_confirm\n    ) {\n      this._error = {\n        password_confirm: \"password_no_match\",\n      };\n    } else {\n      this._error = undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const canSubmit = Boolean(\n      this._data?.new_password && this._data?.password_confirm && !this._error\n    );\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.users.change_password.caption\")\n        )}\n      >\n        ${this._success\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.users.change_password.password_changed\"\n                )}\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.dialogs.generic.ok\")}\n              </mwc-button>\n            `\n          : html`\n              <ha-form\n                .hass=${this.hass}\n                .data=${this._data}\n                .error=${this._error}\n                .schema=${SCHEMA}\n                .computeLabel=${this._computeLabel}\n                .computeError=${this._computeError}\n                @value-changed=${this._valueChanged}\n                .disabled=${this._submitting}\n              ></ha-form>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.cancel\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._changePassword}\n                .disabled=${this._submitting || !canSubmit}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.users.change_password.change\"\n                )}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev) {\n    this._data = ev.detail.value;\n    this._validate();\n  }\n\n  private async _changePassword(): Promise<void> {\n    if (!this._userId || !this._data?.new_password) return;\n    try {\n      this._submitting = true;\n      await adminChangePassword(\n        this.hass,\n        this._userId!,\n        this._data.new_password\n      );\n      this._success = true;\n    } catch (err: any) {\n      showToast(this, {\n        message: err.body?.message || err.message || err,\n      });\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyleDialog, css``];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-admin-change-password\": DialogAdminChangePassword;\n  }\n}\n"],"names":[],"sourceRoot":""}