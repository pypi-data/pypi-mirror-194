{"version":3,"file":"ea10efbb.js","mappings":";;AAkKA;AACA;AACA;AACA;;AAOA;AAEA;AAcA;;AAGA;;;AAOA;;AAMA;AAEA;;;;;;;AAeA;;ACgDA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAkEA","sources":["webpack://home-assistant-frontend/mwc-list-item-base.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-statistics-graph-card-editor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-ripple/mwc-ripple.js';\n\nimport {observer} from '@material/mwc-base/observer.js';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple.js';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers.js';\nimport {html, LitElement} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport type SelectionSource = 'interaction'|'property';\nexport interface RequestSelectedDetail {\n  selected: boolean;\n  source: SelectionSource;\n}\n\nexport interface Layoutable {\n  layout: (updateItems?: boolean) => void;\n  debouncedLayout?: (updateItems?: boolean) => void | undefined;\n}\n\nexport type GraphicType = 'avatar'|'icon'|'medium'|'large'|'control'|null;\n\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: String}) value = '';\n  @property({type: String, reflect: true}) group: string|null = null;\n  @property({type: Number, reflect: true}) tabindex = -1;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.setAttribute('aria-disabled', 'true');\n    } else {\n      this.setAttribute('aria-disabled', 'false');\n    }\n  })\n  disabled = false;\n  @property({type: Boolean, reflect: true}) twoline = false;\n  @property({type: Boolean, reflect: true}) activated = false;\n  @property({type: String, reflect: true}) graphic: GraphicType = null;\n  @property({type: Boolean}) multipleGraphics = false;\n  @property({type: Boolean}) hasMeta = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.removeAttribute('aria-checked');\n      this.removeAttribute('mwc-list-item');\n      this.selected = false;\n      this.activated = false;\n      this.tabIndex = -1;\n    } else {\n      this.setAttribute('mwc-list-item', '');\n    }\n  })\n  noninteractive = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    const role = this.getAttribute('role');\n    const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n        role === 'row' || role === 'tab';\n\n    if (isAriaSelectable && value) {\n      this.setAttribute('aria-selected', 'true');\n    } else if (isAriaSelectable) {\n      this.setAttribute('aria-selected', 'false');\n    }\n\n    if (this._firstChanged) {\n      this._firstChanged = false;\n      return;\n    }\n\n    if (this._skipPropRequest) {\n      return;\n    }\n\n    this.fireRequestSelected(value, 'property');\n  })\n  selected = false;\n\n  @state() protected shouldRenderRipple = false;\n  @state() _managingList: Layoutable|null = null;\n\n  protected boundOnClick = this.onClick.bind(this);\n  protected _firstChanged = true;\n  protected _skipPropRequest = false;\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n  protected listeners: ({\n    target: Element;\n    eventNames: string[];\n    cb: EventListenerOrEventListenerObject;\n  })[] =\n      [\n        {\n          target: this,\n          eventNames: ['click'],\n          cb:\n              () => {\n                this.onClick();\n              },\n        },\n        {\n          target: this,\n          eventNames: ['mouseenter'],\n          cb: this.rippleHandlers.startHover,\n        },\n        {\n          target: this,\n          eventNames: ['mouseleave'],\n          cb: this.rippleHandlers.endHover,\n        },\n        {\n          target: this,\n          eventNames: ['focus'],\n          cb: this.rippleHandlers.startFocus,\n        },\n        {\n          target: this,\n          eventNames: ['blur'],\n          cb: this.rippleHandlers.endFocus,\n        },\n        {\n          target: this,\n          eventNames: ['mousedown', 'touchstart'],\n          cb:\n              (e: Event) => {\n                const name = e.type;\n                this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n              },\n        },\n      ];\n\n  get text() {\n    const textContent = this.textContent;\n\n    return textContent ? textContent.trim() : '';\n  }\n\n  override render() {\n    const text = this.renderText();\n    const graphic = this.graphic ? this.renderGraphic() : html``;\n    const meta = this.hasMeta ? this.renderMeta() : html``;\n\n    return html`\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n  }\n\n  protected renderRipple() {\n    if (this.shouldRenderRipple) {\n      return html`\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n    } else if (this.activated) {\n      return html`<div class=\"fake-activated-ripple\"></div>`;\n    } else {\n      return '';\n    }\n  }\n\n  protected renderGraphic() {\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html`\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${\n        classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n  }\n\n  protected renderMeta() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n  }\n\n  protected renderText() {\n    const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n    return html`\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n  }\n\n  protected renderSingleLine() {\n    return html`<slot></slot>`;\n  }\n\n  protected renderTwoline() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n  }\n\n  protected onClick() {\n    this.fireRequestSelected(!this.selected, 'interaction');\n  }\n\n  protected onDown(upName: string, evt: Event) {\n    const onUp = () => {\n      window.removeEventListener(upName, onUp);\n      this.rippleHandlers.endPress();\n    };\n\n    window.addEventListener(upName, onUp);\n    this.rippleHandlers.startPress(evt);\n  }\n\n  protected fireRequestSelected(selected: boolean, source: SelectionSource) {\n    if (this.noninteractive) {\n      return;\n    }\n\n    const customEv = new CustomEvent<RequestSelectedDetail>(\n        'request-selected',\n        {bubbles: true, composed: true, detail: {source, selected}});\n\n    this.dispatchEvent(customEv);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.noninteractive) {\n      this.setAttribute('mwc-list-item', '');\n    }\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.addEventListener(\n            eventName, listener.cb, {passive: true});\n      }\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.removeEventListener(eventName, listener.cb);\n      }\n    }\n\n    if (this._managingList) {\n      this._managingList.debouncedLayout ?\n          this._managingList.debouncedLayout(true) :\n          this._managingList.layout(true);\n    }\n  }\n\n  // composed flag, event fire through shadow root and up through composed tree\n  protected override firstUpdated() {\n    const ev = new Event('list-item-rendered', {bubbles: true, composed: true});\n    this.dispatchEvent(ev);\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  array,\n  assert,\n  assign,\n  boolean,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../common/array/ensure-array\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport {\n  ExtendedStatisticType,\n  statTypeMap,\n  supportedStatTypeMap,\n} from \"../../../../components/chart/statistics-chart\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../../../components/ha-form/types\";\nimport {\n  getDisplayUnit,\n  getStatisticMetadata,\n  isExternalStatistic,\n  StatisticsMetaData,\n  statisticsMetaHasType,\n} from \"../../../../data/recorder\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { StatisticsGraphCardConfig } from \"../../cards/types\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\n\nconst statTypeStruct = union([\n  literal(\"state\"),\n  literal(\"sum\"),\n  literal(\"change\"),\n  literal(\"min\"),\n  literal(\"max\"),\n  literal(\"mean\"),\n]);\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entities: array(entitiesConfigStruct),\n    title: optional(string()),\n    days_to_show: optional(number()),\n    period: optional(\n      union([\n        literal(\"5minute\"),\n        literal(\"hour\"),\n        literal(\"day\"),\n        literal(\"week\"),\n        literal(\"month\"),\n      ])\n    ),\n    chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n    stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n    unit: optional(string()),\n    hide_legend: optional(boolean()),\n  })\n);\n\nconst periods = [\"5minute\", \"hour\", \"day\", \"week\", \"month\"] as const;\nconst stat_types = [\n  \"mean\",\n  \"min\",\n  \"max\",\n  \"sum\",\n  \"state\",\n  \"change\",\n] as ExtendedStatisticType[];\n\n@customElement(\"hui-statistics-graph-card-editor\")\nexport class HuiStatisticsGraphCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  @state() private _configEntities?: string[];\n\n  @state() private _metaDatas?: StatisticsMetaData[];\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities, false).map((cfg) => cfg.entity)\n      : [];\n  }\n\n  private _getStatisticsMetaData = async (statisticIds?: string[]) => {\n    this._metaDatas = await getStatisticMetadata(\n      this.hass!,\n      statisticIds || []\n    );\n  };\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"_configEntities\") &&\n      !deepEqual(this._configEntities, changedProps.get(\"_configEntities\"))\n    ) {\n      this._metaDatas = undefined;\n      this._getStatisticsMetaData(this._configEntities);\n    }\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      statisticIds: string[] | undefined,\n      metaDatas: StatisticsMetaData[] | undefined\n    ) => {\n      const units = new Set<string>();\n      metaDatas?.forEach((metaData) => {\n        const unit = getDisplayUnit(\n          this.hass!,\n          metaData.statistic_id,\n          metaData\n        );\n        if (unit) {\n          units.add(unit);\n        }\n      });\n      const schema: HaFormSchema[] = [\n        { name: \"title\", selector: { text: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"period\",\n              required: true,\n              selector: {\n                select: {\n                  options: periods.map((period) => ({\n                    value: period,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.periods.${period}`\n                    ),\n                    disabled:\n                      period === \"5minute\" &&\n                      // External statistics don't support 5-minute statistics.\n                      statisticIds?.some((statistic_id) =>\n                        isExternalStatistic(statistic_id)\n                      ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"days_to_show\",\n              required: true,\n              selector: { number: { min: 1, mode: \"box\" } },\n            },\n            {\n              name: \"stat_types\",\n              required: true,\n              selector: {\n                select: {\n                  multiple: true,\n                  mode: \"list\",\n                  options: stat_types.map((stat_type) => ({\n                    value: stat_type,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.stat_type_labels.${stat_type}`\n                    ),\n                    disabled:\n                      !metaDatas ||\n                      !metaDatas.every((metaData) =>\n                        statisticsMetaHasType(\n                          metaData,\n                          supportedStatTypeMap[stat_type]\n                        )\n                      ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"chart_type\",\n              required: true,\n              type: \"select\",\n              options: [\n                [\"line\", \"Line\"],\n                [\"bar\", \"Bar\"],\n              ],\n            },\n            {\n              name: \"hide_legend\",\n              required: false,\n              selector: { boolean: {} },\n            },\n          ],\n        },\n      ];\n\n      if (units.size > 1) {\n        (schema[1] as any).schema.push({\n          name: \"unit\",\n          required: false,\n          selector: {\n            select: {\n              options: Array.from(units).map((unit) => ({\n                value: unit,\n                label: unit,\n              })),\n            },\n          },\n        });\n      }\n\n      return schema;\n    }\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(\n      this.hass.localize,\n      this._configEntities,\n      this._metaDatas\n    );\n    const configured_stat_types = this._config!.stat_types\n      ? ensureArray(this._config.stat_types)\n      : stat_types.filter(\n          (stat_type) =>\n            stat_type !== \"change\" &&\n            this._metaDatas?.every((metaData) =>\n              statisticsMetaHasType(metaData, statTypeMap[stat_type])\n            )\n        );\n    const data = {\n      chart_type: \"line\",\n      period: \"hour\",\n      days_to_show: 30,\n      ...this._config,\n      stat_types: configured_stat_types,\n    };\n    const unitClass = this._metaDatas?.[0]?.unit_class;\n    const statisticsUnit = unitClass\n      ? undefined\n      : this._metaDatas?.[0]?.statistics_unit_of_measurement;\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n        <ha-statistics-picker\n          .hass=${this.hass}\n          .pickStatisticLabel=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.statistics-graph.pick_statistic\"\n          )}\n          .pickedStatisticLabel=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.statistics-graph.picked_statistic\"\n          )}\n          .includeStatisticsUnitOfMeasurement=${statisticsUnit}\n          .includeUnitClass=${unitClass}\n          .ignoreRestrictionsOnFirstStatistic=${true}\n          .value=${this._configEntities}\n          .configValue=${\"entities\"}\n          @value-changed=${this._entitiesChanged}\n        ></ha-statistics-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private async _entitiesChanged(ev: CustomEvent): Promise<void> {\n    const config = { ...this._config!, entities: ev.detail.value };\n    if (\n      config.entities?.some((statistic_id) =>\n        isExternalStatistic(statistic_id)\n      ) &&\n      config.period === \"5minute\"\n    ) {\n      delete config.period;\n    }\n    const metadata =\n      config.stat_types || config.unit\n        ? await getStatisticMetadata(this.hass!, config.entities)\n        : undefined;\n    if (config.stat_types && config.entities.length) {\n      config.stat_types = ensureArray(config.stat_types).filter((stat_type) =>\n        metadata!.every((metaData) =>\n          statisticsMetaHasType(metaData, statTypeMap[stat_type])\n        )\n      );\n      if (!config.stat_types.length) {\n        delete config.stat_types;\n      }\n    }\n    if (\n      config.unit &&\n      !metadata!.some(\n        (metaData) =>\n          getDisplayUnit(this.hass!, metaData?.statistic_id, metaData) ===\n          config.unit\n      )\n    ) {\n      delete config.unit;\n    }\n    fireEvent(this, \"config-changed\", {\n      config,\n    });\n  }\n\n  private _computeLabelCallback = (schema) => {\n    switch (schema.name) {\n      case \"chart_type\":\n      case \"stat_types\":\n      case \"period\":\n      case \"unit\":\n      case \"hide_legend\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.statistics-graph.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = css`\n    ha-statistics-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card-editor\": HuiStatisticsGraphCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}