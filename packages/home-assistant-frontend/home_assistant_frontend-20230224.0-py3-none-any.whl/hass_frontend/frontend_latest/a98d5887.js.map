{"version":3,"file":"a98d5887.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;AC9BA;AACA;AAmBA;AACA;;AAiEA;;AAIA;;;;AAKA;;AAEA;AAGA;AAWA;;;;AAKA;;AAEA;;AAGA;;AAOA;AAiBA;AACA;AAmBA;AACA;;ACtKA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AC1HA;;;AAjDA;;;;AAwDA;;AAIA;;;AAGA;;;AAKA;AACA;;;;AAMA;AACA;;;AAKA;;AAIA;AACA;AACA;;;;AAMA;AAEA;;AAEA;;;AAOA;;AAKA;AAEA;AA/GA;AAiHA;AACA;;AAGA;;AAGA;;;AAKA;;;AAKA;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AAGA;AACA;;AAGA;AAUA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/thread/thread-config-panel.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        hass.loadBackendTranslation(\"selector\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      await hass.loadBackendTranslation(\"selector\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.error.${error}`,\n          step.description_placeholders\n        ) || error\n      );\n    },\n\n    renderShowFormStepFieldLocalizeValue(hass, step, key) {\n      return hass.localize(`component.${step.handler}.selector.${key}`);\n    },\n\n    renderShowFormStepSubmitButton(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.submit`\n        ) ||\n        hass.localize(\n          `ui.panel.config.integrations.config_flow.${\n            step.last_step === false ? \"next\" : \"submit\"\n          }`\n        )\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (reason !== \"loading_flow\" && reason !== \"loading_step\") {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiDevices, mdiDotsVertical, mdiInformationOutline } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport { extractSearchParam } from \"../../../../../common/url/search-params\";\nimport \"../../../../../components/ha-card\";\nimport { getSignedPath } from \"../../../../../data/auth\";\nimport { getConfigEntryDiagnosticsDownloadUrl } from \"../../../../../data/diagnostics\";\nimport { getOTBRInfo } from \"../../../../../data/otbr\";\nimport {\n  listThreadDataSets,\n  subscribeDiscoverThreadRouters,\n  ThreadDataSet,\n  ThreadRouter,\n} from \"../../../../../data/thread\";\nimport { showConfigFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { brandsUrl } from \"../../../../../util/brands-url\";\nimport { fileDownload } from \"../../../../../util/file_download\";\n\ninterface ThreadNetwork {\n  name: string;\n  dataset?: ThreadDataSet;\n  routers?: ThreadRouter[];\n}\n\n@customElement(\"thread-config-panel\")\nexport class ThreadConfigPanel extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _configEntryId: string | null = null;\n\n  @state() private _routers: ThreadRouter[] = [];\n\n  @state() private _datasets: ThreadDataSet[] = [];\n\n  protected render(): TemplateResult {\n    const networks = this._groupRoutersByNetwork(this._routers, this._datasets);\n\n    return html`\n      <hass-subpage .narrow=${this.narrow} .hass=${this.hass} header=\"Thread\">\n        <ha-button-menu slot=\"toolbar-icon\" corner=\"BOTTOM_START\">\n          <ha-icon-button\n            .path=${mdiDotsVertical}\n            slot=\"trigger\"\n          ></ha-icon-button>\n          <a\n            href=${getConfigEntryDiagnosticsDownloadUrl(\n              this._configEntryId || \"\"\n            )}\n            target=\"_blank\"\n            @click=${this._signUrl}\n          >\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.download_diagnostics\"\n              )}\n            </mwc-list-item>\n          </a>\n          <mwc-list-item @click=${this._addOTBR}\n            >${this.hass.localize(\n              \"ui.panel.config.thread.add_open_thread_border_router\"\n            )}</mwc-list-item\n          >\n        </ha-button-menu>\n        <div class=\"content\">\n          <h1>${this.hass.localize(\"ui.panel.config.thread.my_network\")}</h1>\n          ${networks.preferred\n            ? this._renderNetwork(networks.preferred)\n            : html`<ha-card>\n                <div class=\"card-content no-routers\">\n                  <h3>\n                    ${this.hass.localize(\n                      \"ui.panel.config.thread.no_preferred_network\"\n                    )}\n                  </h3>\n                  <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n                  <mwc-button @click=${this._addOTBR}\n                    >${this.hass.localize(\n                      \"ui.panel.config.thread.add_open_thread_border_router\"\n                    )}</mwc-button\n                  >\n                </div>\n              </ha-card>`}\n          ${networks.networks.length\n            ? html`<h3>\n                  ${this.hass.localize(\"ui.panel.config.thread.other_networks\")}\n                </h3>\n                ${networks.networks.map((network) =>\n                  this._renderNetwork(network)\n                )}`\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _renderNetwork(network: ThreadNetwork) {\n    return html`<ha-card>\n      <div class=\"card-header\">\n        ${network.name}${network.dataset\n          ? html`<ha-icon-button\n              .networkDataset=${network.dataset}\n              .path=${mdiInformationOutline}\n              @click=${this._showDatasetInfo}\n            ></ha-icon-button>`\n          : \"\"}\n      </div>\n      ${network.routers?.length\n        ? html`<div class=\"card-content routers\">\n              <h4>\n                ${this.hass.localize(\"ui.panel.config.thread.border_routers\", {\n                  count: network.routers.length,\n                })}\n              </h4>\n            </div>\n            ${network.routers.map(\n              (router) =>\n                html`<ha-list-item noninteractive twoline graphic=\"avatar\">\n                  <img\n                    slot=\"graphic\"\n                    .src=${brandsUrl({\n                      domain: router.brand,\n                      brand: true,\n                      type: \"icon\",\n                      darkOptimized: this.hass.themes?.darkMode,\n                    })}\n                    alt=${router.brand}\n                    referrerpolicy=\"no-referrer\"\n                    @error=${this._onImageError}\n                    @load=${this._onImageLoad}\n                  />\n                  ${router.model_name || router.server.replace(\".local.\", \"\")}\n                  <span slot=\"secondary\">${router.server}</span>\n                </ha-list-item>`\n            )}`\n        : html`<div class=\"card-content no-routers\">\n            <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n            ${this.hass.localize(\"ui.panel.config.thread.no_border_routers\")}\n          </div>`}\n    </ha-card>`;\n  }\n\n  private async _showDatasetInfo(ev: Event) {\n    const dataset = (ev.currentTarget as any).networkDataset as ThreadDataSet;\n    if (isComponentLoaded(this.hass, \"otbr\")) {\n      const otbrInfo = await getOTBRInfo(this.hass);\n      if (otbrInfo.active_dataset_tlvs.includes(dataset.extended_pan_id)) {\n        showAlertDialog(this, {\n          title: dataset.network_name,\n          text: html`Network name: ${dataset.network_name}<br />\n            Dataset id: ${dataset.dataset_id}<br />\n            Pan id: ${dataset.pan_id}<br />\n            Extended Pan id: ${dataset.extended_pan_id}<br />\n            OTBR URL: ${otbrInfo.url}<br />\n            Active dataset TLVs: ${otbrInfo.active_dataset_tlvs}`,\n        });\n        return;\n      }\n    }\n    showAlertDialog(this, {\n      title: dataset.network_name,\n      text: html`Network name: ${dataset.network_name}<br />\n        Dataset id: ${dataset.dataset_id}<br />\n        Pan id: ${dataset.pan_id}<br />\n        Extended Pan id: ${dataset.extended_pan_id}`,\n    });\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"\";\n  }\n\n  hassSubscribe() {\n    return [\n      subscribeDiscoverThreadRouters(this.hass, (routers: ThreadRouter[]) => {\n        this._routers = routers;\n      }),\n    ];\n  }\n\n  protected override firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    this._refresh();\n\n    this._configEntryId = extractSearchParam(\"config_entry\");\n  }\n\n  private _groupRoutersByNetwork = memoizeOne(\n    (\n      routers: ThreadRouter[],\n      datasets: ThreadDataSet[]\n    ): { preferred?: ThreadNetwork; networks: ThreadNetwork[] } => {\n      let preferred: ThreadNetwork | undefined;\n      const networks: { [key: string]: ThreadNetwork } = {};\n      for (const router of routers) {\n        const network = router.network_name;\n        if (network in networks) {\n          networks[network].routers!.push(router);\n        } else {\n          networks[network] = { name: network, routers: [router] };\n        }\n      }\n      for (const dataset of datasets) {\n        const network = dataset.network_name;\n        if (dataset.preferred) {\n          preferred = {\n            name: network,\n            dataset: dataset,\n            routers: networks[network]?.routers,\n          };\n          delete networks[network];\n          continue;\n        }\n        if (network in networks) {\n          networks[network].dataset = dataset;\n        } else {\n          networks[network] = { name: network, dataset: dataset };\n        }\n      }\n      return {\n        preferred,\n        networks: Object.values(networks).sort((a, b) =>\n          stringCompare(a.name, b.name, this.hass.locale.language)\n        ),\n      };\n    }\n  );\n\n  private _refresh() {\n    listThreadDataSets(this.hass).then((datasets) => {\n      this._datasets = datasets.datasets;\n    });\n  }\n\n  private async _signUrl(ev) {\n    const anchor = ev.target.closest(\"a\");\n    ev.preventDefault();\n    const signedUrl = await getSignedPath(\n      this.hass,\n      anchor.getAttribute(\"href\")\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  private _addOTBR() {\n    showConfigFlowDialog(this, {\n      dialogClosedCallback: () => {\n        this._refresh();\n      },\n      startFlowHandler: \"otbr\",\n      showAdvanced: this.hass.userData?.showAdvanced,\n    });\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 24px 0 32px;\n        max-width: 600px;\n        margin: 0 auto;\n        direction: ltr;\n      }\n      ha-button-menu a {\n        text-decoration: none;\n      }\n      .routers {\n        padding-bottom: 0;\n      }\n      .no-routers {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .no-routers ha-svg-icon {\n        background-color: var(--light-primary-color);\n        color: var(--secondary-text-color);\n        padding: 16px;\n        border-radius: 50%;\n        margin-bottom: 8px;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n      h4 {\n        margin: 0;\n      }\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"thread-config-panel\": ThreadConfigPanel;\n  }\n}\n"],"names":[],"sourceRoot":""}