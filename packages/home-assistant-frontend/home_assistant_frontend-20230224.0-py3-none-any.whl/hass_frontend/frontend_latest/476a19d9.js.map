{"version":3,"file":"476a19d9.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;;AC9BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;ACrIA;AACA;;;;AAKA;;;;;;;;;AAUA;;;;;;AAQA;;AAGA;AAEA;;;AAGA;;;AAGA;;;AAGA;;;;;;;AAQA;;;;;;;;;;;;;;;;;AA8HA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/matter/matter-config-dashboard.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-button\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport \"../../../../../components/ha-alert\";\nimport \"../../../../../components/ha-card\";\nimport {\n  acceptSharedMatterDevice,\n  canCommissionMatterExternal,\n  commissionMatterDevice,\n  matterSetThread,\n  matterSetWifi,\n  redirectOnNewMatterDevice,\n  startExternalCommissioning,\n} from \"../../../../../data/matter\";\nimport { showPromptDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"matter-config-dashboard\")\nexport class MatterConfigDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _error?: string;\n\n  private _unsub?: UnsubscribeFunc;\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._stopRedirect();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage .narrow=${this.narrow} .hass=${this.hass} header=\"Matter\">\n        ${isComponentLoaded(this.hass, \"otbr\")\n          ? html`\n              <a href=\"/config/thread\" slot=\"toolbar-icon\">\n                <mwc-button>Visit Thread Panel</mwc-button>\n              </a>\n            `\n          : \"\"}\n        <div class=\"content\">\n          <ha-card header=\"Matter\">\n            <ha-alert alert-type=\"warning\"\n              >Matter is still in the early phase of development, it is not\n              meant to be used in production. This panel is for development\n              only.</ha-alert\n            >\n            <div class=\"card-content\">\n              ${this._error\n                ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n                : \"\"}\n              You can add Matter devices by commissing them if they are not\n              setup yet, or share them from another controller and enter the\n              share code.\n            </div>\n            <div class=\"card-actions\">\n              ${canCommissionMatterExternal(this.hass)\n                ? html`<mwc-button @click=${this._startMobileCommissioning}\n                    >Commission device with mobile app</mwc-button\n                  >`\n                : \"\"}\n              <mwc-button @click=${this._commission}\n                >Commission device</mwc-button\n              >\n              <mwc-button @click=${this._acceptSharedDevice}\n                >Add shared device</mwc-button\n              >\n              <mwc-button @click=${this._setWifi}\n                >Set WiFi Credentials</mwc-button\n              >\n              <mwc-button @click=${this._setThread}\n                >Set Thread Credentials</mwc-button\n              >\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _redirectOnNewMatterDevice() {\n    if (this._unsub) {\n      return;\n    }\n    this._unsub = redirectOnNewMatterDevice(this.hass, () => {\n      this._unsub = undefined;\n    });\n  }\n\n  private _stopRedirect() {\n    this._unsub?.();\n    this._unsub = undefined;\n  }\n\n  private _startMobileCommissioning() {\n    this._redirectOnNewMatterDevice();\n    startExternalCommissioning(this.hass);\n  }\n\n  private async _setWifi(): Promise<void> {\n    this._error = undefined;\n    const networkName = await showPromptDialog(this, {\n      title: \"Network name\",\n      inputLabel: \"Network name\",\n      inputType: \"string\",\n      confirmText: \"Continue\",\n    });\n    if (!networkName) {\n      return;\n    }\n    const psk = await showPromptDialog(this, {\n      title: \"Passcode\",\n      inputLabel: \"Code\",\n      inputType: \"password\",\n      confirmText: \"Set Wifi\",\n    });\n    if (!psk) {\n      return;\n    }\n    try {\n      await matterSetWifi(this.hass, networkName, psk);\n    } catch (err: any) {\n      this._error = err.message;\n    }\n  }\n\n  private async _commission(): Promise<void> {\n    const code = await showPromptDialog(this, {\n      title: \"Commission device\",\n      inputLabel: \"Code\",\n      inputType: \"string\",\n      confirmText: \"Commission\",\n    });\n    if (!code) {\n      return;\n    }\n    this._error = undefined;\n    this._redirectOnNewMatterDevice();\n    try {\n      await commissionMatterDevice(this.hass, code);\n    } catch (err: any) {\n      this._error = err.message;\n      this._stopRedirect();\n    }\n  }\n\n  private async _acceptSharedDevice(): Promise<void> {\n    const code = await showPromptDialog(this, {\n      title: \"Add shared device\",\n      inputLabel: \"Pin\",\n      inputType: \"number\",\n      confirmText: \"Accept device\",\n    });\n    if (!code) {\n      return;\n    }\n    this._error = undefined;\n    this._redirectOnNewMatterDevice();\n    try {\n      await acceptSharedMatterDevice(this.hass, Number(code));\n    } catch (err: any) {\n      this._error = err.message;\n      this._stopRedirect();\n    }\n  }\n\n  private async _setThread(): Promise<void> {\n    const code = await showPromptDialog(this, {\n      title: \"Set Thread operation\",\n      inputLabel: \"Dataset\",\n      inputType: \"string\",\n      confirmText: \"Set Thread\",\n    });\n    if (!code) {\n      return;\n    }\n    this._error = undefined;\n    try {\n      await matterSetThread(this.hass, code);\n    } catch (err: any) {\n      this._error = err.message;\n    }\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      ha-alert[alert-type=\"warning\"] {\n        position: relative;\n        top: -16px;\n      }\n      .content {\n        padding: 24px 0 32px;\n        max-width: 600px;\n        margin: 0 auto;\n        direction: ltr;\n      }\n      ha-card:first-child {\n        margin-bottom: 16px;\n      }\n      a[slot=\"toolbar-icon\"] {\n        text-decoration: none;\n      }\n    `,\n  ];\n}\n"],"names":[],"sourceRoot":""}