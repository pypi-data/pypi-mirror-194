{"version":3,"file":"5523610f.js","mappings":";;AAuCA;;AAIA;;;AAGA;AAEA;;AAGA;;AAEA;;;;AAKA;;;AAIA;;AAGA;;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;;;;AAcA;AAUA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AAwBA;;;;ACmEA;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;;;AChLA;AACA;AACA;AACA;AAGA;;AAIA;;;AAGA;AAGA;AACA;AACA;AAGA;;AAIA;;;AAMA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA","sources":["webpack://home-assistant-frontend/./src/components/ha-attributes.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/components/ha-more-info-state-header.ts","webpack://home-assistant-frontend/./src/components/ha-control-switch.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/components/ha-more-info-toggle.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  formatAttributeName,\n  formatAttributeValue,\n  STATE_ATTRIBUTES,\n} from \"../data/entity_attributes\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\nimport \"./ha-expansion-panel\";\n\n@customElement(\"ha-attributes\")\nclass HaAttributes extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property({ attribute: \"extra-filters\" }) public extraFilters?: string;\n\n  @state() private _expanded = false;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const attributes = this.computeDisplayAttributes(\n      STATE_ATTRIBUTES.concat(\n        this.extraFilters ? this.extraFilters.split(\",\") : []\n      )\n    );\n    if (attributes.length === 0) {\n      return html``;\n    }\n\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.components.attributes.expansion_header\"\n        )}\n        outlined\n        @expanded-will-change=${this.expandedChanged}\n      >\n        <div class=\"attribute-container\">\n          ${this._expanded\n            ? html`\n                ${attributes.map(\n                  (attribute) => html`\n                    <div class=\"data-entry\">\n                      <div class=\"key\">${formatAttributeName(attribute)}</div>\n                      <div class=\"value\">\n                        ${this.formatAttribute(attribute)}\n                      </div>\n                    </div>\n                  `\n                )}\n              `\n            : \"\"}\n        </div>\n      </ha-expansion-panel>\n      ${this.stateObj.attributes.attribution\n        ? html`\n            <div class=\"attribution\">\n              ${this.stateObj.attributes.attribution}\n            </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .attribute-container {\n          margin-bottom: 8px;\n          direction: ltr;\n        }\n        .data-entry {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n        }\n        .data-entry .value {\n          max-width: 60%;\n          overflow-wrap: break-word;\n          text-align: right;\n        }\n        .key {\n          flex-grow: 1;\n        }\n        .attribution {\n          color: var(--secondary-text-color);\n          text-align: center;\n          margin-top: 16px;\n        }\n        pre {\n          font-family: inherit;\n          font-size: inherit;\n          margin: 0px;\n          overflow-wrap: break-word;\n          white-space: pre-line;\n        }\n        hr {\n          border-color: var(--divider-color);\n          border-bottom: none;\n          margin: 16px 0;\n        }\n      `,\n    ];\n  }\n\n  private computeDisplayAttributes(filtersArray: string[]): string[] {\n    if (!this.stateObj) {\n      return [];\n    }\n    return Object.keys(this.stateObj.attributes).filter(\n      (key) => filtersArray.indexOf(key) === -1\n    );\n  }\n\n  private formatAttribute(attribute: string): string | TemplateResult {\n    if (!this.stateObj) {\n      return \"â€”\";\n    }\n    const value = this.stateObj.attributes[attribute];\n    return formatAttributeValue(this.hass, value);\n  }\n\n  private expandedChanged(ev) {\n    this._expanded = ev.detail.expanded;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-attributes\": HaAttributes;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult, css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { isUnavailableState } from \"../../../data/entity\";\nimport { LightEntity } from \"../../../data/light\";\nimport { SENSOR_DEVICE_CLASS_TIMESTAMP } from \"../../../data/sensor\";\nimport \"../../../panels/lovelace/components/hui-timestamp-display\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-more-info-state-header\")\nexport class HaMoreInfoStateHeader extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: LightEntity;\n\n  @property({ attribute: false }) public stateOverride?: string;\n\n  private _computeStateDisplay(stateObj: HassEntity): TemplateResult | string {\n    if (\n      stateObj.attributes.device_class === SENSOR_DEVICE_CLASS_TIMESTAMP &&\n      !isUnavailableState(stateObj.state)\n    ) {\n      return html`\n        <hui-timestamp-display\n          .hass=${this.hass}\n          .ts=${new Date(stateObj.state)}\n          format=\"relative\"\n          capitalize\n        ></hui-timestamp-display>\n      `;\n    }\n\n    const stateDisplay = computeStateDisplay(\n      this.hass!.localize,\n      stateObj,\n      this.hass!.locale,\n      this.hass!.entities\n    );\n\n    return stateDisplay;\n  }\n\n  protected render(): TemplateResult {\n    const name = this.stateObj.attributes.friendly_name;\n\n    const stateDisplay =\n      this.stateOverride ?? this._computeStateDisplay(this.stateObj);\n\n    return html`\n      <p class=\"name\">${name}</p>\n      <p class=\"state\">${stateDisplay}</p>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      p {\n        text-align: center;\n        margin: 0;\n      }\n      .name {\n        font-style: normal;\n        font-weight: 400;\n        font-size: 28px;\n        line-height: 36px;\n        margin-bottom: 4px;\n      }\n      .state {\n        font-style: normal;\n        font-weight: 500;\n        font-size: 16px;\n        line-height: 24px;\n        letter-spacing: 0.1px;\n        margin-bottom: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-state-header\": HaMoreInfoStateHeader;\n  }\n}\n","import {\n  DIRECTION_HORIZONTAL,\n  DIRECTION_VERTICAL,\n  Manager,\n  Swipe,\n  Tap,\n} from \"@egjs/hammerjs\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-control-switch\")\nexport class HaControlSwitch extends LitElement {\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  @property({ type: Boolean })\n  public vertical = false;\n\n  @property({ type: Boolean })\n  public reversed = false;\n\n  @property({ type: Boolean, reflect: true })\n  public checked?: boolean;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided on icon slot to pass an <ha-icon slot=\"icon-on\"> in)\n  @property({ type: String }) pathOn?: string;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided off icon slot to pass an <ha-icon slot=\"icon-off\"> in)\n  @property({ type: String }) pathOff?: string;\n\n  private _mc?: HammerManager;\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    this.setupListeners();\n    this.setAttribute(\"role\", \"switch\");\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"checked\")) {\n      this.setAttribute(\"aria-checked\", this.checked ? \"true\" : \"false\");\n    }\n  }\n\n  private _toggle() {\n    if (this.disabled) return;\n    this.checked = !this.checked;\n    fireEvent(this, \"change\");\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.setupListeners();\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.destroyListeners();\n  }\n\n  @query(\"#switch\")\n  private switch!: HTMLDivElement;\n\n  setupListeners() {\n    if (this.switch && !this._mc) {\n      this._mc = new Manager(this.switch, {\n        touchAction: this.vertical ? \"pan-x\" : \"pan-y\",\n      });\n      this._mc.add(\n        new Swipe({\n          direction: this.vertical ? DIRECTION_VERTICAL : DIRECTION_HORIZONTAL,\n        })\n      );\n\n      this._mc.add(new Tap({ event: \"singletap\" }));\n\n      if (this.vertical) {\n        this._mc.on(\"swipeup\", () => {\n          if (this.disabled) return;\n          this.checked = !!this.reversed;\n          fireEvent(this, \"change\");\n        });\n\n        this._mc.on(\"swipedown\", () => {\n          if (this.disabled) return;\n          this.checked = !this.reversed;\n          fireEvent(this, \"change\");\n        });\n      } else {\n        this._mc.on(\"swiperight\", () => {\n          if (this.disabled) return;\n          this.checked = !this.reversed;\n          fireEvent(this, \"change\");\n        });\n\n        this._mc.on(\"swipeleft\", () => {\n          if (this.disabled) return;\n          this.checked = !!this.reversed;\n          fireEvent(this, \"change\");\n        });\n      }\n\n      this._mc.on(\"singletap\", () => {\n        if (this.disabled) return;\n        this._toggle();\n      });\n      this.addEventListener(\"keydown\", this._keydown);\n    }\n  }\n\n  destroyListeners() {\n    if (this._mc) {\n      this._mc.destroy();\n      this._mc = undefined;\n    }\n    this.removeEventListener(\"keydown\", this._keydown);\n  }\n\n  private _keydown(ev: any) {\n    if (ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    this._toggle();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div id=\"switch\" class=\"switch\">\n        <div class=\"background\"></div>\n        <div class=\"button\" aria-hidden=\"true\">\n          ${this.checked\n            ? this.pathOn\n              ? html`<ha-svg-icon .path=${this.pathOn}></ha-svg-icon>`\n              : html`<slot name=\"icon-on\"></slot>`\n            : this.pathOff\n            ? html`<ha-svg-icon .path=${this.pathOff}></ha-svg-icon>`\n            : html`<slot name=\"icon-off\"></slot>`}\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        --control-switch-on-color: var(--primary-color);\n        --control-switch-off-color: var(--disabled-color);\n        --control-switch-background-opacity: 0.2;\n        --control-switch-thickness: 40px;\n        --control-switch-border-radius: 12px;\n        --control-switch-padding: 4px;\n        --mdc-icon-size: 20px;\n        height: var(--control-switch-thickness);\n        width: 100%;\n        box-sizing: border-box;\n        user-select: none;\n        cursor: pointer;\n        border-radius: var(--control-switch-border-radius);\n        outline: none;\n        transition: box-shadow 180ms ease-in-out;\n        -webkit-tap-highlight-color: transparent;\n      }\n      :host(:focus-visible) {\n        box-shadow: 0 0 0 2px var(--control-switch-off-color);\n      }\n      :host([checked]:focus-visible) {\n        box-shadow: 0 0 0 2px var(--control-switch-on-color);\n      }\n      .switch {\n        box-sizing: border-box;\n        position: relative;\n        height: 100%;\n        width: 100%;\n        border-radius: var(--control-switch-border-radius);\n        overflow: hidden;\n        padding: var(--control-switch-padding);\n        display: flex;\n      }\n      .switch .background {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        background-color: var(--control-switch-off-color);\n        transition: background-color 180ms ease-in-out;\n        opacity: var(--control-switch-background-opacity);\n      }\n      .switch .button {\n        width: 50%;\n        height: 100%;\n        background: lightgrey;\n        border-radius: calc(\n          var(--control-switch-border-radius) - var(--control-switch-padding)\n        );\n        transition: transform 180ms ease-in-out,\n          background-color 180ms ease-in-out;\n        background-color: var(--control-switch-off-color);\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      :host([checked]) .switch .background {\n        background-color: var(--control-switch-on-color);\n      }\n      :host([checked]) .switch .button {\n        transform: translateX(100%);\n        background-color: var(--control-switch-on-color);\n      }\n      :host([reversed]) .switch {\n        flex-direction: row-reverse;\n      }\n      :host([reversed][checked]) .switch .button {\n        transform: translateX(-100%);\n      }\n      :host([vertical]) {\n        width: var(--control-switch-thickness);\n        height: 100%;\n      }\n      :host([vertical][checked]) .switch .button {\n        transform: translateY(100%);\n      }\n      :host([vertical]) .switch .button {\n        width: 100%;\n        height: 50%;\n      }\n      :host([vertical][reversed]) .switch {\n        flex-direction: column-reverse;\n      }\n      :host([vertical][reversed][checked]) .switch .button {\n        transform: translateY(-100%);\n      }\n      :host([disabled]) {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-control-switch\": HaControlSwitch;\n  }\n}\n","import { mdiFlash, mdiFlashOff } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport \"../../../components/ha-control-button\";\nimport \"../../../components/ha-control-switch\";\nimport { UNAVAILABLE, UNKNOWN } from \"../../../data/entity\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-more-info-toggle\")\nexport class HaMoreInfoToggle extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: HassEntity;\n\n  @property({ attribute: false }) public iconPathOn?: string;\n\n  @property({ attribute: false }) public iconPathOff?: string;\n\n  private _valueChanged(ev) {\n    const checked = ev.target.checked as boolean;\n\n    if (checked) {\n      this._turnOn();\n    } else {\n      this._turnOff();\n    }\n  }\n\n  private _turnOn() {\n    this._callService(true);\n  }\n\n  private _turnOff() {\n    this._callService(false);\n  }\n\n  private async _callService(turnOn): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    forwardHaptic(\"light\");\n    const stateDomain = computeDomain(this.stateObj.entity_id);\n    let serviceDomain;\n    let service;\n\n    if (stateDomain === \"group\") {\n      serviceDomain = \"homeassistant\";\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    } else {\n      serviceDomain = stateDomain;\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n\n    await this.hass.callService(serviceDomain, service, {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  protected render(): TemplateResult {\n    const color = stateColorCss(this.stateObj);\n    const isOn = this.stateObj.state === \"on\";\n    const isOff = this.stateObj.state === \"off\";\n\n    if (\n      this.stateObj.attributes.assumed_state ||\n      this.stateObj.state === UNKNOWN\n    ) {\n      return html`\n        <div class=\"buttons\">\n          <ha-control-button\n            .label=${this.hass.localize(\"ui.dialogs.more_info_control.turn_on\")}\n            @click=${this._turnOn}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n            class=${classMap({\n              active: isOn,\n            })}\n            style=${styleMap({\n              \"--color\": color,\n            })}\n          >\n            <ha-svg-icon .path=${this.iconPathOn || mdiFlash}></ha-svg-icon>\n          </ha-control-button>\n          <ha-control-button\n            .label=${this.hass.localize(\n              \"ui.dialogs.more_info_control.turn_off\"\n            )}\n            @click=${this._turnOff}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n            class=${classMap({\n              active: isOff,\n            })}\n            style=${styleMap({\n              \"--color\": color,\n            })}\n          >\n            <ha-svg-icon .path=${this.iconPathOff || mdiFlashOff}></ha-svg-icon>\n          </ha-control-button>\n        </div>\n      `;\n    }\n\n    return html`\n      <ha-control-switch\n        .pathOn=${this.iconPathOn || mdiFlash}\n        .pathOff=${this.iconPathOff || mdiFlashOff}\n        vertical\n        reversed\n        .checked=${isOn}\n        .showHandle=${stateActive(this.stateObj)}\n        @change=${this._valueChanged}\n        .ariaLabel=${this.hass.localize(\"ui.dialogs.more_info_control.toggle\")}\n        style=${styleMap({\n          \"--control-switch-on-color\": color,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      >\n      </ha-control-switch>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-switch {\n        height: 320px;\n        --control-switch-thickness: 100px;\n        --control-switch-border-radius: 24px;\n        --control-switch-padding: 6px;\n        --mdc-icon-size: 24px;\n      }\n      .buttons {\n        display: flex;\n        flex-direction: column;\n        width: 100px;\n        height: 320px;\n        padding: 6px;\n        box-sizing: border-box;\n      }\n      ha-control-button {\n        flex: 1;\n        width: 100%;\n        --control-button-border-radius: 18px;\n        --mdc-icon-size: 24px;\n      }\n      ha-control-button.active {\n        --control-button-icon-color: white;\n        --control-button-background-color: var(--color);\n        --control-button-background-opacity: 1;\n      }\n      ha-control-button:not(:last-child) {\n        margin-bottom: 6px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-toggle\": HaMoreInfoToggle;\n  }\n}\n"],"names":[],"sourceRoot":""}