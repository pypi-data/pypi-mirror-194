{"version":3,"file":"5598c20e.js","mappings":";;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;ACFA;;;AAGA;AACA;AACA;AAGA;AAGA;;;AAIA;;;;;;;;;AAaA;;ACJA;AACA;AACA;;;AAGA;;AAGA;AACA;AACA;;;AAGA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAMA;;AAGA;AACA;AAGA;AAGA;;AAEA;;AAEA;AAEA;;AAGA;AACA;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;AAIA;AACA;;AAEA;;;AAGA;;AAEA;AAGA;;AAIA;;AAEA;;AAGA;AACA;;AAGA;;;;AAKA;;AAGA;;;;AAKA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;AA+DA","sources":["webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/components/lights/ha-more-info-light-brightness.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-light.ts"],"sourcesContent":["import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport {\n  hsv2rgb,\n  rgb2hex,\n  rgb2hsv,\n} from \"../../../../common/color/convert-color\";\nimport { stateActive } from \"../../../../common/entity/state_active\";\nimport { stateColorCss } from \"../../../../common/entity/state_color\";\nimport \"../../../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../../../data/entity\";\nimport { LightEntity } from \"../../../../data/light\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-more-info-light-brightness\")\nexport class HaMoreInfoLightBrightness extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: LightEntity;\n\n  @state() value?: number;\n\n  protected updated(changedProp: Map<string | number | symbol, unknown>): void {\n    if (changedProp.has(\"stateObj\")) {\n      this.value =\n        this.stateObj.attributes.brightness != null\n          ? Math.max(\n              Math.round((this.stateObj.attributes.brightness * 100) / 255),\n              1\n            )\n          : undefined;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.hass.callService(\"light\", \"turn_on\", {\n      entity_id: this.stateObj!.entity_id,\n      brightness_pct: value,\n    });\n  }\n\n  protected render(): TemplateResult {\n    let color = stateColorCss(this.stateObj);\n\n    if (this.stateObj.attributes.rgb_color) {\n      const hsvColor = rgb2hsv(this.stateObj.attributes.rgb_color);\n\n      // Modify the real rgb color for better contrast\n      if (hsvColor[1] < 0.4) {\n        // Special case for very light color (e.g: white)\n        if (hsvColor[1] < 0.1) {\n          hsvColor[2] = 225;\n        } else {\n          hsvColor[1] = 0.4;\n        }\n      }\n      color = rgb2hex(hsv2rgb(hsvColor));\n    }\n\n    return html`\n      <ha-control-slider\n        vertical\n        .value=${this.value}\n        min=\"1\"\n        max=\"100\"\n        .showHandle=${stateActive(this.stateObj)}\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${this.hass.localize(\n          \"ui.dialogs.more_info_control.light.brightness\"\n        )}\n        style=${styleMap({\n          \"--control-slider-color\": color,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      >\n      </ha-control-slider>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-slider {\n        height: 320px;\n        --control-slider-thickness: 100px;\n        --control-slider-border-radius: 24px;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-light-brightness\": HaMoreInfoLightBrightness;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@material/web/iconbutton/outlined-icon-button\";\nimport {\n  mdiCreation,\n  mdiLightbulb,\n  mdiLightbulbOff,\n  mdiPalette,\n  mdiPower,\n} from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { blankBeforePercent } from \"../../../common/translations/blank_before_percent\";\nimport \"../../../components/ha-attributes\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-select\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport {\n  LightColorMode,\n  LightEntity,\n  LightEntityFeature,\n  lightSupportsBrightness,\n  lightSupportsColor,\n  lightSupportsColorMode,\n} from \"../../../data/light\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { moreInfoControlStyle } from \"../components/ha-more-info-control-style\";\nimport \"../components/ha-more-info-state-header\";\nimport \"../components/ha-more-info-toggle\";\nimport \"../components/lights/ha-more-info-light-brightness\";\nimport { showLightColorPickerView } from \"../components/lights/show-view-light-color-picker\";\n\n@customElement(\"more-info-light\")\nclass MoreInfoLight extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: LightEntity;\n\n  @state() private _selectedBrightness?: number;\n\n  private _brightnessChanged(ev) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n    this._selectedBrightness = value;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"stateObj\")) {\n      this._selectedBrightness = this.stateObj?.attributes.brightness\n        ? Math.round((this.stateObj.attributes.brightness * 100) / 255)\n        : undefined;\n    }\n  }\n\n  protected render(): TemplateResult | null {\n    if (!this.hass || !this.stateObj) {\n      return null;\n    }\n\n    const supportsColorTemp = lightSupportsColorMode(\n      this.stateObj,\n      LightColorMode.COLOR_TEMP\n    );\n\n    const supportsColor = lightSupportsColor(this.stateObj);\n\n    const supportsBrightness = lightSupportsBrightness(this.stateObj);\n\n    const supportsEffects = supportsFeature(\n      this.stateObj,\n      LightEntityFeature.EFFECT\n    );\n\n    const stateOverride = this._selectedBrightness\n      ? `${Math.round(this._selectedBrightness)}${blankBeforePercent(\n          this.hass!.locale\n        )}%`\n      : undefined;\n\n    return html`\n      <ha-more-info-state-header\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        .stateOverride=${stateOverride}\n      ></ha-more-info-state-header>\n      <div class=\"controls\">\n        ${supportsBrightness\n          ? html`\n              <ha-more-info-light-brightness\n                .stateObj=${this.stateObj}\n                .hass=${this.hass}\n                @slider-moved=${this._brightnessChanged}\n              >\n              </ha-more-info-light-brightness>\n            `\n          : html`\n              <ha-more-info-toggle\n                .stateObj=${this.stateObj}\n                .hass=${this.hass}\n                .iconPathOn=${mdiLightbulb}\n                .iconPathOff=${mdiLightbulbOff}\n              ></ha-more-info-toggle>\n            `}\n        ${supportsColorTemp ||\n        supportsColor ||\n        supportsEffects ||\n        supportsBrightness\n          ? html`\n              <div class=\"buttons\">\n                ${supportsBrightness\n                  ? html`\n                      <md-outlined-icon-button\n                        .disabled=${this.stateObj.state === UNAVAILABLE}\n                        .title=${this.hass.localize(\n                          \"ui.dialogs.more_info_control.light.toggle\"\n                        )}\n                        .ariaLabel=${this.hass.localize(\n                          \"ui.dialogs.more_info_control.light.toggle\"\n                        )}\n                        @click=${this._toggle}\n                      >\n                        <ha-svg-icon .path=${mdiPower}></ha-svg-icon>\n                      </md-outlined-icon-button>\n                    `\n                  : null}\n                ${supportsColorTemp || supportsColor\n                  ? html`\n                      <md-outlined-icon-button\n                        .disabled=${this.stateObj.state === UNAVAILABLE}\n                        .title=${this.hass.localize(\n                          \"ui.dialogs.more_info_control.light.change_color\"\n                        )}\n                        .ariaLabel=${this.hass.localize(\n                          \"ui.dialogs.more_info_control.light.change_color\"\n                        )}\n                        @click=${this._showLightColorPickerView}\n                      >\n                        <ha-svg-icon .path=${mdiPalette}></ha-svg-icon>\n                      </md-outlined-icon-button>\n                    `\n                  : null}\n                ${supportsEffects\n                  ? html`\n                      <ha-button-menu\n                        corner=\"BOTTOM_START\"\n                        @action=${this._handleEffectButton}\n                        @closed=${stopPropagation}\n                        fixed\n                        .disabled=${this.stateObj.state === UNAVAILABLE}\n                      >\n                        <md-outlined-icon-button\n                          .disabled=${this.stateObj.state === UNAVAILABLE}\n                          slot=\"trigger\"\n                          .title=${this.hass.localize(\n                            \"ui.dialogs.more_info_control.light.select_effect\"\n                          )}\n                          .ariaLabel=${this.hass.localize(\n                            \"ui.dialogs.more_info_control.light.select_effect\"\n                          )}\n                        >\n                          <ha-svg-icon .path=${mdiCreation}></ha-svg-icon>\n                        </md-outlined-icon-button>\n                        ${this.stateObj.attributes.effect_list!.map(\n                          (effect: string) => html`\n                            <mwc-list-item\n                              .value=${effect}\n                              .activated=${this.stateObj!.attributes.effect ===\n                              effect}\n                            >\n                              ${effect}\n                            </mwc-list-item>\n                          `\n                        )}\n                      </ha-button-menu>\n                    `\n                  : null}\n              </div>\n            `\n          : null}\n      </div>\n\n      <ha-attributes\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        extra-filters=\"brightness,color_temp,color_temp_kelvin,white_value,effect_list,effect,hs_color,rgb_color,rgbw_color,rgbww_color,xy_color,min_mireds,max_mireds,min_color_temp_kelvin,max_color_temp_kelvin,entity_id,supported_color_modes,color_mode\"\n      ></ha-attributes>\n    `;\n  }\n\n  private _toggle = () => {\n    const service = this.stateObj?.state === \"on\" ? \"turn_off\" : \"turn_on\";\n    forwardHaptic(\"light\");\n    this.hass.callService(\"light\", service, {\n      entity_id: this.stateObj!.entity_id,\n    });\n  };\n\n  private _showLightColorPickerView = () => {\n    showLightColorPickerView(\n      this,\n      this.hass.localize(\n        \"ui.dialogs.more_info_control.light.color_picker.title\"\n      ),\n      {\n        entityId: this.stateObj!.entity_id,\n      }\n    );\n  };\n\n  private _handleEffectButton(ev) {\n    ev.stopPropagation();\n    ev.preventDefault();\n\n    const index = ev.detail.index;\n    const effect = this.stateObj!.attributes.effect_list![index];\n\n    if (!effect || this.stateObj!.attributes.effect === effect) {\n      return;\n    }\n\n    this.hass.callService(\"light\", \"turn_on\", {\n      entity_id: this.stateObj!.entity_id,\n      effect,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      moreInfoControlStyle,\n      css`\n        .buttons {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-bottom: 12px;\n        }\n        .buttons > * {\n          margin: 4px;\n        }\n\n        md-outlined-icon-button-toggle,\n        md-outlined-icon-button {\n          --ha-icon-display: block;\n          --md-sys-color-on-surface: var(--secondary-text-color);\n          --md-sys-color-on-surface-variant: var(--secondary-text-color);\n          --md-sys-color-on-surface-rgb: var(--rgb-secondary-text-color);\n          --md-sys-color-outline: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-light\": MoreInfoLight;\n  }\n}\n"],"names":[],"sourceRoot":""}