{"version":3,"file":"a2f29f5d.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;;;AChCA;;;AAGA;;AAGA;;;;AAkCA;;AAMA;;AAEA;;AAEA;;AAGA;;;;;;;AAWA;;;;AAIA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAGA;;AAeA;;;;;;AAMA;;;;;;;AAUA;;;;;;AASA;AACA;AACA;AACA;AACA;;;;;;AAQA;AACA;;;;AAMA;AACA;AACA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/statistics/dialog-statistics-adjust-sum.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiChevronRight } from \"@mdi/js\";\nimport formatISO9075 from \"date-fns/formatISO9075\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-form/ha-form\";\nimport \"../../../components/ha-selector/ha-selector-datetime\";\nimport \"../../../components/ha-selector/ha-selector-number\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  adjustStatisticsSum,\n  fetchStatistics,\n  getDisplayUnit,\n  StatisticValue,\n} from \"../../../data/recorder\";\nimport type { DateTimeSelector, NumberSelector } from \"../../../data/selector\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport type { DialogStatisticsAdjustSumParams } from \"./show-dialog-statistics-adjust-sum\";\n\n/* eslint-disable lit/no-template-arrow */\n\n@customElement(\"dialog-statistics-adjust-sum\")\nexport class DialogStatisticsFixUnsupportedUnitMetadata extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogStatisticsAdjustSumParams;\n\n  @state() private _busy = false;\n\n  @state() private _moment?: string;\n\n  @state() private _stats5min?: StatisticValue[];\n\n  @state() private _statsHour?: StatisticValue[];\n\n  @state() private _chosenStat?: StatisticValue;\n\n  private _origAmount?: number;\n\n  @state() private _amount?: number;\n\n  private _dateTimeSelector: DateTimeSelector = {\n    datetime: {},\n  };\n\n  private _amountSelector = memoizeOne(\n    (unit_of_measurement: string | undefined): NumberSelector => ({\n      number: {\n        step: 0.01,\n        unit_of_measurement,\n        mode: \"box\",\n      },\n    })\n  );\n\n  public showDialog(params: DialogStatisticsAdjustSumParams): void {\n    this._params = params;\n    // moment is in format YYYY-MM-DD HH:mm:ss because of selector\n    // Here we create a date with minutes set to %5\n    const now = new Date();\n    now.setMinutes(now.getMinutes() - (now.getMinutes() % 5), 0);\n    this._moment = formatISO9075(now);\n    this._fetchStats();\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._moment = undefined;\n    this._stats5min = undefined;\n    this._statsHour = undefined;\n    this._origAmount = undefined;\n    this._amount = undefined;\n    this._chosenStat = undefined;\n    this._busy = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    let content: TemplateResult;\n\n    if (!this._chosenStat) {\n      content = this._renderPickStatistic();\n    } else {\n      content = this._renderAdjustStat();\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this.closeDialog}\n        heading=\"Adjust a statistic\"\n      >\n        ${content}\n      </ha-dialog>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.size !== 1 || !changedProps.has(\"hass\")) {\n      return true;\n    }\n    // We only respond to hass changes if the translations changed\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    return !oldHass || oldHass.localize !== this.hass.localize;\n  }\n\n  private _renderPickStatistic() {\n    let stats: TemplateResult;\n\n    if (!this._stats5min || !this._statsHour) {\n      stats = html`<ha-circular-progress active></ha-circular-progress>`;\n    } else if (this._statsHour.length < 2 && this._stats5min.length < 2) {\n      stats = html`<p>No statistics found for this period.</p>`;\n    } else {\n      const data =\n        this._stats5min.length >= 2 ? this._stats5min : this._statsHour;\n      const unit = getDisplayUnit(\n        this.hass,\n        this._params!.statistic.statistic_id,\n        this._params!.statistic\n      );\n      const rows: TemplateResult[] = [];\n      for (let i = 1; i < data.length; i++) {\n        const stat = data[i];\n        const growth = Math.round((stat.sum! - data[i - 1].sum!) * 100) / 100;\n        rows.push(html`\n          <mwc-list-item\n            twoline\n            hasMeta\n            @click=${() => {\n              this._chosenStat = stat;\n              this._origAmount = growth;\n              this._amount = growth;\n            }}\n          >\n            <span>${growth} ${unit}</span>\n            <span slot=\"secondary\">\n              ${formatDateTime(new Date(stat.start), this.hass.locale)}\n            </span>\n            <ha-svg-icon slot=\"meta\" .path=${mdiChevronRight}></ha-svg-icon>\n          </mwc-list-item>\n        `);\n      }\n      stats = html`${rows}`;\n    }\n\n    return html`\n      <div class=\"text-content\">\n        Sometimes the statistics end up being incorrect for a specific point in\n        time. This can mess up your beautiful graphs! Select a time below to\n        find the bad moment and adjust the data.\n      </div>\n      <div class=\"text-content\">\n        <b>Statistic:</b> ${this._params!.statistic.statistic_id}\n      </div>\n      <ha-selector-datetime\n        label=\"Pick a time\"\n        .hass=${this.hass}\n        .selector=${this._dateTimeSelector}\n        .value=${this._moment}\n        @value-changed=${this._dateTimeSelectorChanged}\n      ></ha-selector-datetime>\n      <div class=\"stat-list\">${stats}</div>\n      <mwc-button\n        slot=\"primaryAction\"\n        dialogAction=\"cancel\"\n        .label=${this.hass.localize(\"ui.common.close\")}\n      ></mwc-button>\n    `;\n  }\n\n  private _dateTimeSelectorChanged(ev) {\n    this._moment = ev.detail.value;\n    this._fetchStats();\n  }\n\n  private _renderAdjustStat() {\n    const unit = getDisplayUnit(\n      this.hass,\n      this._params!.statistic.statistic_id,\n      this._params!.statistic\n    );\n    return html`\n      <div class=\"text-content\">\n        <b>Statistic:</b> ${this._params!.statistic.statistic_id}\n      </div>\n\n      <div class=\"table-row\">\n        <span>Start</span>\n        <span\n          >${formatDateTime(\n            new Date(this._chosenStat!.start),\n            this.hass.locale\n          )}</span\n        >\n      </div>\n\n      <div class=\"table-row\">\n        <span>End</span>\n        <span\n          >${formatDateTime(\n            new Date(this._chosenStat!.end),\n            this.hass.locale\n          )}</span\n        >\n      </div>\n\n      <ha-selector-number\n        label=\"New Value\"\n        .hass=${this.hass}\n        .selector=${this._amountSelector(unit || undefined)}\n        .value=${this._amount}\n        .disabled=${this._busy}\n        @value-changed=${(ev) => {\n          this._amount = ev.detail.value;\n        }}\n      ></ha-selector-number>\n\n      <mwc-button\n        slot=\"primaryAction\"\n        label=\"Adjust\"\n        .disabled=${this._busy}\n        @click=${() => {\n          this._fixIssue();\n        }}\n      ></mwc-button>\n      <mwc-button\n        slot=\"secondaryAction\"\n        .label=${this.hass.localize(\"ui.common.back\")}\n        .disabled=${this._busy}\n        @click=${() => {\n          this._chosenStat = undefined;\n        }}\n      ></mwc-button>\n    `;\n  }\n\n  private async _fetchStats(): Promise<void> {\n    this._stats5min = undefined;\n    this._statsHour = undefined;\n    const statId = this._params!.statistic.statistic_id;\n\n    // moment is in format YYYY-MM-DD HH:mm:ss because of selector\n    // Here we convert it to an ISO string.\n    const moment = new Date(this._moment!.replace(\" \", \"T\"));\n\n    // Search 3 hours before and 3 hours after chosen time\n    const hourStatStart = new Date(moment.getTime());\n    hourStatStart.setTime(hourStatStart.getTime() - 3 * 3600 * 1000);\n    const hourStatEnd = new Date(moment.getTime());\n    hourStatEnd.setTime(hourStatEnd.getTime() + 3 * 3600 * 1000);\n\n    const statsHourData = await fetchStatistics(\n      this.hass,\n      hourStatStart,\n      hourStatEnd,\n      [statId],\n      \"hour\"\n    );\n    this._statsHour =\n      statId in statsHourData ? statsHourData[statId].slice(0, 6) : [];\n\n    // Can't have 5 min data if no hourly data\n    if (this._statsHour.length === 0) {\n      this._stats5min = [];\n      return;\n    }\n\n    // Search 15 minutes before and 15 minutes after chosen time\n    const minStatStart = new Date(moment.getTime());\n    minStatStart.setTime(minStatStart.getTime() - 15 * 60 * 1000);\n    const minStatEnd = new Date(moment.getTime());\n    minStatEnd.setTime(minStatEnd.getTime() + 15 * 60 * 1000);\n\n    const stats5MinData = await fetchStatistics(\n      this.hass,\n      minStatStart,\n      minStatEnd,\n      [statId],\n      \"5minute\"\n    );\n\n    this._stats5min =\n      statId in stats5MinData ? stats5MinData[statId].slice(0, 6) : [];\n  }\n\n  private async _fixIssue(): Promise<void> {\n    const unit = getDisplayUnit(\n      this.hass,\n      this._params!.statistic.statistic_id,\n      this._params!.statistic\n    );\n    this._busy = true;\n    try {\n      await adjustStatisticsSum(\n        this.hass,\n        this._params!.statistic.statistic_id,\n        this._chosenStat!.start,\n        this._amount! - this._origAmount!,\n        unit || null\n      );\n    } catch (err: any) {\n      this._busy = false;\n      showAlertDialog(this, {\n        text: `Error adjusting sum: ${err.message || err}`,\n      });\n      return;\n    }\n    showToast(this, {\n      message: \"Statistic sum adjusted\",\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            --mdc-dialog-max-height: 100%;\n            height: 100%;\n          }\n        }\n\n        @media all and (min-width: 850px) {\n          ha-dialog {\n            --mdc-dialog-max-height: 80%;\n            --mdc-dialog-max-height: 80%;\n          }\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 480px;\n          }\n        }\n\n        .text-content,\n        ha-selector-datetime,\n        ha-selector-number {\n          margin-bottom: 20px;\n        }\n        mwc-list-item {\n          margin: 0 -24px;\n          --mdc-list-side-padding: 24px;\n        }\n        .table-row {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 20px;\n        }\n        .stat-list {\n          min-height: 360px;\n          display: flex;\n          flex-direction: column;\n        }\n        .stat-list ha-circular-progress {\n          margin: 0 auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-statistics-adjust-sum\": DialogStatisticsFixUnsupportedUnitMetadata;\n  }\n}\n"],"names":[],"sourceRoot":""}