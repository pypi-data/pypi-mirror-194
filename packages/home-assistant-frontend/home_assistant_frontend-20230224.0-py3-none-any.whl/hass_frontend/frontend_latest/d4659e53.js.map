{"version":3,"file":"d4659e53.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;;;;ACnBA;;AAEA;;;;AAsBA;;AAEA;AAsDA;AAIA;;;;AAkBA;;AAEA;;;;AAsBA;;AAEA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-options-flow.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { html } from \"lit\";\nimport { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  manifest?: IntegrationManifest | null\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      manifest,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n          hass.loadBackendTranslation(\"selector\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n          hass.loadBackendTranslation(\"selector\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderShowFormStepFieldLocalizeValue(hass, _step, key) {\n        return hass.localize(`component.${configEntry.domain}.selector.${key}`);\n      },\n\n      renderShowFormStepSubmitButton(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.submit`\n          ) ||\n          hass.localize(\n            `ui.panel.config.integrations.config_flow.${\n              step.last_step === false ? \"next\" : \"submit\"\n            }`\n          )\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          (reason === \"loading_flow\" || reason === \"loading_step\"\n            ? hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n                integration: domainToName(hass.localize, configEntry.domain),\n              })\n            : \"\")\n        );\n      },\n    }\n  );\n"],"names":[],"sourceRoot":""}