{"version":3,"file":"746bb353.js","mappings":";;;;;AAsIA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;;;AAIA;;AAEA;;AAOA;AACA;AACA;;;AATA;AAGA;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsWA","sources":["webpack://home-assistant-frontend/./src/panels/history/ha-panel-history.ts"],"sourcesContent":["import { mdiFilterRemove, mdiRefresh } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  addDays,\n  differenceInHours,\n  endOfToday,\n  endOfWeek,\n  endOfYesterday,\n  startOfToday,\n  startOfWeek,\n  startOfYesterday,\n} from \"date-fns/esm\";\nimport {\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket/dist/types\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { firstWeekdayIndex } from \"../../common/datetime/first_weekday\";\nimport { LocalStorage } from \"../../common/decorators/local-storage\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n} from \"../../common/url/search-params\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport { MIN_TIME_BETWEEN_UPDATES } from \"../../components/chart/ha-chart-base\";\nimport \"../../components/chart/state-history-charts\";\nimport type { StateHistoryCharts } from \"../../components/chart/state-history-charts\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-date-range-picker\";\nimport type { DateRangePickerRanges } from \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-target-picker\";\nimport {\n  AreaDeviceLookup,\n  AreaEntityLookup,\n  getAreaDeviceLookup,\n  getAreaEntityLookup,\n} from \"../../data/area_registry\";\nimport {\n  DeviceEntityLookup,\n  getDeviceEntityLookup,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport { subscribeEntityRegistry } from \"../../data/entity_registry\";\nimport {\n  computeHistory,\n  HistoryResult,\n  subscribeHistory,\n} from \"../../data/history\";\nimport \"../../layouts/ha-app-layout\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\nclass HaPanelHistory extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) hass!: HomeAssistant;\n\n  @property({ reflect: true, type: Boolean }) narrow!: boolean;\n\n  @property({ reflect: true, type: Boolean }) rtl = false;\n\n  @state() private _startDate: Date;\n\n  @state() private _endDate: Date;\n\n  @LocalStorage(\"historyPickedValue\", true, false)\n  private _targetPickerValue?: HassServiceTarget;\n\n  @state() private _isLoading = false;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  @state() private _ranges?: DateRangePickerRanges;\n\n  @state() private _deviceEntityLookup?: DeviceEntityLookup;\n\n  @state() private _areaEntityLookup?: AreaEntityLookup;\n\n  @state() private _areaDeviceLookup?: AreaDeviceLookup;\n\n  @query(\"state-history-charts\")\n  private _stateHistoryCharts?: StateHistoryCharts;\n\n  private _subscribed?: Promise<UnsubscribeFunc>;\n\n  private _interval?: number;\n\n  public constructor() {\n    super();\n\n    const start = new Date();\n    start.setHours(start.getHours() - 1, 0, 0, 0);\n    this._startDate = start;\n\n    const end = new Date();\n    end.setHours(end.getHours() + 2, 0, 0, 0);\n    this._endDate = end;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated) {\n      this._getHistory();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._unsubscribeHistory();\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._deviceEntityLookup = getDeviceEntityLookup(entities);\n        this._areaEntityLookup = getAreaEntityLookup(entities);\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._areaDeviceLookup = getAreaDeviceLookup(devices);\n      }),\n    ];\n  }\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.history\")}</div>\n            ${this._targetPickerValue\n              ? html`\n                  <ha-icon-button\n                    @click=${this._removeAll}\n                    .disabled=${this._isLoading}\n                    .path=${mdiFilterRemove}\n                    .label=${this.hass.localize(\"ui.panel.history.remove_all\")}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            <ha-icon-button\n              @click=${this._getHistory}\n              .disabled=${this._isLoading || !this._targetPickerValue}\n              .path=${mdiRefresh}\n              .label=${this.hass.localize(\"ui.common.refresh\")}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"flex content\">\n          <div class=\"filters\">\n            <ha-date-range-picker\n              .hass=${this.hass}\n              ?disabled=${this._isLoading}\n              .startDate=${this._startDate}\n              .endDate=${this._endDate}\n              .ranges=${this._ranges}\n              @change=${this._dateRangeChanged}\n            ></ha-date-range-picker>\n            <ha-target-picker\n              .hass=${this.hass}\n              .value=${this._targetPickerValue}\n              .disabled=${this._isLoading}\n              addOnTop\n              @value-changed=${this._targetsChanged}\n            ></ha-target-picker>\n          </div>\n          ${this._isLoading\n            ? html`<div class=\"progress-wrapper\">\n                <ha-circular-progress\n                  active\n                  alt=${this.hass.localize(\"ui.common.loading\")}\n                ></ha-circular-progress>\n              </div>`\n            : !this._targetPickerValue\n            ? html`<div class=\"start-search\">\n                ${this.hass.localize(\"ui.panel.history.start_search\")}\n              </div>`\n            : html`\n                <state-history-charts\n                  .hass=${this.hass}\n                  .historyData=${this._stateHistory}\n                  .endTime=${this._endDate}\n                >\n                </state-history-charts>\n              `}\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (this.hasUpdated) {\n      return;\n    }\n\n    const today = new Date();\n    const weekStartsOn = firstWeekdayIndex(this.hass.locale);\n    const weekStart = startOfWeek(today, { weekStartsOn });\n    const weekEnd = endOfWeek(today, { weekStartsOn });\n\n    this._ranges = {\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.today\")]: [\n        startOfToday(),\n        endOfToday(),\n      ],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.yesterday\")]:\n        [startOfYesterday(), endOfYesterday()],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.this_week\")]:\n        [weekStart, weekEnd],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.last_week\")]:\n        [addDays(weekStart, -7), addDays(weekEnd, -7)],\n    };\n\n    const searchParams = extractSearchParamsObject();\n    const entityIds = searchParams.entity_id;\n    const deviceIds = searchParams.device_id;\n    const areaIds = searchParams.area_id;\n    if (entityIds || deviceIds || areaIds) {\n      this._targetPickerValue = {};\n    }\n    if (entityIds) {\n      const splitIds = entityIds.split(\",\");\n      this._targetPickerValue!.entity_id = splitIds;\n    }\n    if (deviceIds) {\n      const splitIds = deviceIds.split(\",\");\n      this._targetPickerValue!.device_id = splitIds;\n    }\n    if (areaIds) {\n      const splitIds = areaIds.split(\",\");\n      this._targetPickerValue!.area_id = splitIds;\n    }\n\n    const startDate = searchParams.start_date;\n    if (startDate) {\n      this._startDate = new Date(startDate);\n    }\n    const endDate = searchParams.end_date;\n    if (endDate) {\n      this._endDate = new Date(endDate);\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      this._targetPickerValue &&\n      (changedProps.has(\"_startDate\") ||\n        changedProps.has(\"_endDate\") ||\n        changedProps.has(\"_targetPickerValue\") ||\n        (!this._stateHistory &&\n          (changedProps.has(\"_deviceEntityLookup\") ||\n            changedProps.has(\"_areaEntityLookup\") ||\n            changedProps.has(\"_areaDeviceLookup\"))))\n    ) {\n      this._getHistory();\n    }\n\n    if (!changedProps.has(\"hass\") && !changedProps.has(\"_entities\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.language !== this.hass.language) {\n      this.rtl = computeRTL(this.hass);\n    }\n  }\n\n  private _removeAll() {\n    this._targetPickerValue = undefined;\n    this._updatePath();\n  }\n\n  private async _getHistory() {\n    if (!this._targetPickerValue) {\n      return;\n    }\n    this._isLoading = true;\n    const entityIds = this._getEntityIds();\n\n    if (entityIds === undefined) {\n      this._isLoading = false;\n      this._stateHistory = undefined;\n      return;\n    }\n\n    if (entityIds.length === 0) {\n      this._isLoading = false;\n      this._stateHistory = { line: [], timeline: [] };\n      return;\n    }\n\n    if (this._subscribed) {\n      this._unsubscribeHistory();\n    }\n\n    const now = new Date();\n\n    this._subscribed = subscribeHistory(\n      this.hass,\n      (history) => {\n        this._isLoading = false;\n        this._stateHistory = computeHistory(\n          this.hass,\n          history,\n          this.hass.localize\n        );\n      },\n      this._startDate,\n      this._endDate,\n      entityIds\n    );\n    this._subscribed.catch(() => {\n      this._isLoading = false;\n      this._unsubscribeHistory();\n    });\n    if (this._endDate > now) {\n      this._setRedrawTimer();\n    }\n  }\n\n  private _setRedrawTimer() {\n    clearInterval(this._interval);\n    const now = new Date();\n    const end = this._endDate > now ? now : this._endDate;\n    const timespan = differenceInHours(this._startDate, end);\n    this._interval = window.setInterval(\n      () => this._stateHistoryCharts?.requestUpdate(),\n      // if timespan smaller than 1 hour, update every 10 seconds, smaller than 5 hours, redraw every minute, otherwise every 5 minutes\n      timespan < 2\n        ? 10000\n        : timespan < 10\n        ? 60 * 1000\n        : MIN_TIME_BETWEEN_UPDATES\n    );\n  }\n\n  private _unsubscribeHistory() {\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = undefined;\n    }\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub?.());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _getEntityIds(): string[] | undefined {\n    if (\n      !this._targetPickerValue ||\n      this._deviceEntityLookup === undefined ||\n      this._areaEntityLookup === undefined ||\n      this._areaDeviceLookup === undefined\n    ) {\n      return undefined;\n    }\n\n    const entityIds = new Set<string>();\n    let {\n      area_id: searchingAreaId,\n      device_id: searchingDeviceId,\n      entity_id: searchingEntityId,\n    } = this._targetPickerValue;\n\n    if (searchingAreaId) {\n      searchingAreaId = ensureArray(searchingAreaId);\n      for (const singleSearchingAreaId of searchingAreaId) {\n        const foundEntities = this._areaEntityLookup[singleSearchingAreaId];\n        if (foundEntities?.length) {\n          for (const foundEntity of foundEntities) {\n            if (foundEntity.entity_category === null) {\n              entityIds.add(foundEntity.entity_id);\n            }\n          }\n        }\n\n        const foundDevices = this._areaDeviceLookup[singleSearchingAreaId];\n        if (!foundDevices?.length) {\n          continue;\n        }\n\n        for (const foundDevice of foundDevices) {\n          const foundDeviceEntities = this._deviceEntityLookup[foundDevice.id];\n          if (!foundDeviceEntities?.length) {\n            continue;\n          }\n\n          for (const foundDeviceEntity of foundDeviceEntities) {\n            if (\n              (!foundDeviceEntity.area_id ||\n                foundDeviceEntity.area_id === singleSearchingAreaId) &&\n              foundDeviceEntity.entity_category === null\n            ) {\n              entityIds.add(foundDeviceEntity.entity_id);\n            }\n          }\n        }\n      }\n    }\n\n    if (searchingDeviceId) {\n      searchingDeviceId = ensureArray(searchingDeviceId);\n      for (const singleSearchingDeviceId of searchingDeviceId) {\n        const foundEntities = this._deviceEntityLookup[singleSearchingDeviceId];\n        if (!foundEntities?.length) {\n          continue;\n        }\n\n        for (const foundEntity of foundEntities) {\n          if (foundEntity.entity_category === null) {\n            entityIds.add(foundEntity.entity_id);\n          }\n        }\n      }\n    }\n\n    if (searchingEntityId) {\n      searchingEntityId = ensureArray(searchingEntityId);\n      for (const singleSearchingEntityId of searchingEntityId) {\n        entityIds.add(singleSearchingEntityId);\n      }\n    }\n\n    return [...entityIds];\n  }\n\n  private _dateRangeChanged(ev) {\n    this._startDate = ev.detail.startDate;\n    const endDate = ev.detail.endDate;\n    if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n    }\n    this._endDate = endDate;\n\n    this._updatePath();\n  }\n\n  private _targetsChanged(ev) {\n    this._targetPickerValue = ev.detail.value;\n    this._updatePath();\n  }\n\n  private _updatePath() {\n    const params: Record<string, string> = {};\n\n    if (this._targetPickerValue) {\n      if (this._targetPickerValue.entity_id) {\n        params.entity_id = ensureArray(this._targetPickerValue.entity_id).join(\n          \",\"\n        );\n      }\n      if (this._targetPickerValue.area_id) {\n        params.area_id = ensureArray(this._targetPickerValue.area_id).join(\",\");\n      }\n      if (this._targetPickerValue.device_id) {\n        params.device_id = ensureArray(this._targetPickerValue.device_id).join(\n          \",\"\n        );\n      }\n    }\n\n    if (this._startDate) {\n      params.start_date = this._startDate.toISOString();\n    }\n\n    if (this._endDate) {\n      params.end_date = this._endDate.toISOString();\n    }\n\n    navigate(`/history?${createSearchParam(params)}`, { replace: true });\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 0 16px 16px;\n        }\n\n        state-history-charts {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) state-history-charts {\n          height: calc(100vh - 198px);\n        }\n\n        .progress-wrapper {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) .progress-wrapper {\n          height: calc(100vh - 198px);\n        }\n\n        :host([virtualize]) {\n          height: 100%;\n        }\n\n        .progress-wrapper {\n          position: relative;\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-start;\n          margin-top: 16px;\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          max-width: 100%;\n          direction: var(--direction);\n        }\n\n        @media all and (max-width: 1025px) {\n          .filters {\n            flex-direction: column;\n          }\n          ha-date-range-picker {\n            margin-right: 0;\n            margin-inline-end: 0;\n            width: 100%;\n          }\n        }\n\n        ha-circular-progress {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n        }\n\n        .start-search {\n          padding-top: 16px;\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-panel-history\", HaPanelHistory);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-history\": HaPanelHistory;\n  }\n}\n"],"names":[],"sourceRoot":""}