{"version":3,"file":"68dffd7b.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;;;;;AChCA;AACA;;AAEA;AACA;;AAIA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;;;AA2CA","sources":["webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/energy/ha-panel-energy.ts"],"sourcesContent":["/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n          padding-top: env(safe-area-inset-top);\n          padding-bottom: env(safe-area-inset-bottom);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../components/ha-menu-button\";\nimport { LovelaceConfig } from \"../../data/lovelace\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../lovelace/components/hui-energy-period-selector\";\nimport { Lovelace } from \"../lovelace/types\";\nimport \"../lovelace/views/hui-view\";\n\nconst ENERGY_LOVELACE_CONFIG: LovelaceConfig = {\n  views: [\n    {\n      strategy: {\n        type: \"energy\",\n      },\n    },\n  ],\n};\n\n@customElement(\"ha-panel-energy\")\nclass PanelEnergy extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @state() private _viewIndex = 0;\n\n  @state() private _lovelace?: Lovelace;\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this.hasUpdated) {\n      this.hass.loadFragmentTranslation(\"lovelace\");\n    }\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n    if (oldHass?.locale !== this.hass.locale) {\n      this._setLovelace();\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"narrow\") &&\n      changedProps.get(\"narrow\") !== undefined\n    ) {\n      this._reloadView();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.energy\")}</div>\n            ${this.narrow\n              ? \"\"\n              : html`\n                  <hui-energy-period-selector\n                    .hass=${this.hass}\n                    collectionKey=\"energy_dashboard\"\n                  ></hui-energy-period-selector>\n                `}\n          </app-toolbar>\n        </app-header>\n        <hui-view\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n          .lovelace=${this._lovelace}\n          .index=${this._viewIndex}\n          @reload-energy-panel=${this._reloadView}\n        ></hui-view>\n      </ha-app-layout>\n    `;\n  }\n\n  private _setLovelace() {\n    this._lovelace = {\n      config: ENERGY_LOVELACE_CONFIG,\n      rawConfig: ENERGY_LOVELACE_CONFIG,\n      editMode: false,\n      urlPath: \"energy\",\n      mode: \"generated\",\n      locale: this.hass.locale,\n      enableFullEditMode: () => undefined,\n      saveConfig: async () => undefined,\n      deleteConfig: async () => undefined,\n      setEditMode: () => undefined,\n    };\n  }\n\n  private _reloadView() {\n    // Force strategy to be re-run by make a copy of the view\n    const config = this._lovelace!.config;\n    this._lovelace = {\n      ...this._lovelace!,\n      config: { ...config, views: [{ ...config.views[0] }] },\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        app-toolbar {\n          display: flex;\n          justify-content: space-between;\n        }\n        hui-energy-period-selector {\n          width: 100%;\n          padding-left: 16px;\n          padding-inline-start: 16px;\n          --disabled-text-color: rgba(var(--rgb-text-primary-color), 0.5);\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-energy\": PanelEnergy;\n  }\n}\n\ndeclare global {\n  interface HASSDomEvents {\n    \"reload-energy-panel\": undefined;\n  }\n}\n"],"names":[],"sourceRoot":""}