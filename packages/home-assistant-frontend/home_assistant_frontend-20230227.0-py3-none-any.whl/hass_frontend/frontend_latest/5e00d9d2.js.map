{"version":3,"file":"5e00d9d2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;AC3DA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AAIA;;AAKA;;;;ACjEA;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;ACpDA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AC3BA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;AChHA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;;ACrGA;AACA;AACA;;;AAGA;;;AAKA;;AAGA;;;;;AAQA;AAGA;AACA;AACA;;;AAGA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;AAKA;;;AAKA;AACA;AACA;AAGA;;;;;AAKA;;;AAKA;;AAEA;;;AAKA;;;;;;;AASA;AACA;AACA;;;;AAIA;;AAEA;;;AAKA;;;;;;;AASA;AACA;AACA;;;AAGA;;AAGA;;;AAKA;AACA;AACA;;;;AAIA;AAGA;AAGA;;AAIA;;;;AAKA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;;;;;AASA;;;;AAMA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;AAKA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;AAKA;;AAGA;AACA;AAKA;;AAEA;;;AAIA;;;AAKA;;AAIA;AACA;;;;;AAKA;AACA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-general.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport timezones from \"google-timezones-json\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { UNIT_C } from \"../../../common/const\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { navigate } from \"../../../common/navigate\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport type { HaProgressButton } from \"../../../components/buttons/ha-progress-button\";\nimport { getCountryOptions } from \"../../../components/country-datalist\";\nimport { getCurrencyOptions } from \"../../../components/currency-datalist\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../components/ha-radio\";\nimport \"../../../components/ha-select\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/map/ha-locations-editor\";\nimport type { MarkerLocation } from \"../../../components/map/ha-locations-editor\";\nimport { ConfigUpdateValues, saveCoreConfig } from \"../../../data/core\";\nimport { SYMBOL_TO_ISO } from \"../../../data/currency\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-alert\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HaCheckbox } from \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-checkbox\";\n\n@customElement(\"ha-config-section-general\")\nclass HaConfigSectionGeneral extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _submitting = false;\n\n  @state() private _unitSystem?: ConfigUpdateValues[\"unit_system\"];\n\n  @state() private _currency?: string;\n\n  @state() private _language?: string;\n\n  @state() private _country?: string | null;\n\n  @state() private _name?: string;\n\n  @state() private _elevation?: number;\n\n  @state() private _timeZone?: string;\n\n  @state() private _location?: [number, number];\n\n  @state() private _languages?: { value: string; label: string }[];\n\n  @state() private _error?: string;\n\n  @state() private _updateUnits?: boolean;\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._submitting || !canEdit;\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.core.caption\")}\n      >\n        <div class=\"content\">\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <ha-card outlined>\n            <div class=\"card-content\">\n              ${!canEdit\n                ? html`\n                    <p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                      )}\n                    </p>\n                  `\n                : \"\"}\n              <ha-textfield\n                name=\"name\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.location_name\"\n                )}\n                .disabled=${disabled}\n                .value=${this._name}\n                @change=${this._handleChange}\n              ></ha-textfield>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.time_zone\"\n                )}\n                name=\"timeZone\"\n                fixedMenuPosition\n                naturalMenuWidth\n                .disabled=${disabled}\n                .value=${this._timeZone}\n                @closed=${stopPropagation}\n                @change=${this._handleChange}\n              >\n                ${Object.keys(timezones).map(\n                  (tz) =>\n                    html`<mwc-list-item value=${tz}\n                      >${timezones[tz]}</mwc-list-item\n                    >`\n                )}\n              </ha-select>\n              <ha-textfield\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.elevation\"\n                )}\n                name=\"elevation\"\n                type=\"number\"\n                .disabled=${disabled}\n                .value=${this._elevation}\n                .suffix=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.elevation_meters\"\n                )}\n                @change=${this._handleChange}\n              >\n              </ha-textfield>\n              <div>\n                <div>\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.unit_system\"\n                  )}\n                </div>\n                <ha-formfield\n                  .label=${html`\n                    <span style=\"font-size: 14px\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.metric_example\"\n                      )}\n                    </span>\n                    <div style=\"color: var(--secondary-text-color)\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.unit_system_metric\"\n                      )}\n                    </div>\n                  `}\n                >\n                  <ha-radio\n                    name=\"unit_system\"\n                    value=\"metric\"\n                    .checked=${this._unitSystem === \"metric\"}\n                    @change=${this._unitSystemChanged}\n                    .disabled=${this._submitting}\n                  ></ha-radio>\n                </ha-formfield>\n                <ha-formfield\n                  .label=${html`\n                    <span style=\"font-size: 14px\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.us_customary_example\"\n                      )}\n                    </span>\n                    <div style=\"color: var(--secondary-text-color)\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.unit_system_us_customary\"\n                      )}\n                    </div>\n                  `}\n                >\n                  <ha-radio\n                    name=\"unit_system\"\n                    value=\"us_customary\"\n                    .checked=${this._unitSystem === \"us_customary\"}\n                    @change=${this._unitSystemChanged}\n                    .disabled=${this._submitting}\n                  ></ha-radio>\n                </ha-formfield>\n                ${this._unitSystem !== this._configuredUnitSystem()\n                  ? html`\n                      <ha-formfield\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.core.section.core.core_config.update_units_label\"\n                        )}\n                      >\n                        <ha-checkbox\n                          .checked=${this._updateUnits}\n                          .disabled=${this._submitting}\n                          @change=${this._updateUnitsChanged}\n                        ></ha-checkbox>\n                      </ha-formfield>\n                      <div class=\"secondary\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.core.section.core.core_config.update_units_text_1\"\n                        )}\n                        ${this.hass.localize(\n                          \"ui.panel.config.core.section.core.core_config.update_units_text_2\"\n                        )} <br /><br />\n                        ${this.hass.localize(\n                          \"ui.panel.config.core.section.core.core_config.update_units_text_3\"\n                        )}\n                      </div>\n                    `\n                  : \"\"}\n              </div>\n              <div>\n                <ha-select\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.currency\"\n                  )}\n                  name=\"currency\"\n                  fixedMenuPosition\n                  naturalMenuWidth\n                  .disabled=${disabled}\n                  .value=${this._currency}\n                  @closed=${stopPropagation}\n                  @change=${this._handleChange}\n                >\n                  ${getCurrencyOptions(this.hass.locale.language).map(\n                    ({ value, label }) =>\n                      html`<mwc-list-item .value=${value}>\n                        ${label}\n                      </mwc-list-item>`\n                  )}</ha-select\n                >\n                <a\n                  href=\"https://en.wikipedia.org/wiki/ISO_4217#Active_codes\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  class=\"find-value\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.find_currency_value\"\n                  )}</a\n                >\n              </div>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.country\"\n                )}\n                name=\"country\"\n                fixedMenuPosition\n                naturalMenuWidth\n                .disabled=${disabled}\n                .value=${this._country}\n                @closed=${stopPropagation}\n                @change=${this._handleChange}\n              >\n                ${getCountryOptions(this.hass.locale.language).map(\n                  ({ value, label }) =>\n                    html`<mwc-list-item .value=${value}>\n                      ${label}\n                    </mwc-list-item>`\n                )}</ha-select\n              >\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.language\"\n                )}\n                name=\"language\"\n                fixedMenuPosition\n                naturalMenuWidth\n                .disabled=${disabled}\n                .value=${this._language}\n                @closed=${stopPropagation}\n                @change=${this._handleChange}\n              >\n                ${this._languages?.map(\n                  ({ value, label }) =>\n                    html`<mwc-list-item .value=${value}\n                      >${label}</mwc-list-item\n                    >`\n                )}</ha-select\n              >\n            </div>\n            ${this.narrow\n              ? html`\n                  <ha-locations-editor\n                    .hass=${this.hass}\n                    .locations=${this._markerLocation(\n                      this.hass.config.latitude,\n                      this.hass.config.longitude,\n                      this._location\n                    )}\n                    @location-updated=${this._locationChanged}\n                  ></ha-locations-editor>\n                `\n              : html`\n                  <ha-settings-row>\n                    <div slot=\"heading\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.edit_location\"\n                      )}\n                    </div>\n                    <div slot=\"description\" class=\"secondary\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.edit_location_description\"\n                      )}\n                    </div>\n                    <mwc-button @click=${this._editLocation}\n                      >${this.hass.localize(\"ui.common.edit\")}</mwc-button\n                    >\n                  </ha-settings-row>\n                `}\n            <div class=\"card-actions\">\n              <ha-progress-button @click=${this._updateEntry}>\n                ${this.hass!.localize(\"ui.panel.config.zone.detail.update\")}\n              </ha-progress-button>\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _configuredUnitSystem() {\n    return this.hass.config.unit_system.temperature === UNIT_C\n      ? \"metric\"\n      : \"us_customary\";\n  }\n\n  protected firstUpdated(): void {\n    this._unitSystem = this._configuredUnitSystem();\n    this._currency = this.hass.config.currency;\n    this._country = this.hass.config.country;\n    this._language = this.hass.config.language;\n    this._elevation = this.hass.config.elevation;\n    this._timeZone = this.hass.config.time_zone || \"Etc/GMT\";\n    this._name = this.hass.config.location_name;\n    this._updateUnits = true;\n    this._computeLanguages();\n  }\n\n  private _computeLanguages() {\n    if (!this.hass.translationMetadata?.translations) {\n      return;\n    }\n    this._languages = Object.entries(this.hass.translationMetadata.translations)\n      .sort((a, b) =>\n        caseInsensitiveStringCompare(\n          a[1].nativeName,\n          b[1].nativeName,\n          this.hass.locale.language\n        )\n      )\n      .map(([value, metaData]) => ({\n        value,\n        label: metaData.nativeName,\n      }));\n  }\n\n  private _handleChange(ev) {\n    const target = ev.currentTarget;\n    let value = target.value;\n\n    if (target.name === \"currency\" && value) {\n      if (value in SYMBOL_TO_ISO) {\n        value = SYMBOL_TO_ISO[value];\n      }\n    }\n\n    this[`_${target.name}`] = value;\n  }\n\n  private _unitSystemChanged(ev: CustomEvent) {\n    this._unitSystem = (ev.target as HaRadio).value as\n      | \"metric\"\n      | \"us_customary\";\n  }\n\n  private _updateUnitsChanged(ev: CustomEvent) {\n    this._updateUnits = (ev.target as HaCheckbox).checked;\n  }\n\n  private _locationChanged(ev: CustomEvent) {\n    this._location = ev.detail.location;\n  }\n\n  private async _updateEntry(ev: CustomEvent) {\n    const button = ev.target as HaProgressButton;\n    if (button.progress) {\n      return;\n    }\n    const unitSystemChanged = this._unitSystem !== this._configuredUnitSystem();\n    if (unitSystemChanged && this._updateUnits) {\n      if (\n        !(await showConfirmationDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.update_units_confirm_title\"\n          ),\n          text: this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.update_units_confirm_text\"\n          ),\n          confirmText: this.hass!.localize(\n            \"ui.panel.config.core.section.core.core_config.update_units_confirm_update\"\n          ),\n          dismissText: this.hass!.localize(\"ui.common.cancel\"),\n        }))\n      ) {\n        return;\n      }\n    }\n    button.progress = true;\n\n    let locationConfig;\n\n    if (this._location) {\n      locationConfig = {\n        latitude: this._location[0],\n        longitude: this._location[1],\n      };\n    }\n\n    this._error = undefined;\n\n    try {\n      await saveCoreConfig(this.hass, {\n        currency: this._currency,\n        elevation: Number(this._elevation),\n        unit_system: this._unitSystem,\n        update_units: this._updateUnits && unitSystemChanged,\n        time_zone: this._timeZone,\n        location_name: this._name,\n        language: this._language,\n        country: this._country,\n        ...locationConfig,\n      });\n      button.actionSuccess();\n    } catch (err: any) {\n      button.actionError();\n      this._error = err.message;\n    } finally {\n      button.progress = false;\n    }\n  }\n\n  private _markerLocation = memoizeOne(\n    (\n      lat: number,\n      lng: number,\n      location?: [number, number]\n    ): MarkerLocation[] => [\n      {\n        id: \"location\",\n        latitude: location ? location[0] : lat,\n        longitude: location ? location[1] : lng,\n        location_editable: true,\n      },\n    ]\n  );\n\n  private _editLocation() {\n    navigate(\"/config/zone/edit/zone.home\");\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 0 auto;\n        height: 100%;\n        justify-content: space-between;\n        flex-direction: column;\n        display: flex;\n      }\n      .card-content {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 16px 16px 0 16px;\n      }\n      .card-actions {\n        text-align: right;\n        height: 48px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        margin-top: 16px;\n      }\n      .card-content > * {\n        display: block;\n        margin-top: 16px;\n      }\n      ha-select {\n        display: block;\n      }\n      a.find-value {\n        margin-top: 8px;\n        display: inline-block;\n      }\n      ha-locations-editor {\n        display: block;\n        height: 400px;\n        padding: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-general\": HaConfigSectionGeneral;\n  }\n}\n"],"names":[],"sourceRoot":""}