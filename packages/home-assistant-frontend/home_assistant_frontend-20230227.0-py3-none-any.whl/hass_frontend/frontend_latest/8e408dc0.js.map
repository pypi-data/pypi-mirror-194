{"version":3,"file":"8e408dc0.js","mappings":";;AAmIA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-gauge-card-editor.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  array,\n  assert,\n  assign,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { GaugeCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst gaugeSegmentStruct = object({\n  from: number(),\n  color: string(),\n  label: optional(string()),\n});\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    name: optional(string()),\n    entity: optional(entityId()),\n    unit: optional(string()),\n    min: optional(number()),\n    max: optional(number()),\n    severity: optional(object()),\n    theme: optional(string()),\n    needle: optional(boolean()),\n    segments: optional(array(gaugeSegmentStruct)),\n  })\n);\n\n@customElement(\"hui-gauge-card-editor\")\nexport class HuiGaugeCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: GaugeCardConfig;\n\n  public setConfig(config: GaugeCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (showSeverity: boolean) =>\n      [\n        {\n          name: \"entity\",\n          selector: {\n            entity: {\n              domain: [\"counter\", \"input_number\", \"number\", \"sensor\"],\n            },\n          },\n        },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            { name: \"unit\", selector: { text: {} } },\n          ],\n        },\n        { name: \"theme\", selector: { theme: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            { name: \"min\", selector: { number: { mode: \"box\" } } },\n            { name: \"max\", selector: { number: { mode: \"box\" } } },\n          ],\n        },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            { name: \"needle\", selector: { boolean: {} } },\n            { name: \"show_severity\", selector: { boolean: {} } },\n          ],\n        },\n        ...(showSeverity\n          ? ([\n              {\n                name: \"severity\",\n                type: \"grid\",\n                schema: [\n                  {\n                    name: \"green\",\n                    selector: { number: { mode: \"box\" } },\n                  },\n                  {\n                    name: \"yellow\",\n                    selector: { number: { mode: \"box\" } },\n                  },\n                  {\n                    name: \"red\",\n                    selector: { number: { mode: \"box\" } },\n                  },\n                ],\n              },\n            ] as const)\n          : []),\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(this._config!.severity !== undefined);\n    const data = {\n      show_severity: this._config!.severity !== undefined,\n      ...this._config,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    let config = ev.detail.value;\n\n    if (config.show_severity) {\n      config = {\n        ...config,\n        severity: {\n          green: config.green || config.severity?.green || 0,\n          yellow: config.yellow || config.severity?.yellow || 0,\n          red: config.red || config.severity?.red || 0,\n        },\n      };\n    } else if (!config.show_severity && config.severity) {\n      delete config.severity;\n    }\n\n    delete config.show_severity;\n    delete config.green;\n    delete config.yellow;\n    delete config.red;\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"name\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.name\"\n        );\n      case \"entity\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entity\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.required\"\n        )})`;\n      case \"max\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.maximum\"\n        );\n      case \"min\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.minimum\"\n        );\n      case \"show_severity\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.gauge.severity.define\"\n        );\n      case \"needle\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.gauge.needle_gauge\"\n        );\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"unit\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.unit\"\n        );\n      default:\n        // \"green\" | \"yellow\" | \"red\"\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.gauge.severity.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-gauge-card-editor\": HuiGaugeCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}