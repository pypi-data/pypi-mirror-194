{"version":3,"file":"d43f6248.js","mappings":";;;;;;AAsBA;;;;AAKA;;ACXA;;;;AAOA;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;;ACvCA;AACA;AACA;AACA;;;;AAIA;;AAIA;;AAGA;;;AAGA;;;;AAMA;;;AAGA;;;AAKA;;;;AAKA;;AAIA;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;AAEA;;;AAIA;AACA;AACA;;AAEA;;AAIA;AACA;;;;AAMA;AAGA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAMA;;;AAKA;AACA;;;;;;;AASA;;AAEA;;AAjNA;;;;AAwNA;;;;;;;;;;;;;;;;;AAuGA","sources":["webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-config-dashboard.ts"],"sourcesContent":["import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiFolderMultipleOutline, mdiLan, mdiNetwork, mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  ConfigEntry,\n  getConfigEntries,\n} from \"../../../../../data/config_entries\";\nimport { computeRTL } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-fab\";\nimport { fileDownload } from \"../../../../../util/file_download\";\nimport \"../../../../../components/ha-icon-next\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport type { PageNavigation } from \"../../../../../layouts/hass-tabs-subpage\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport \"../../../../../components/buttons/ha-progress-button\";\nimport {\n  fetchZHAConfiguration,\n  updateZHAConfiguration,\n  ZHAConfiguration,\n  fetchZHANetworkSettings,\n  createZHANetworkBackup,\n  ZHANetworkSettings,\n  ZHANetworkBackupAndMetadata,\n} from \"../../../../../data/zha\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\n\nexport const zhaTabs: PageNavigation[] = [\n  {\n    translationKey: \"ui.panel.config.zha.network.caption\",\n    path: `/config/zha/dashboard`,\n    iconPath: mdiNetwork,\n  },\n  {\n    translationKey: \"ui.panel.config.zha.groups.caption\",\n    path: `/config/zha/groups`,\n    iconPath: mdiFolderMultipleOutline,\n  },\n  {\n    translationKey: \"ui.panel.config.zha.visualization.caption\",\n    path: `/config/zha/visualization`,\n    iconPath: mdiLan,\n  },\n];\n\n@customElement(\"zha-config-dashboard\")\nclass ZHAConfigDashboard extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property() public configEntryId?: string;\n\n  @property() private _configuration?: ZHAConfiguration;\n\n  @property() private _networkSettings?: ZHANetworkSettings;\n\n  @state() private _generatingBackup = false;\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this.hass.loadBackendTranslation(\"config_panel\", \"zha\", false);\n      this._fetchConfiguration();\n      this._fetchSettings();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${zhaTabs}\n        back-path=\"/config/integrations\"\n      >\n        <ha-card\n          header=${this.hass.localize(\n            \"ui.panel.config.zha.configuration_page.shortcuts_title\"\n          )}\n        >\n          ${this.configEntryId\n            ? html`<div class=\"card-actions\">\n                <a\n                  href=${`/config/devices/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                >\n                  <mwc-button\n                    >${this.hass.localize(\n                      \"ui.panel.config.devices.caption\"\n                    )}</mwc-button\n                  >\n                </a>\n                <a\n                  href=${`/config/entities/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                >\n                  <mwc-button\n                    >${this.hass.localize(\n                      \"ui.panel.config.entities.caption\"\n                    )}</mwc-button\n                  >\n                </a>\n              </div>`\n            : \"\"}\n        </ha-card>\n        <ha-card\n          class=\"network-settings\"\n          header=${this.hass.localize(\n            \"ui.panel.config.zha.configuration_page.network_settings_title\"\n          )}\n        >\n          ${this._networkSettings\n            ? html`<div class=\"card-content network-settings\">\n                <div>\n                  <strong>PAN ID:</strong>\n                  ${this._networkSettings.settings.network_info.pan_id}\n                </div>\n                <div>\n                  <strong>Extended PAN ID:</strong>\n                  ${this._networkSettings.settings.network_info.extended_pan_id}\n                </div>\n                <div>\n                  <strong>Channel:</strong>\n                  ${this._networkSettings.settings.network_info.channel}\n                </div>\n                <div>\n                  <strong>Coordinator IEEE:</strong>\n                  ${this._networkSettings.settings.node_info.ieee}\n                </div>\n                <div>\n                  <strong>Network key:</strong>\n                  ${this._networkSettings.settings.network_info.network_key.key}\n                </div>\n                <div>\n                  <strong>Radio type:</strong>\n                  ${this._networkSettings.radio_type}\n                </div>\n              </div>`\n            : \"\"}\n          <div class=\"card-actions\">\n            <ha-progress-button\n              @click=${this._createAndDownloadBackup}\n              .progress=${this._generatingBackup}\n              .disabled=${!this._networkSettings || this._generatingBackup}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.zha.configuration_page.download_backup\"\n              )}\n            </ha-progress-button>\n            <mwc-button class=\"warning\" @click=${this._openOptionFlow}>\n              ${this.hass.localize(\n                \"ui.panel.config.zha.configuration_page.migrate_radio\"\n              )}\n            </mwc-button>\n          </div>\n        </ha-card>\n        ${this._configuration\n          ? Object.entries(this._configuration.schemas).map(\n              ([section, schema]) => html`<ha-card\n                header=${this.hass.localize(\n                  `component.zha.config_panel.${section}.title`\n                )}\n              >\n                <div class=\"card-content\">\n                  <ha-form\n                    .hass=${this.hass}\n                    .schema=${schema}\n                    .data=${this._configuration!.data[section]}\n                    @value-changed=${this._dataChanged}\n                    .section=${section}\n                    .computeLabel=${this._computeLabelCallback(\n                      this.hass.localize,\n                      section\n                    )}\n                  ></ha-form>\n                </div>\n              </ha-card>`\n            )\n          : \"\"}\n        <ha-card>\n          <div class=\"card-actions\">\n            <mwc-button @click=${this._updateConfiguration}>\n              ${this.hass.localize(\n                \"ui.panel.config.zha.configuration_page.update_button\"\n              )}\n            </mwc-button>\n          </div>\n        </ha-card>\n\n        <a href=\"/config/zha/add\" slot=\"fab\">\n          <ha-fab\n            .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n            extended\n            ?rtl=${computeRTL(this.hass)}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _fetchConfiguration(): Promise<void> {\n    this._configuration = await fetchZHAConfiguration(this.hass!);\n  }\n\n  private async _fetchSettings(): Promise<void> {\n    this._networkSettings = await fetchZHANetworkSettings(this.hass!);\n  }\n\n  private async _createAndDownloadBackup(): Promise<void> {\n    let backup_and_metadata: ZHANetworkBackupAndMetadata;\n\n    this._generatingBackup = true;\n\n    try {\n      backup_and_metadata = await createZHANetworkBackup(this.hass!);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Failed to create backup\",\n        text: err.message,\n        warning: true,\n      });\n      return;\n    } finally {\n      this._generatingBackup = false;\n    }\n\n    if (!backup_and_metadata.is_complete) {\n      await showAlertDialog(this, {\n        title: \"Backup is incomplete\",\n        text: \"A backup has been created but it is incomplete and cannot be restored. This is a coordinator firmware limitation.\",\n      });\n    }\n\n    const backupJSON: string =\n      \"data:text/plain;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(backup_and_metadata.backup, null, 4));\n    const backupTime: Date = new Date(\n      Date.parse(backup_and_metadata.backup.backup_time)\n    );\n    let basename = `ZHA backup ${backupTime.toISOString().replace(/:/g, \"-\")}`;\n\n    if (!backup_and_metadata.is_complete) {\n      basename = `Incomplete ${basename}`;\n    }\n\n    fileDownload(backupJSON, `${basename}.json`);\n  }\n\n  private async _openOptionFlow() {\n    if (!this.configEntryId) {\n      return;\n    }\n\n    const configEntries: ConfigEntry[] = await getConfigEntries(this.hass, {\n      domain: \"zha\",\n    });\n\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === this.configEntryId\n    );\n\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  private _dataChanged(ev) {\n    this._configuration!.data[ev.currentTarget!.section] = ev.detail.value;\n  }\n\n  private async _updateConfiguration(): Promise<any> {\n    await updateZHAConfiguration(this.hass!, this._configuration!.data);\n  }\n\n  private _computeLabelCallback(localize, section: string) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(`component.zha.config_panel.${section}.${schema.name}`) ||\n      schema.name;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          margin: auto;\n          margin-top: 16px;\n          max-width: 500px;\n        }\n\n        .network-settings > div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n\n        .network-settings > .card-actions {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-config-dashboard\": ZHAConfigDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}