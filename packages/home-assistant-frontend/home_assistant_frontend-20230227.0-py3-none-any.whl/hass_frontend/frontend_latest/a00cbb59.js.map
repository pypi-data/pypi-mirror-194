{"version":3,"file":"a00cbb59.js","mappings":";;;AAkDA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;ACjGA;;;;AAQA;;AAIA;AACA;AACA;;;;;AAKA;;;;;AAOA;;AAIA;AACA;;;;;;;;AAUA;AACA;;AAEA;AACA;;;;;;;AAOA;;AAIA;AACA;AACA;;;;;AAKA;;AAIA;AACA;AACA;;;;;;;AAOA;;AAIA;AACA;AACA;;;;;AAKA;;;AAKA;AACA;AACA;AAGA;;;;;;;AAOA;;;;AAMA;;AAIA;;;;;;AAQA;AACA;AACA;;;;AAIA;;AAIA;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;;;;;AAOA;;;;;;AAQA;;AAIA;AACA;AACA;;;;;;AAMA;AACA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+OA","sources":["webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/onboarding/onboarding-core-config.ts"],"sourcesContent":["import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport { createCurrencyListEl } from \"../components/currency-datalist\";\nimport \"../components/map/ha-locations-editor\";\nimport type {\n  HaLocationsEditor,\n  MarkerLocation,\n} from \"../components/map/ha-locations-editor\";\nimport { createTimezoneListEl } from \"../components/timezone-datalist\";\nimport {\n  ConfigUpdateValues,\n  detectCoreConfig,\n  saveCoreConfig,\n} from \"../data/core\";\nimport { SYMBOL_TO_ISO } from \"../data/currency\";\nimport { onboardCoreConfigStep } from \"../data/onboarding\";\nimport type { PolymerChangedEvent } from \"../polymer-types\";\nimport type { HomeAssistant } from \"../types\";\nimport \"../components/ha-radio\";\nimport \"../components/ha-formfield\";\nimport type { HaRadio } from \"../components/ha-radio\";\nimport type { HaTextField } from \"../components/ha-textfield\";\nimport \"../components/ha-textfield\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport { createCountryListEl } from \"../components/country-datalist\";\nimport { createLanguageListEl } from \"../components/language-datalist\";\n\nconst amsterdam: [number, number] = [52.3731339, 4.8903147];\nconst mql = matchMedia(\"(prefers-color-scheme: dark)\");\nconst locationMarkerId = \"location\";\n\n@customElement(\"onboarding-core-config\")\nclass OnboardingCoreConfig extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public onboardingLocalize!: LocalizeFunc;\n\n  @state() private _working = false;\n\n  @state() private _name?: ConfigUpdateValues[\"location_name\"];\n\n  @state() private _location?: [number, number];\n\n  @state() private _elevation?: string;\n\n  @state() private _unitSystem?: ConfigUpdateValues[\"unit_system\"];\n\n  @state() private _currency?: ConfigUpdateValues[\"currency\"];\n\n  @state() private _timeZone?: string;\n\n  @state() private _language?: ConfigUpdateValues[\"language\"];\n\n  @state() private _country?: ConfigUpdateValues[\"country\"];\n\n  @query(\"ha-locations-editor\", true) private map!: HaLocationsEditor;\n\n  protected render(): TemplateResult {\n    return html`\n      <p>\n        ${this.onboardingLocalize(\n          \"ui.panel.page-onboarding.core-config.intro\",\n          \"name\",\n          this.hass.user!.name\n        )}\n      </p>\n\n      <ha-textfield\n        .label=${this.onboardingLocalize(\n          \"ui.panel.page-onboarding.core-config.location_name\"\n        )}\n        name=\"name\"\n        .disabled=${this._working}\n        .value=${this._nameValue}\n        @change=${this._handleChange}\n      ></ha-textfield>\n\n      <div class=\"middle-text\">\n        <p>\n          ${this.onboardingLocalize(\n            \"ui.panel.page-onboarding.core-config.intro_location\"\n          )}\n        </p>\n\n        <div class=\"row\">\n          <div>\n            ${this.onboardingLocalize(\n              \"ui.panel.page-onboarding.core-config.intro_location_detect\"\n            )}\n          </div>\n          <mwc-button @click=${this._detect}>\n            ${this.onboardingLocalize(\n              \"ui.panel.page-onboarding.core-config.button_detect\"\n            )}\n          </mwc-button>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <ha-locations-editor\n          class=\"flex\"\n          .hass=${this.hass}\n          .locations=${this._markerLocation(this._locationValue)}\n          zoom=\"14\"\n          .darkMode=${mql.matches}\n          @location-updated=${this._locationChanged}\n        ></ha-locations-editor>\n      </div>\n\n      <div class=\"row\">\n        <ha-textfield\n          class=\"flex\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.country\"\n          )}\n          name=\"country\"\n          .disabled=${this._working}\n          .value=${this._countryValue}\n          @change=${this._handleChange}\n        ></ha-textfield>\n\n        <ha-textfield\n          class=\"flex\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.language\"\n          )}\n          name=\"language\"\n          .disabled=${this._working}\n          .value=${this._languageValue}\n          @change=${this._handleChange}\n        ></ha-textfield>\n      </div>\n\n      <div class=\"row\">\n        <ha-textfield\n          class=\"flex\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.time_zone\"\n          )}\n          name=\"timeZone\"\n          .disabled=${this._working}\n          .value=${this._timeZoneValue}\n          @change=${this._handleChange}\n        ></ha-textfield>\n\n        <ha-textfield\n          class=\"flex\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.elevation\"\n          )}\n          name=\"elevation\"\n          type=\"number\"\n          .disabled=${this._working}\n          .value=${this._elevationValue}\n          .suffix=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.elevation_meters\"\n          )}\n          @change=${this._handleChange}\n        >\n        </ha-textfield>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"flex\">\n          ${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.unit_system\"\n          )}\n        </div>\n        <div class=\"radio-group\">\n          <ha-formfield\n            .label=${html`${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system_metric\"\n              )}\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.metric_example\"\n                )}\n              </div>`}\n          >\n            <ha-radio\n              name=\"unit_system\"\n              value=\"metric\"\n              .checked=${this._unitSystemValue === \"metric\"}\n              @change=${this._unitSystemChanged}\n              .disabled=${this._working}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${html`${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system_us_customary\"\n              )}\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.us_customary_example\"\n                )}\n              </div>`}\n          >\n            <ha-radio\n              name=\"unit_system\"\n              value=\"us_customary\"\n              .checked=${this._unitSystemValue === \"us_customary\"}\n              @change=${this._unitSystemChanged}\n              .disabled=${this._working}\n            ></ha-radio>\n          </ha-formfield>\n        </div>\n      </div>\n\n      <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.currency\"\n              )}<br />\n              <a\n                href=\"https://en.wikipedia.org/wiki/ISO_4217#Active_codes\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                >${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.find_currency_value\"\n                )}</a\n              >\n            </div>\n\n            <ha-textfield\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.currency\"\n              )}\n              name=\"currency\"\n              .disabled=${this._working}\n              .value=${this._currencyValue}\n              @change=${this._handleChange}\n            ></ha-textfield>\n          </div>\n        </div>\n\n      <div class=\"footer\">\n        <mwc-button @click=${this._save} .disabled=${this._working}>\n          ${this.onboardingLocalize(\n            \"ui.panel.page-onboarding.core-config.finish\"\n          )}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    setTimeout(\n      () => this.shadowRoot!.querySelector(\"ha-textfield\")!.focus(),\n      100\n    );\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._save(ev);\n      }\n    });\n    const tzInput = this.shadowRoot!.querySelector(\n      \"[name=timeZone]\"\n    ) as HaTextField;\n    tzInput.updateComplete.then(() => {\n      tzInput.shadowRoot!.appendChild(createTimezoneListEl());\n      tzInput.formElement.setAttribute(\"list\", \"timezones\");\n    });\n\n    const curInput = this.shadowRoot!.querySelector(\n      \"[name=currency]\"\n    ) as HaTextField;\n    curInput.updateComplete.then(() => {\n      curInput.shadowRoot!.appendChild(\n        createCurrencyListEl(this.hass.locale.language)\n      );\n      curInput.formElement.setAttribute(\"list\", \"currencies\");\n    });\n\n    const countryInput = this.shadowRoot!.querySelector(\n      \"[name=country]\"\n    ) as HaTextField;\n    countryInput.updateComplete.then(() => {\n      countryInput.shadowRoot!.appendChild(\n        createCountryListEl(this.hass.locale.language)\n      );\n      countryInput.formElement.setAttribute(\"list\", \"countries\");\n    });\n\n    const langInput = this.shadowRoot!.querySelector(\n      \"[name=language]\"\n    ) as HaTextField;\n    langInput.updateComplete.then(() => {\n      langInput.shadowRoot!.appendChild(createLanguageListEl(this.hass));\n      langInput.formElement.setAttribute(\"list\", \"languages\");\n    });\n  }\n\n  private get _nameValue() {\n    return this._name !== undefined\n      ? this._name\n      : this.onboardingLocalize(\n          \"ui.panel.page-onboarding.core-config.location_name_default\"\n        );\n  }\n\n  private get _locationValue() {\n    return this._location || amsterdam;\n  }\n\n  private get _elevationValue() {\n    return this._elevation !== undefined ? this._elevation : 0;\n  }\n\n  private get _timeZoneValue() {\n    return this._timeZone || \"\";\n  }\n\n  private get _languageValue() {\n    return this._language || \"\";\n  }\n\n  private get _countryValue() {\n    return this._country || \"\";\n  }\n\n  private get _unitSystemValue() {\n    return this._unitSystem !== undefined ? this._unitSystem : \"metric\";\n  }\n\n  private get _currencyValue() {\n    return this._currency !== undefined ? this._currency : \"\";\n  }\n\n  private _markerLocation = memoizeOne(\n    (location: [number, number]): MarkerLocation[] => [\n      {\n        id: locationMarkerId,\n        latitude: location[0],\n        longitude: location[1],\n        location_editable: true,\n      },\n    ]\n  );\n\n  private _handleChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as HaTextField;\n\n    let value = target.value;\n\n    if (target.name === \"currency\" && value) {\n      if (value in SYMBOL_TO_ISO) {\n        value = SYMBOL_TO_ISO[value];\n      }\n    }\n\n    this[`_${target.name}`] = value;\n  }\n\n  private _locationChanged(ev) {\n    this._location = ev.detail.location;\n  }\n\n  private _unitSystemChanged(ev: CustomEvent) {\n    this._unitSystem = (ev.target as HaRadio).value as\n      | \"metric\"\n      | \"us_customary\";\n  }\n\n  private async _detect() {\n    this._working = true;\n    try {\n      const values = await detectCoreConfig(this.hass);\n\n      if (values.latitude && values.longitude) {\n        this.map.addEventListener(\n          \"markers-updated\",\n          () => {\n            this.map.fitMarker(locationMarkerId);\n          },\n          {\n            once: true,\n          }\n        );\n        this._location = [Number(values.latitude), Number(values.longitude)];\n      }\n      if (values.elevation) {\n        this._elevation = String(values.elevation);\n      }\n      if (values.unit_system) {\n        this._unitSystem = values.unit_system;\n      }\n      if (values.time_zone) {\n        this._timeZone = values.time_zone;\n      }\n      if (values.currency) {\n        this._currency = values.currency;\n      }\n      if (values.country) {\n        this._country = values.country;\n      }\n      this._language = getLocalLanguage();\n    } catch (err: any) {\n      alert(`Failed to detect location information: ${err.message}`);\n    } finally {\n      this._working = false;\n    }\n  }\n\n  private async _save(ev) {\n    ev.preventDefault();\n    this._working = true;\n    try {\n      const location = this._locationValue;\n      await saveCoreConfig(this.hass, {\n        location_name: this._nameValue,\n        latitude: location[0],\n        longitude: location[1],\n        elevation: Number(this._elevationValue),\n        unit_system: this._unitSystemValue,\n        time_zone: this._timeZoneValue || \"UTC\",\n        currency: this._currencyValue || \"EUR\",\n        country: this._countryValue,\n        language: this._languageValue,\n      });\n      const result = await onboardCoreConfigStep(this.hass);\n      fireEvent(this, \"onboarding-step\", {\n        type: \"core_config\",\n        result,\n      });\n    } catch (err: any) {\n      this._working = false;\n      alert(`Failed to save: ${err.message}`);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .row {\n        display: flex;\n        flex-direction: row;\n        margin: 0 -8px;\n        align-items: center;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n\n      ha-textfield {\n        display: block;\n      }\n\n      ha-locations-editor {\n        height: 200px;\n      }\n\n      .flex {\n        flex: 1;\n      }\n\n      .middle-text {\n        margin: 16px 0;\n      }\n\n      .row {\n        margin-top: 16px;\n      }\n\n      .row > * {\n        margin: 0 8px;\n      }\n\n      .radio-group {\n        display: flex;\n        flex-direction: column;\n        flex: 1;\n      }\n\n      .footer {\n        margin-top: 16px;\n        text-align: right;\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"onboarding-core-config\": OnboardingCoreConfig;\n  }\n}\n"],"names":[],"sourceRoot":""}