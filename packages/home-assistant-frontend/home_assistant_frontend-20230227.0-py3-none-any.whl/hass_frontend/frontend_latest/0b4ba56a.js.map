{"version":3,"file":"0b4ba56a.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;ACtEA;AACA;AACA;;AAEA;;;;AAKA;;;AAGA;AACA;;;AAKA;;AAGA;;AAGA;;AAEA;AAEA;;;;AAKA;AAGA;AAIA;;AAEA;;AAIA;AAGA;AACA;;;AAMA;;;AAIA;;;AAKA;;;;;;;;;;;;;;;;;;AAqCA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/panels/config/storage/ha-config-section-storage.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { mdiDotsVertical } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-metric\";\nimport { fetchHassioHostInfo, HassioHostInfo } from \"../../../data/hassio/host\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport {\n  getValueInPercentage,\n  roundWithOneDecimal,\n} from \"../../../util/calculate\";\nimport \"../core/ha-config-analytics\";\nimport { showMoveDatadiskDialog } from \"./show-dialog-move-datadisk\";\n\n@customElement(\"ha-config-section-storage\")\nclass HaConfigSectionStorage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _error?: { code: string; message: string };\n\n  @state() private _hostInfo?: HassioHostInfo;\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      this._load();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.storage.caption\")}\n      >\n        ${this._hostInfo\n          ? html`\n              <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n                <ha-icon-button\n                  slot=\"trigger\"\n                  .label=${this.hass.localize(\"ui.common.menu\")}\n                  .path=${mdiDotsVertical}\n                ></ha-icon-button>\n                <mwc-list-item @click=${this._moveDatadisk}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.storage.datadisk.title\"\n                  )}\n                </mwc-list-item>\n              </ha-button-menu>\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${this._error\n            ? html`\n                <ha-alert alert-type=\"error\"\n                  >${this._error.message || this._error.code}</ha-alert\n                >\n              `\n            : \"\"}\n          ${this._hostInfo\n            ? html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    <ha-metric\n                      .heading=${this.hass.localize(\n                        \"ui.panel.config.storage.used_space\"\n                      )}\n                      .value=${this._getUsedSpace(\n                        this._hostInfo?.disk_used,\n                        this._hostInfo?.disk_total\n                      )}\n                      .tooltip=${`${this._hostInfo.disk_used} GB/${this._hostInfo.disk_total} GB`}\n                    ></ha-metric>\n                    ${this._hostInfo.disk_life_time !== \"\" &&\n                    this._hostInfo.disk_life_time >= 10\n                      ? html`\n                          <ha-metric\n                            .heading=${this.hass.localize(\n                              \"ui.panel.config.storage.emmc_lifetime_used\"\n                            )}\n                            .value=${this._hostInfo.disk_life_time}\n                            .tooltip=${`${\n                              this._hostInfo.disk_life_time - 10\n                            } % -\n                          ${this._hostInfo.disk_life_time} %`}\n                            class=\"emmc\"\n                          ></ha-metric>\n                        `\n                      : \"\"}\n                  </div>\n                </ha-card>\n              `\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _load() {\n    try {\n      this._hostInfo = await fetchHassioHostInfo(this.hass);\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _moveDatadisk(): void {\n    showMoveDatadiskDialog(this, {\n      hostInfo: this._hostInfo!,\n    });\n  }\n\n  private _getUsedSpace = (used: number, total: number) =>\n    roundWithOneDecimal(getValueInPercentage(used, 0, total));\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    ha-card {\n      max-width: 600px;\n      margin: 0 auto;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n    }\n    .card-content {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-storage\": HaConfigSectionStorage;\n  }\n}\n"],"names":[],"sourceRoot":""}