{"version":3,"file":"c746db16.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;;;;;;;;;;;;;;;;;ACnHA;;;;;;;;;;;AAkBA;;ACIA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;;AClEA;AACA;;;;;;AAMA;;;;;AAKA;AA1GA;;;AA8GA;;;;;;AAMA;AApHA;;;;;;;AA4HA;AAEA;AACA;;;AAIA;;;AAIA;AAGA;AACA;;AAEA;;;;;;AAOA;AACA;AACA;;;;;AAKA;;;AA3JA;AAgKA;AACA;;;AAKA;AAGA;;;;;AAMA;;;AA/KA;AAoLA;AACA;;;AAKA;;;AAIA;;AAGA;;;;AAIA;;AAEA;;;AA9GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8dA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/dialogs/voice-command-dialog/ha-voice-command-dialog.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n        .mdc-top-app-bar__section.mdc-top-app-bar__section--align-start {\n          flex: 1;\n        }\n        .mdc-top-app-bar__section.mdc-top-app-bar__section--align-end {\n          flex: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","/* eslint-disable lit/prefer-static-styles */\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiClose,\n  mdiHelpCircleOutline,\n  mdiMicrophone,\n  mdiSend,\n} from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { SpeechRecognition } from \"../../common/dom/speech-recognition\";\nimport \"../../components/ha-dialog\";\nimport type { HaDialog } from \"../../components/ha-dialog\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-textfield\";\nimport type { HaTextField } from \"../../components/ha-textfield\";\nimport {\n  AgentInfo,\n  getAgentInfo,\n  prepareConversation,\n  processConversationInput,\n} from \"../../data/conversation\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\n\ninterface Message {\n  who: string;\n  text?: string;\n  error?: boolean;\n}\n\ninterface Results {\n  transcript: string;\n  final: boolean;\n}\n\n@customElement(\"ha-voice-command-dialog\")\nexport class HaVoiceCommandDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public results: Results | null = null;\n\n  @state() private _conversation: Message[] = [\n    {\n      who: \"hass\",\n      text: \"\",\n    },\n  ];\n\n  @state() private _opened = false;\n\n  @state() private _agentInfo?: AgentInfo;\n\n  @state() private _showSendButton = false;\n\n  @query(\"#scroll-container\") private _scrollContainer!: HaDialog;\n\n  @query(\"#message-input\") private _messageInput!: HaTextField;\n\n  private recognition!: SpeechRecognition;\n\n  private _conversationId: string | null = null;\n\n  public async showDialog(): Promise<void> {\n    this._opened = true;\n    this._agentInfo = await getAgentInfo(this.hass);\n    this._scrollMessagesBottom();\n  }\n\n  public async closeDialog(): Promise<void> {\n    this._opened = false;\n    if (this.recognition) {\n      this.recognition.abort();\n    }\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\"ui.dialogs.voice_command.title\")}\n        flexContent\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\">\n              ${this.hass.localize(\"ui.dialogs.voice_command.title\")}\n            </span>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              dialogAction=\"cancel\"\n              .label=${this.hass.localize(\"ui.common.close\")}\n              .path=${mdiClose}\n            ></ha-icon-button>\n            <a\n              href=${documentationUrl(this.hass, \"/docs/assist/\")}\n              slot=\"actionItems\"\n              target=\"_blank\"\n              rel=\"noopener noreferer\"\n            >\n              <ha-icon-button\n                .label=${this.hass.localize(\"ui.common.help\")}\n                .path=${mdiHelpCircleOutline}\n              ></ha-icon-button>\n            </a>\n          </ha-header-bar>\n        </div>\n        <div class=\"messages\">\n          <div class=\"messages-container\" id=\"scroll-container\">\n            ${this._conversation.map(\n              (message) => html`\n                <div class=${this._computeMessageClasses(message)}>\n                  ${message.text}\n                </div>\n              `\n            )}\n            ${this.results\n              ? html`\n                  <div class=\"message user\">\n                    <span\n                      class=${classMap({\n                        interimTranscript: !this.results.final,\n                      })}\n                      >${this.results.transcript}</span\n                    >${!this.results.final ? \"…\" : \"\"}\n                  </div>\n                `\n              : \"\"}\n          </div>\n        </div>\n        <div class=\"input\" slot=\"primaryAction\">\n          <ha-textfield\n            id=\"message-input\"\n            @keyup=${this._handleKeyUp}\n            @input=${this._handleInput}\n            .label=${this.hass.localize(`ui.dialogs.voice_command.input_label`)}\n            dialogInitialFocus\n            iconTrailing\n          >\n            <span slot=\"trailingIcon\">\n              ${this._showSendButton\n                ? html`\n                    <ha-icon-button\n                      class=\"listening-icon\"\n                      .path=${mdiSend}\n                      @click=${this._handleSendMessage}\n                      .label=${this.hass.localize(\n                        \"ui.dialogs.voice_command.send_text\"\n                      )}\n                    >\n                    </ha-icon-button>\n                  `\n                : SpeechRecognition\n                ? html`\n                    ${this.results\n                      ? html`\n                          <div class=\"bouncer\">\n                            <div class=\"double-bounce1\"></div>\n                            <div class=\"double-bounce2\"></div>\n                          </div>\n                        `\n                      : \"\"}\n                    <ha-icon-button\n                      class=\"listening-icon\"\n                      .path=${mdiMicrophone}\n                      @click=${this._toggleListening}\n                      .label=${this.hass.localize(\n                        \"ui.dialogs.voice_command.start_listening\"\n                      )}\n                    >\n                    </ha-icon-button>\n                  `\n                : \"\"}\n            </span>\n          </ha-textfield>\n          ${this._agentInfo && this._agentInfo.attribution\n            ? html`\n                <a\n                  href=${this._agentInfo.attribution.url}\n                  class=\"attribution\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  >${this._agentInfo.attribution.name}</a\n                >\n              `\n            : \"\"}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    this._conversation = [\n      {\n        who: \"hass\",\n        text: this.hass.localize(\"ui.dialogs.voice_command.how_can_i_help\"),\n      },\n    ];\n    prepareConversation(this.hass, this.hass.language);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"_conversation\") || changedProps.has(\"results\")) {\n      this._scrollMessagesBottom();\n    }\n  }\n\n  private _addMessage(message: Message) {\n    this._conversation = [...this._conversation, message];\n  }\n\n  private _handleKeyUp(ev: KeyboardEvent) {\n    const input = ev.target as HaTextField;\n    if (ev.keyCode === 13 && input.value) {\n      this._processText(input.value);\n      input.value = \"\";\n      this._showSendButton = false;\n    }\n  }\n\n  private _handleInput(ev: InputEvent) {\n    const value = (ev.target as HaTextField).value;\n    if (value && !this._showSendButton) {\n      this._showSendButton = true;\n    } else if (!value && this._showSendButton) {\n      this._showSendButton = false;\n    }\n  }\n\n  private _handleSendMessage() {\n    if (this._messageInput.value) {\n      this._processText(this._messageInput.value);\n      this._messageInput.value = \"\";\n      this._showSendButton = false;\n    }\n  }\n\n  private _initRecognition() {\n    this.recognition = new SpeechRecognition();\n    this.recognition.interimResults = true;\n    this.recognition.lang = this.hass.language;\n    this.recognition.continuous = false;\n\n    this.recognition.addEventListener(\"start\", () => {\n      this.results = {\n        final: false,\n        transcript: \"\",\n      };\n    });\n    this.recognition.addEventListener(\"nomatch\", () => {\n      this._addMessage({\n        who: \"user\",\n        text: `<${this.hass.localize(\n          \"ui.dialogs.voice_command.did_not_understand\"\n        )}>`,\n        error: true,\n      });\n    });\n    this.recognition.addEventListener(\"error\", (event) => {\n      // eslint-disable-next-line\n      console.error(\"Error recognizing text\", event);\n      this.recognition!.abort();\n      // @ts-ignore\n      if (event.error !== \"aborted\" && event.error !== \"no-speech\") {\n        const text =\n          this.results && this.results.transcript\n            ? this.results.transcript\n            : `<${this.hass.localize(\n                \"ui.dialogs.voice_command.did_not_hear\"\n              )}>`;\n        this._addMessage({ who: \"user\", text, error: true });\n      }\n      this.results = null;\n    });\n    this.recognition.addEventListener(\"end\", () => {\n      // Already handled by onerror\n      if (this.results == null) {\n        return;\n      }\n      const text = this.results.transcript;\n      this.results = null;\n      if (text) {\n        this._processText(text);\n      } else {\n        this._addMessage({\n          who: \"user\",\n          text: `<${this.hass.localize(\n            \"ui.dialogs.voice_command.did_not_hear\"\n          )}>`,\n          error: true,\n        });\n      }\n    });\n    this.recognition.addEventListener(\"result\", (event) => {\n      const result = event.results[0];\n      this.results = {\n        transcript: result[0].transcript,\n        final: result.isFinal,\n      };\n    });\n  }\n\n  private async _processText(text: string) {\n    if (this.recognition) {\n      this.recognition.abort();\n    }\n    this._addMessage({ who: \"user\", text });\n    const message: Message = {\n      who: \"hass\",\n      text: \"…\",\n    };\n    // To make sure the answer is placed at the right user text, we add it before we process it\n    this._addMessage(message);\n    try {\n      const response = await processConversationInput(\n        this.hass,\n        text,\n        this._conversationId,\n        this.hass.language\n      );\n      this._conversationId = response.conversation_id;\n      const plain = response.response.speech?.plain;\n      if (plain) {\n        message.text = plain.speech;\n      } else {\n        message.text = \"<silence>\";\n      }\n\n      this.requestUpdate(\"_conversation\");\n    } catch {\n      message.text = this.hass.localize(\"ui.dialogs.voice_command.error\");\n      message.error = true;\n      this.requestUpdate(\"_conversation\");\n    }\n  }\n\n  private _toggleListening() {\n    if (!this.results) {\n      this._startListening();\n    } else {\n      this._stopListening();\n    }\n  }\n\n  private _stopListening() {\n    if (this.recognition) {\n      this.recognition.stop();\n    }\n  }\n\n  private _startListening() {\n    if (!this.recognition) {\n      this._initRecognition();\n    }\n\n    if (this.results) {\n      return;\n    }\n\n    this.results = {\n      transcript: \"\",\n      final: false,\n    };\n    this.recognition!.start();\n  }\n\n  private _scrollMessagesBottom() {\n    this._scrollContainer.scrollTo(0, 99999);\n  }\n\n  private _computeMessageClasses(message: Message) {\n    return `message ${message.who} ${message.error ? \" error\" : \"\"}`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-icon-button.listening-icon {\n          color: var(--secondary-text-color);\n          margin-right: -24px;\n          margin-inline-end: -24px;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n\n        ha-icon-button.listening-icon[active] {\n          color: var(--primary-color);\n        }\n\n        ha-dialog {\n          --primary-action-button-flex: 1;\n          --secondary-action-button-flex: 0;\n          --mdc-dialog-max-width: 450px;\n          --mdc-dialog-max-height: 500px;\n          --dialog-content-padding: 0;\n        }\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n        }\n        ha-header-bar a {\n          color: var(--primary-text-color);\n        }\n\n        ha-textfield {\n          display: block;\n          overflow: hidden;\n        }\n        a.button {\n          text-decoration: none;\n        }\n        a.button > mwc-button {\n          width: 100%;\n        }\n        .side-by-side {\n          display: flex;\n          margin: 8px 0;\n        }\n        .side-by-side > * {\n          flex: 1 0;\n          padding: 4px;\n        }\n        .attribution {\n          color: var(--secondary-text-color);\n        }\n        .messages {\n          display: block;\n          height: 300px;\n          box-sizing: border-box;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .messages {\n            height: 100%;\n          }\n        }\n        .messages-container {\n          position: absolute;\n          bottom: 0px;\n          right: 0px;\n          left: 0px;\n          padding: 24px;\n          box-sizing: border-box;\n          overflow-y: auto;\n          max-height: 100%;\n        }\n        .message {\n          font-size: 18px;\n          clear: both;\n          margin: 8px 0;\n          padding: 8px;\n          border-radius: 15px;\n        }\n\n        .message.user {\n          margin-left: 24px;\n          margin-inline-start: 24px;\n          margin-inline-end: initial;\n          float: var(--float-end);\n          text-align: right;\n          border-bottom-right-radius: 0px;\n          background-color: var(--light-primary-color);\n          color: var(--text-light-primary-color, var(--primary-text-color));\n          direction: var(--direction);\n        }\n\n        .message.hass {\n          margin-right: 24px;\n          margin-inline-end: 24px;\n          margin-inline-start: initial;\n          float: var(--float-start);\n          border-bottom-left-radius: 0px;\n          background-color: var(--primary-color);\n          color: var(--text-primary-color);\n          direction: var(--direction);\n        }\n\n        .message a {\n          color: var(--text-primary-color);\n        }\n\n        .message img {\n          width: 100%;\n          border-radius: 10px;\n        }\n\n        .message.error {\n          background-color: var(--error-color);\n          color: var(--text-primary-color);\n        }\n\n        .input {\n          margin-left: 0;\n          margin-right: 0;\n        }\n\n        .interimTranscript {\n          color: var(--secondary-text-color);\n        }\n\n        .bouncer {\n          width: 48px;\n          height: 48px;\n          position: absolute;\n        }\n        .double-bounce1,\n        .double-bounce2 {\n          width: 48px;\n          height: 48px;\n          border-radius: 50%;\n          background-color: var(--primary-color);\n          opacity: 0.2;\n          position: absolute;\n          top: 0;\n          left: 0;\n          -webkit-animation: sk-bounce 2s infinite ease-in-out;\n          animation: sk-bounce 2s infinite ease-in-out;\n        }\n        .double-bounce2 {\n          -webkit-animation-delay: -1s;\n          animation-delay: -1s;\n        }\n        @-webkit-keyframes sk-bounce {\n          0%,\n          100% {\n            -webkit-transform: scale(0);\n          }\n          50% {\n            -webkit-transform: scale(1);\n          }\n        }\n        @keyframes sk-bounce {\n          0%,\n          100% {\n            transform: scale(0);\n            -webkit-transform: scale(0);\n          }\n          50% {\n            transform: scale(1);\n            -webkit-transform: scale(1);\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .message {\n            font-size: 16px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-voice-command-dialog\": HaVoiceCommandDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}