{"version":3,"file":"451b6af2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;;;;;;;;;;;AC0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAIA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuDA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/panels/mailbox/ha-panel-mailbox.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { formatDateTime } from \"../../common/datetime/format_date_time\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-tabs\";\nimport \"../../layouts/ha-app-layout\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport \"../../styles/polymer-ha-style\";\n\nlet registeredDialog = false;\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMailbox extends EventsMixin(LocalizeMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style include=\"ha-style\">\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 16px;\n          max-width: 600px;\n          margin: 0 auto;\n        }\n\n        ha-card {\n          overflow: hidden;\n        }\n\n        paper-item {\n          cursor: pointer;\n        }\n\n        ha-tabs {\n          margin-left: max(env(safe-area-inset-left), 24px);\n          margin-right: max(env(safe-area-inset-right), 24px);\n          --paper-tabs-selection-bar-color: #fff;\n          text-transform: uppercase;\n        }\n\n        .empty {\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n\n        .header {\n          @apply --paper-font-title;\n        }\n\n        .row {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        @media all and (max-width: 450px) {\n          .content {\n            width: auto;\n            padding: 0;\n          }\n        }\n\n        .tip {\n          color: var(--secondary-text-color);\n          font-size: 14px;\n        }\n        .date {\n          color: var(--primary-text-color);\n        }\n      </style>\n\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              hass=\"[[hass]]\"\n              narrow=\"[[narrow]]\"\n            ></ha-menu-button>\n            <div main-title>[[localize('panel.mailbox')]]</div>\n          </app-toolbar>\n          <div sticky hidden$=\"[[areTabsHidden(platforms)]]\">\n            <ha-tabs\n              scrollable\n              selected=\"[[_currentPlatform]]\"\n              on-iron-activate=\"handlePlatformSelected\"\n            >\n              <template is=\"dom-repeat\" items=\"[[platforms]]\">\n                <paper-tab data-entity=\"[[item]]\">\n                  [[getPlatformName(item)]]\n                </paper-tab>\n              </template>\n            </ha-tabs>\n          </div>\n        </app-header>\n        <div class=\"content\">\n          <ha-card>\n            <template is=\"dom-if\" if=\"[[!_messages.length]]\">\n              <div class=\"card-content empty\">\n                [[localize('ui.panel.mailbox.empty')]]\n              </div>\n            </template>\n            <template is=\"dom-repeat\" items=\"[[_messages]]\">\n              <paper-item on-click=\"openMP3Dialog\">\n                <paper-item-body style=\"width:100%\" two-line>\n                  <div class=\"row\">\n                    <div>[[item.caller]]</div>\n                    <div class=\"tip\">\n                      [[localize('ui.duration.second', 'count', item.duration)]]\n                    </div>\n                  </div>\n                  <div secondary>\n                    <span class=\"date\">[[item.timestamp]]</span> -\n                    [[item.message]]\n                  </div>\n                </paper-item-body>\n              </paper-item>\n            </template>\n          </ha-card>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      narrow: Boolean,\n\n      platforms: {\n        type: Array,\n      },\n\n      _messages: {\n        type: Array,\n      },\n\n      _currentPlatform: {\n        type: Number,\n        value: 0,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!registeredDialog) {\n      registeredDialog = true;\n      this.fire(\"register-dialog\", {\n        dialogShowEvent: \"show-audio-message-dialog\",\n        dialogTag: \"ha-dialog-show-audio-message\",\n        dialogImport: () => import(\"./ha-dialog-show-audio-message\"),\n      });\n    }\n    this.hassChanged = this.hassChanged.bind(this);\n    this.hass.connection\n      .subscribeEvents(this.hassChanged, \"mailbox_updated\")\n      .then((unsub) => {\n        this._unsubEvents = unsub;\n      });\n    this.computePlatforms().then((platforms) => {\n      this.platforms = platforms;\n      this.hassChanged();\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubEvents) this._unsubEvents();\n  }\n\n  hassChanged() {\n    if (!this._messages) {\n      this._messages = [];\n    }\n    this.getMessages().then((items) => {\n      this._messages = items;\n    });\n  }\n\n  openMP3Dialog(event) {\n    this.fire(\"show-audio-message-dialog\", {\n      hass: this.hass,\n      message: event.model.item,\n    });\n  }\n\n  getMessages() {\n    const platform = this.platforms[this._currentPlatform];\n    return this.hass\n      .callApi(\"GET\", `mailbox/messages/${platform.name}`)\n      .then((values) => {\n        const platformItems = [];\n        const arrayLength = values.length;\n        for (let i = 0; i < arrayLength; i++) {\n          const datetime = formatDateTime(\n            new Date(values[i].info.origtime * 1000),\n            this.hass.locale\n          );\n          platformItems.push({\n            timestamp: datetime,\n            caller: values[i].info.callerid,\n            message: values[i].text,\n            sha: values[i].sha,\n            duration: values[i].info.duration,\n            platform: platform,\n          });\n        }\n        return platformItems.sort(\n          (a, b) => new Date(b.timestamp) - new Date(a.timestamp)\n        );\n      });\n  }\n\n  computePlatforms() {\n    return this.hass.callApi(\"GET\", \"mailbox/platforms\");\n  }\n\n  handlePlatformSelected(ev) {\n    const newPlatform = ev.detail.selected;\n    if (newPlatform !== this._currentPlatform) {\n      this._currentPlatform = newPlatform;\n      this.hassChanged();\n    }\n  }\n\n  areTabsHidden(platforms) {\n    return !platforms || platforms.length < 2;\n  }\n\n  getPlatformName(item) {\n    const entity = `mailbox.${item.name}`;\n    const stateObj = this.hass.states[entity.toLowerCase()];\n    return stateObj.attributes.friendly_name;\n  }\n}\n\ncustomElements.define(\"ha-panel-mailbox\", HaPanelMailbox);\n"],"names":[],"sourceRoot":""}