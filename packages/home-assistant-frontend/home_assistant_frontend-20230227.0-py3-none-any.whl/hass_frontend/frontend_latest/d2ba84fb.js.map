{"version":3,"file":"d2ba84fb.js","mappings":";;AA6EA;AACA;AASA;AACA;;AAVA;;AAkBA;AACA;;;;;;AAMA;AACA;;AAGA;;;AAGA;AACA;;AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;AC9CA;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;;;;AAMA;;;AAKA;;;;AAYA;;;;;AAOA;AACA;AAMA;;;;AAIA;;;;;AAOA;AACA;AAMA;;;;AAIA;;;;;AAOA;AACA;AAMA;;;;;AAKA;;AAGA;;AAIA;;AAIA;;AAIA;;;AAIA;;AAIA;AACA;;AAEA;;;AAUA;;AArSA;;;;AA6SA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA","sources":["webpack://home-assistant-frontend/./src/panels/config/entities/editor-tabs/settings/entity-settings-helper-tab.ts","webpack://home-assistant-frontend/./src/panels/config/entities/entity-registry-basic-editor.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { dynamicElement } from \"../../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport {\n  ExtEntityRegistryEntry,\n  removeEntityRegistryEntry,\n} from \"../../../../../data/entity_registry\";\nimport { HELPERS_CRUD } from \"../../../../../data/helpers_crud\";\nimport { showConfirmationDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport type { Helper } from \"../../../helpers/const\";\nimport \"../../../helpers/forms/ha-counter-form\";\nimport \"../../../helpers/forms/ha-input_boolean-form\";\nimport \"../../../helpers/forms/ha-input_button-form\";\nimport \"../../../helpers/forms/ha-input_datetime-form\";\nimport \"../../../helpers/forms/ha-input_number-form\";\nimport \"../../../helpers/forms/ha-input_select-form\";\nimport \"../../../helpers/forms/ha-input_text-form\";\nimport \"../../../helpers/forms/ha-schedule-form\";\nimport \"../../../helpers/forms/ha-timer-form\";\nimport \"../../entity-registry-basic-editor\";\nimport type { HaEntityRegistryBasicEditor } from \"../../entity-registry-basic-editor\";\n\n@customElement(\"entity-settings-helper-tab\")\nexport class EntityRegistrySettingsHelper extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entry!: ExtEntityRegistryEntry;\n\n  @state() private _error?: string;\n\n  @state() private _item?: Helper | null;\n\n  @state() private _submitting?: boolean;\n\n  @state() private _componentLoaded?: boolean;\n\n  @query(\"ha-registry-basic-editor\")\n  private _registryEditor?: HaEntityRegistryBasicEditor;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._componentLoaded = isComponentLoaded(this.hass, this.entry.platform);\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"entry\")) {\n      this._error = undefined;\n      if (\n        this.entry.unique_id !==\n        (changedProperties.get(\"entry\") as ExtEntityRegistryEntry)?.unique_id\n      ) {\n        this._item = undefined;\n      }\n\n      this._getItem();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._item === undefined) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this.entry.entity_id];\n    return html`\n      <div class=\"form\">\n        ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n        ${!this._componentLoaded\n          ? this.hass.localize(\n              \"ui.dialogs.helper_settings.platform_not_loaded\",\n              \"platform\",\n              this.entry.platform\n            )\n          : this._item === null\n          ? this.hass.localize(\"ui.dialogs.helper_settings.yaml_not_editable\")\n          : html`\n              <span @value-changed=${this._valueChanged}>\n                ${dynamicElement(`ha-${this.entry.platform}-form`, {\n                  hass: this.hass,\n                  item: this._item,\n                  entry: this.entry,\n                })}\n              </span>\n            `}\n        <ha-registry-basic-editor\n          .hass=${this.hass}\n          .entry=${this.entry}\n        ></ha-registry-basic-editor>\n      </div>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=${this._confirmDeleteItem}\n          .disabled=${this._submitting ||\n          (!this._item && !stateObj?.attributes.restored)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._updateItem}\n          .disabled=${this._submitting || (this._item && !this._item.name)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._error = undefined;\n    this._item = ev.detail.value;\n  }\n\n  private async _getItem() {\n    const items = await HELPERS_CRUD[this.entry.platform].fetch(this.hass!);\n    this._item = items.find((item) => item.id === this.entry.unique_id) || null;\n  }\n\n  private async _updateItem(): Promise<void> {\n    this._submitting = true;\n    try {\n      if (this._componentLoaded && this._item) {\n        await HELPERS_CRUD[this.entry.platform].update(\n          this.hass!,\n          this._item.id,\n          this._item\n        );\n      }\n      await this._registryEditor?.updateEntry();\n      fireEvent(this, \"close-dialog\");\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _confirmDeleteItem(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      if (this._componentLoaded && this._item) {\n        await HELPERS_CRUD[this.entry.platform].delete(\n          this.hass!,\n          this._item.id\n        );\n      } else {\n        const stateObj = this.hass.states[this.entry.entity_id];\n        if (!stateObj?.attributes.restored) {\n          return;\n        }\n        await removeEntityRegistryEntry(this.hass!, this.entry.entity_id);\n      }\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          padding: 0 !important;\n        }\n        .form {\n          padding: 20px 24px;\n        }\n        .buttons {\n          box-sizing: border-box;\n          display: flex;\n          justify-content: space-between;\n          padding: 0 24px 24px 24px;\n          background-color: var(--mdc-theme-surface, #fff);\n        }\n        .error {\n          color: var(--error-color);\n          margin-bottom: 8px;\n        }\n        .row {\n          margin-top: 8px;\n          color: var(--primary-text-color);\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-platform-helper-tab\": EntityRegistrySettingsHelper;\n  }\n}\n","import \"@material/mwc-formfield/mwc-formfield\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiPencil } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-radio\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-textfield\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  EntityRegistryEntryUpdateParams,\n  ExtEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { showAliasesDialog } from \"../../../dialogs/aliases/show-dialog-aliases\";\n\n@customElement(\"ha-registry-basic-editor\")\nexport class HaEntityRegistryBasicEditor extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public entry!: ExtEntityRegistryEntry;\n\n  @state() private _origEntityId!: string;\n\n  @state() private _entityId!: string;\n\n  @state() private _areaId?: string | null;\n\n  @state() private _disabledBy!: EntityRegistryEntry[\"disabled_by\"];\n\n  @state() private _hiddenBy!: string | null;\n\n  private _deviceLookup?: Record<string, DeviceRegistryEntry>;\n\n  @state() private _device?: DeviceRegistryEntry;\n\n  @state() private _submitting = false;\n\n  private _handleAliasesClicked(ev: CustomEvent) {\n    if (ev.detail.index !== 0) return;\n    const stateObj = this.hass.states[this.entry.entity_id];\n    const name =\n      (stateObj && computeStateName(stateObj)) || this.entry.entity_id;\n\n    showAliasesDialog(this, {\n      name,\n      aliases: this.entry!.aliases,\n      updateAliases: async (aliases: string[]) => {\n        const result = await updateEntityRegistryEntry(\n          this.hass,\n          this.entry.entity_id,\n          { aliases }\n        );\n        fireEvent(this, \"entity-entry-updated\", result.entity_entry);\n      },\n    });\n  }\n\n  public async updateEntry(): Promise<void> {\n    this._submitting = true;\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      new_entity_id: this._entityId.trim(),\n      area_id: this._areaId || null,\n    };\n    if (\n      this.entry.disabled_by !== this._disabledBy &&\n      (this._disabledBy === null || this._disabledBy === \"user\")\n    ) {\n      params.disabled_by = this._disabledBy;\n    }\n    if (\n      this.entry.hidden_by !== this._hiddenBy &&\n      (this._hiddenBy === null || this._hiddenBy === \"user\")\n    ) {\n      params.hidden_by = this._hiddenBy;\n    }\n    try {\n      const result = await updateEntityRegistryEntry(\n        this.hass!,\n        this._origEntityId,\n        params\n      );\n      if (result.require_restart) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_restart_confirm\"\n          ),\n        });\n      }\n      if (result.reload_delay) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_delay_confirm\",\n            \"delay\",\n            result.reload_delay\n          ),\n        });\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._deviceLookup = {};\n        for (const device of devices) {\n          this._deviceLookup[device.id] = device;\n        }\n        if (!this._device && this.entry.device_id) {\n          this._device = this._deviceLookup[this.entry.device_id];\n        }\n      }),\n    ];\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (!changedProperties.has(\"entry\")) {\n      return;\n    }\n    if (this.entry) {\n      this._origEntityId = this.entry.entity_id;\n      this._entityId = this.entry.entity_id;\n      this._disabledBy = this.entry.disabled_by;\n      this._hiddenBy = this.entry.hidden_by;\n      this._areaId = this.entry.area_id;\n      this._device =\n        this.entry.device_id && this._deviceLookup\n          ? this._deviceLookup[this.entry.device_id]\n          : undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.entry ||\n      this.entry.entity_id !== this._origEntityId\n    ) {\n      return html``;\n    }\n    const invalidDomainUpdate =\n      computeDomain(this._entityId.trim()) !==\n      computeDomain(this.entry.entity_id);\n\n    return html`\n      <ha-textfield\n        error-message=\"Domain needs to stay the same\"\n        .value=${this._entityId}\n        .label=${this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.entity_id\"\n        )}\n        .invalid=${invalidDomainUpdate}\n        .disabled=${this._submitting}\n        @input=${this._entityIdChanged}\n      ></ha-textfield>\n      <ha-area-picker\n        .hass=${this.hass}\n        .value=${this._areaId || undefined}\n        .placeholder=${this._device?.area_id || undefined}\n        @value-changed=${this._areaPicked}\n      ></ha-area-picker>\n\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.advanced\"\n        )}\n        outlined\n      >\n        <div class=\"label\">\n          ${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.entity_status\"\n          )}:\n        </div>\n        <div class=\"secondary\">\n          ${this._disabledBy && this._disabledBy !== \"user\"\n            ? this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                \"cause\",\n                this.hass.localize(\n                  `config_entry.disabled_by.${this._disabledBy}`\n                )\n              )\n            : \"\"}\n        </div>\n        <div class=\"row\">\n          <mwc-formfield\n            .label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.enabled_label\"\n            )}\n          >\n            <ha-radio\n              name=\"hiddendisabled\"\n              value=\"enabled\"\n              .checked=${!this._hiddenBy && !this._disabledBy}\n              .disabled=${!!this._device?.disabled_by ||\n              (this._disabledBy !== null &&\n                !(\n                  this._disabledBy === \"user\" ||\n                  this._disabledBy === \"integration\"\n                ))}\n              @change=${this._viewStatusChanged}\n            ></ha-radio>\n          </mwc-formfield>\n          <mwc-formfield\n            .label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.hidden_label\"\n            )}\n          >\n            <ha-radio\n              name=\"hiddendisabled\"\n              value=\"hidden\"\n              .checked=${this._hiddenBy !== null}\n              .disabled=${!!this._device?.disabled_by ||\n              (this._disabledBy !== null &&\n                !(\n                  this._disabledBy === \"user\" ||\n                  this._disabledBy === \"integration\"\n                ))}\n              @change=${this._viewStatusChanged}\n            ></ha-radio>\n          </mwc-formfield>\n          <mwc-formfield\n            .label=${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.disabled_label\"\n            )}\n          >\n            <ha-radio\n              name=\"hiddendisabled\"\n              value=\"disabled\"\n              .checked=${this._disabledBy !== null}\n              .disabled=${!!this._device?.disabled_by ||\n              (this._disabledBy !== null &&\n                !(\n                  this._disabledBy === \"user\" ||\n                  this._disabledBy === \"integration\"\n                ))}\n              @change=${this._viewStatusChanged}\n            ></ha-radio>\n          </mwc-formfield>\n        </div>\n\n        ${this._disabledBy !== null\n          ? html`\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.enabled_description\"\n                )}\n              </div>\n            `\n          : this._hiddenBy !== null\n          ? html`\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.hidden_description\"\n                )}\n              </div>\n            `\n          : \"\"}\n\n        <div class=\"label\">\n          ${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.aliases_section\"\n          )}\n        </div>\n        <mwc-list class=\"aliases\" @action=${this._handleAliasesClicked}>\n          <mwc-list-item .twoline=${this.entry.aliases.length > 0} hasMeta>\n            <span>\n              ${this.entry.aliases.length > 0\n                ? this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.configured_aliases\",\n                    { count: this.entry.aliases.length }\n                  )\n                : this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.no_aliases\"\n                  )}\n            </span>\n            <span slot=\"secondary\">\n              ${[...this.entry.aliases]\n                .sort((a, b) => stringCompare(a, b, this.hass.locale.language))\n                .join(\", \")}\n            </span>\n            <ha-svg-icon slot=\"meta\" .path=${mdiPencil}></ha-svg-icon>\n          </mwc-list-item>\n        </mwc-list>\n        <div class=\"secondary\">\n          ${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.aliases_description\"\n          )}\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  private _areaPicked(ev: CustomEvent) {\n    this._areaId = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev): void {\n    this._entityId = ev.target.value;\n  }\n\n  private _viewStatusChanged(ev: CustomEvent): void {\n    switch ((ev.target as any).value) {\n      case \"enabled\":\n        this._disabledBy = null;\n        this._hiddenBy = null;\n        break;\n      case \"disabled\":\n        this._disabledBy = \"user\";\n        this._hiddenBy = null;\n        break;\n      case \"hidden\":\n        this._hiddenBy = \"user\";\n        this._disabledBy = null;\n        break;\n    }\n  }\n\n  static get styles() {\n    return css`\n      ha-switch {\n        margin-right: 16px;\n      }\n      .row {\n        margin-top: 8px;\n        color: var(--primary-text-color);\n        display: flex;\n        align-items: center;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      ha-textfield {\n        display: block;\n        margin-bottom: 8px;\n      }\n      ha-expansion-panel {\n        margin-top: 8px;\n      }\n      .label {\n        margin-top: 16px;\n      }\n      .aliases {\n        border-radius: 4px;\n        margin-top: 4px;\n        margin-bottom: 4px;\n        --mdc-icon-button-size: 24px;\n        overflow: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-registry-basic-editor\": HaEntityRegistryBasicEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}