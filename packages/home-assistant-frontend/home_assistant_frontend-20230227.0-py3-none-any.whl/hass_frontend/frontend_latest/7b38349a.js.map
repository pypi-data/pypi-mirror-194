{"version":3,"file":"7b38349a.js","mappings":";;AAgFA;AACA;AACA;AACA;AACA;;AATA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-alarm-panel-card-editor.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { array, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { AlarmPanelCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    states: optional(array()),\n    theme: optional(string()),\n  })\n);\n\nconst states = [\n  \"arm_home\",\n  \"arm_away\",\n  \"arm_night\",\n  \"arm_vacation\",\n  \"arm_custom_bypass\",\n] as const;\n\n@customElement(\"hui-alarm-panel-card-editor\")\nexport class HuiAlarmPanelCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AlarmPanelCardConfig;\n\n  public setConfig(config: AlarmPanelCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        {\n          name: \"entity\",\n          required: true,\n          selector: { entity: { domain: \"alarm_control_panel\" } },\n        },\n        {\n          type: \"grid\",\n          name: \"\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n        {\n          type: \"multi_select\",\n          name: \"states\",\n          options: states.map((s) => [\n            s,\n            localize(`ui.card.alarm_control_panel.${s}`),\n          ]) as [string, string][],\n        },\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this._config}\n        .schema=${this._schema(this.hass.localize)}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"entity\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entity\"\n        );\n      case \"name\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.name\"\n        );\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      default:\n        // \"states\"\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.alarm-panel.available_states\"\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-alarm-panel-card-editor\": HuiAlarmPanelCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}