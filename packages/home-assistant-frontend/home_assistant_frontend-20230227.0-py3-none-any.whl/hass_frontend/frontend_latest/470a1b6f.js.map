{"version":3,"file":"470a1b6f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-sensor-card-editor.ts"],"sourcesContent":["import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  assert,\n  assign,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { SensorCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    icon: optional(string()),\n    graph: optional(union([literal(\"line\"), literal(\"none\")])),\n    unit: optional(string()),\n    detail: optional(number()),\n    theme: optional(string()),\n    hours_to_show: optional(number()),\n  })\n);\n\nconst SCHEMA = [\n  {\n    name: \"entity\",\n    selector: {\n      entity: { domain: [\"counter\", \"input_number\", \"number\", \"sensor\"] },\n    },\n  },\n  { name: \"name\", selector: { text: {} } },\n  {\n    type: \"grid\",\n    name: \"\",\n    schema: [\n      {\n        name: \"icon\",\n        selector: {\n          icon: {},\n        },\n        context: {\n          icon_entity: \"entity\",\n        },\n      },\n      {\n        name: \"graph\",\n        selector: {\n          select: {\n            options: [\n              {\n                value: \"none\",\n                label: \"None\",\n              },\n              {\n                value: \"line\",\n                label: \"Line\",\n              },\n            ],\n          },\n        },\n      },\n      { name: \"unit\", selector: { text: {} } },\n      { name: \"detail\", selector: { boolean: {} } },\n      { name: \"theme\", selector: { theme: {} } },\n      {\n        name: \"hours_to_show\",\n        selector: { number: { min: 1, mode: \"box\" } },\n      },\n    ],\n  },\n] as const;\n\n@customElement(\"hui-sensor-card-editor\")\nexport class HuiSensorCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: SensorCardConfig;\n\n  public setConfig(config: SensorCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const data = {\n      hours_to_show: 24,\n      graph: \"none\",\n      ...this._config,\n      detail: this._config!.detail === 2,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    config.detail = config.detail ? 2 : 1;\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"detail\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.sensor.show_more_detail\"\n        );\n      case \"graph\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.sensor.graph_type\"\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sensor-card-editor\": HuiSensorCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}