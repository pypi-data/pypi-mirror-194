{"version":3,"file":"51bbce19.js","mappings":";;AA0DA;AACA;AACA;AACA;AACA;;AATA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-humidifier-card-editor.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { HumidifierCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    theme: optional(string()),\n  })\n);\n\nconst SCHEMA = [\n  {\n    name: \"entity\",\n    required: true,\n    selector: { entity: { domain: \"humidifer\" } },\n  },\n  {\n    type: \"grid\",\n    name: \"\",\n    schema: [\n      { name: \"name\", selector: { text: {} } },\n      { name: \"theme\", selector: { theme: {} } },\n    ],\n  },\n] as const;\n\n@customElement(\"hui-humidifier-card-editor\")\nexport class HuiHumidifierCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: HumidifierCardConfig;\n\n  public setConfig(config: HumidifierCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this._config}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    if (schema.name === \"entity\") {\n      return this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.generic.entity\"\n      );\n    }\n\n    if (schema.name === \"theme\") {\n      return `${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.generic.theme\"\n      )} (${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.config.optional\"\n      )})`;\n    }\n\n    return this.hass!.localize(\n      `ui.panel.lovelace.editor.card.generic.${schema.name}`\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-humidifier-card-editor\": HuiHumidifierCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}