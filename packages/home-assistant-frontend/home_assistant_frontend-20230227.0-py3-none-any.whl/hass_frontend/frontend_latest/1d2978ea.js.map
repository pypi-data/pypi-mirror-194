{"version":3,"file":"1d2978ea.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;AC/DA;AAGA;;AC8BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;ACpGA;AACA;AACA;AAIA;;AAEA;AACA;AACA;AAGA;;;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AApEA;AACA;AACA;AAuEA;;;;;;;;;;;AAkEA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/energy/ha-config-energy.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"../../../layouts/hass-error-screen\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  EnergyPreferencesValidation,\n  getEnergyPreferenceValidation,\n  EnergyInfo,\n  EnergyPreferences,\n  getEnergyInfo,\n  getEnergyPreferences,\n  getReferencedStatisticIds,\n} from \"../../../data/energy\";\nimport {\n  getStatisticMetadata,\n  StatisticsMetaData,\n} from \"../../../data/recorder\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport \"../../../components/ha-alert\";\nimport \"./components/ha-energy-device-settings\";\nimport \"./components/ha-energy-grid-settings\";\nimport \"./components/ha-energy-solar-settings\";\nimport \"./components/ha-energy-battery-settings\";\nimport \"./components/ha-energy-gas-settings\";\nimport \"./components/ha-energy-water-settings\";\n\nconst INITIAL_CONFIG: EnergyPreferences = {\n  energy_sources: [],\n  device_consumption: [],\n};\n\n@customElement(\"ha-config-energy\")\nclass HaConfigEnergy extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _searchParms = new URLSearchParams(window.location.search);\n\n  @state() private _info?: EnergyInfo;\n\n  @state() private _preferences?: EnergyPreferences;\n\n  @state() private _validationResult?: EnergyPreferencesValidation;\n\n  @state() private _error?: string;\n\n  @state() private _statsMetadata?: Record<string, StatisticsMetaData>;\n\n  protected firstUpdated() {\n    this._fetchConfig();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._preferences && !this._error) {\n      return html`<hass-loading-screen\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n      ></hass-loading-screen>`;\n    }\n\n    if (this._error) {\n      return html`<hass-error-screen\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .error=${this._error}\n      ></hass-error-screen>`;\n    }\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this._searchParms.has(\"historyBack\")\n          ? undefined\n          : \"/config/lovelace/dashboards\"}\n        .header=${this.hass.localize(\"ui.panel.config.energy.caption\")}\n      >\n        <ha-alert>\n          ${this.hass.localize(\"ui.panel.config.energy.new_device_info\")}\n        </ha-alert>\n        <div class=\"container\">\n          <ha-energy-grid-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences!}\n            .statsMetadata=${this._statsMetadata}\n            .validationResult=${this._validationResult}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-grid-settings>\n          <ha-energy-solar-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences!}\n            .statsMetadata=${this._statsMetadata}\n            .validationResult=${this._validationResult}\n            .info=${this._info}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-solar-settings>\n          <ha-energy-battery-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences!}\n            .statsMetadata=${this._statsMetadata}\n            .validationResult=${this._validationResult}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-battery-settings>\n          <ha-energy-gas-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences!}\n            .statsMetadata=${this._statsMetadata}\n            .validationResult=${this._validationResult}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-gas-settings>\n          <ha-energy-water-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences!}\n            .statsMetadata=${this._statsMetadata}\n            .validationResult=${this._validationResult}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-water-settings>\n          <ha-energy-device-settings\n            .hass=${this.hass}\n            .preferences=${this._preferences!}\n            .statsMetadata=${this._statsMetadata}\n            .validationResult=${this._validationResult}\n            @value-changed=${this._prefsChanged}\n          ></ha-energy-device-settings>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _fetchConfig() {\n    this._error = undefined;\n\n    const validationPromise = getEnergyPreferenceValidation(this.hass);\n    const energyInfoPromise = await getEnergyInfo(this.hass);\n    try {\n      this._preferences = await getEnergyPreferences(this.hass);\n    } catch (err: any) {\n      if (err.code === \"not_found\") {\n        this._preferences = INITIAL_CONFIG;\n      } else {\n        this._error = err.message;\n      }\n    }\n    try {\n      this._validationResult = await validationPromise;\n    } catch (err: any) {\n      this._error = err.message;\n    }\n    this._info = await energyInfoPromise;\n    await this._fetchMetaData();\n  }\n\n  private async _prefsChanged(ev: CustomEvent) {\n    this._preferences = ev.detail.value;\n    this._validationResult = undefined;\n    try {\n      this._validationResult = await getEnergyPreferenceValidation(this.hass);\n    } catch (err: any) {\n      this._error = err.message;\n    }\n    this._info = await getEnergyInfo(this.hass);\n    await this._fetchMetaData();\n  }\n\n  private async _fetchMetaData() {\n    if (!this._preferences || !this._info) {\n      return;\n    }\n    const statIDs = getReferencedStatisticIds(this._preferences, this._info);\n    const statsMetadataArray = await getStatisticMetadata(this.hass, statIDs);\n    const statsMetadata: Record<string, StatisticsMetaData> = {};\n    statsMetadataArray.forEach((x) => {\n      statsMetadata[x.statistic_id] = x;\n    });\n    this._statsMetadata = statsMetadata;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-alert {\n          display: block;\n          margin: 8px;\n        }\n        .container {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n          grid-gap: 8px 8px;\n          margin: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-energy\": HaConfigEnergy;\n  }\n}\n"],"names":[],"sourceRoot":""}