{"version":3,"file":"d0a3bd13.js","mappings":";;AAkDA;;AAGA;;;;AAOA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAKA;;;AAjCA;;;;AAoEA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-shopping-list-editor.ts"],"sourcesContent":["import \"../../../../components/ha-textfield\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, object, optional, string } from \"superstruct\";\nimport { isComponentLoaded } from \"../../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { ShoppingListCardConfig } from \"../../cards/types\";\nimport \"../../../../components/ha-theme-picker\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(string()),\n    theme: optional(string()),\n  })\n);\n\n@customElement(\"hui-shopping-list-card-editor\")\nexport class HuiShoppingListEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ShoppingListCardConfig;\n\n  public setConfig(config: ShoppingListCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        ${!isComponentLoaded(this.hass, \"shopping_list\")\n          ? html`\n              <div class=\"error\">\n                ${this.hass.localize(\n                  \"ui.panel.lovelace.editor.card.shopping-list.integration_not_loaded\"\n                )}\n              </div>\n            `\n          : \"\"}\n        <ha-textfield\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @input=${this._valueChanged}\n        ></ha-textfield>\n        <ha-theme-picker\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          .label=${`${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.theme\"\n          )} (${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})`}\n          @value-changed=${this._valueChanged}\n        ></ha-theme-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .error {\n        color: var(--error-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-shopping-list-card-editor\": HuiShoppingListEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}