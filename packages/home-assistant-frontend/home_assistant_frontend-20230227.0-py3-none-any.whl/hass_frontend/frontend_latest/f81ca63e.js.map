{"version":3,"file":"f81ca63e.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;;;;;;;;;;;ACnGA;;;;;;;;;;;;;;;;;;;;ACCA;;;ACkBA;;;AAGA;;;AAQA;;AAIA;AAIA;;;AAIA;AACA;AACA;AACA;AACA;;;;AAMA;AAEA;AACA;AACA;AACA;AAGA;;;AAMA;;;AAIA;;;;AAOA;;;;AAOA;AAGA;;AAGA;;;;AAKA;AACA;;AAEA;;AAEA;;;AAIA;AACA;;AAEA;;AAIA;;AAGA;AACA;;AAEA;AAGA;;AA3GA;AA8LA;AAKA;AAEA;;;;;;;AAcA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/tags/dialog-tag-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          if ((input as any).disabled) {\n            break;\n          }\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-textfield\";\nimport { Tag, UpdateTagParams } from \"../../../data/tag\";\nimport { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { TagDetailDialogParams } from \"./show-dialog-tag-detail\";\n\nconst QR_LOGO_URL = \"/static/icons/favicon-192x192.png\";\n\n@customElement(\"dialog-tag-detail\")\nclass DialogTagDetail\n  extends LitElement\n  implements HassDialog<TagDetailDialogParams>\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _id?: string;\n\n  @state() private _name!: string;\n\n  @state() private _error?: string;\n\n  @state() private _params?: TagDetailDialogParams;\n\n  @state() private _submitting = false;\n\n  @state() private _qrCode?: TemplateResult;\n\n  public showDialog(params: TagDetailDialogParams): void {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.entry) {\n      this._name = this._params.entry.name || \"\";\n    } else {\n      this._id = \"\";\n      this._name = \"\";\n    }\n\n    this._generateQR();\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._qrCode = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.entry\n            ? this._params.entry.name || this._params.entry.id\n            : this.hass!.localize(\"ui.panel.config.tag.detail.new_tag\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${this._params.entry\n              ? html`${this.hass!.localize(\n                  \"ui.panel.config.tag.detail.tag_id\"\n                )}:\n                ${this._params.entry.id}`\n              : \"\"}\n            <ha-textfield\n              dialogInitialFocus\n              .value=${this._name}\n              .configValue=${\"name\"}\n              @input=${this._valueChanged}\n              .label=${this.hass!.localize(\"ui.panel.config.tag.detail.name\")}\n              .errorMessage=${this.hass!.localize(\n                \"ui.panel.config.tag.detail.required_error_msg\"\n              )}\n              required\n              auto-validate\n            ></ha-textfield>\n            ${!this._params.entry\n              ? html`<ha-textfield\n                  .value=${this._id || \"\"}\n                  .configValue=${\"id\"}\n                  @input=${this._valueChanged}\n                  .label=${this.hass!.localize(\n                    \"ui.panel.config.tag.detail.tag_id\"\n                  )}\n                  .placeholder=${this.hass!.localize(\n                    \"ui.panel.config.tag.detail.tag_id_placeholder\"\n                  )}\n                ></ha-textfield>`\n              : \"\"}\n          </div>\n          ${this._params.entry\n            ? html`\n                <div>\n                  <p>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.tag.detail.usage\",\n                      \"companion_link\",\n                      html`<a\n                        href=\"https://companion.home-assistant.io/\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        >${this.hass!.localize(\n                          \"ui.panel.config.tag.detail.companion_apps\"\n                        )}</a\n                      >`\n                    )}\n                  </p>\n                </div>\n                ${this._qrCode\n                  ? html` <div id=\"qr\">${this._qrCode}</div> `\n                  : \"\"}\n              `\n            : ``}\n        </div>\n        ${this._params.entry\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteEntry}\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\"ui.panel.config.tag.detail.delete\")}\n              </mwc-button>\n            `\n          : html``}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${this._submitting}\n        >\n          ${this._params.entry\n            ? this.hass!.localize(\"ui.panel.config.tag.detail.update\")\n            : this.hass!.localize(\"ui.panel.config.tag.detail.create\")}\n        </mwc-button>\n        ${this._params.openWrite && !this._params.entry\n          ? html` <mwc-button\n              slot=\"primaryAction\"\n              @click=${this._updateWriteEntry}\n              .disabled=${this._submitting}\n            >\n              ${this.hass!.localize(\n                \"ui.panel.config.tag.detail.create_and_write\"\n              )}\n            </mwc-button>`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: Event) {\n    const target = ev.target as any;\n    const configValue = target.configValue;\n\n    this._error = undefined;\n    this[`_${configValue}`] = target.value;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    let newValue: Tag | undefined;\n    try {\n      const values: UpdateTagParams = {\n        name: this._name.trim(),\n      };\n      if (this._params!.entry) {\n        newValue = await this._params!.updateEntry!(values);\n      } else {\n        newValue = await this._params!.createEntry(values, this._id);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n    return newValue;\n  }\n\n  private async _updateWriteEntry() {\n    const openWrite = this._params?.openWrite;\n    const tag = await this._updateEntry();\n    if (!tag || !openWrite) {\n      return;\n    }\n    openWrite(tag);\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry!()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _generateQR() {\n    const qrcode = await import(\"qrcode\");\n    const canvas = await qrcode.toCanvas(\n      `https://www.home-assistant.io/tag/${this._params!.entry!.id}`,\n      {\n        width: 180,\n        errorCorrectionLevel: \"Q\",\n        color: {\n          light: \"#fff\",\n        },\n      }\n    );\n    const context = canvas.getContext(\"2d\");\n\n    const imageObj = new Image();\n    imageObj.src = QR_LOGO_URL;\n    await new Promise((resolve) => {\n      imageObj.onload = resolve;\n    });\n    context?.drawImage(\n      imageObj,\n      canvas.width / 3,\n      canvas.height / 3,\n      canvas.width / 3,\n      canvas.height / 3\n    );\n\n    this._qrCode = html`<img\n        alt=${this.hass.localize(\n          \"ui.panel.config.tag.qr_code_image\",\n          \"name\",\n          this._name\n        )}\n        src=${canvas.toDataURL()}\n      ></img>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        a {\n          color: var(--primary-color);\n        }\n        #qr {\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-tag-detail\": DialogTagDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}