{"version":3,"file":"5a61a013.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;;;;ACjEA;;;;;;;;;;;;;;;;;;;;AC+BA;;ACIA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;;;;;;AC5HA;AACA;AACA;AACA;;;;;AAKA;;AAIA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;;;;;;;;AAUA;;;;;;;AAQA;AACA;AACA;AACA;;;;;AAMA;;;;;;;;;;;;;AAgEA;;;AC1HA;;;;;;;AAOA;AACA;AACA;;;;AAIA;AACA;;;;ACpDA;AACA;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;AD2HA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/components/ha-analytics.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-analytics.ts","webpack://home-assistant-frontend/./src/components/ha-analytics-learn-more.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { Analytics, AnalyticsPreferences } from \"../data/analytics\";\nimport { haStyle } from \"../resources/styles\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nimport type { HaSwitch } from \"./ha-switch\";\n\nconst ADDITIONAL_PREFERENCES = [\n  {\n    key: \"usage\",\n    title: \"Usage\",\n    description: \"Details of what you use with Home Assistant\",\n  },\n  {\n    key: \"statistics\",\n    title: \"Statistical data\",\n    description: \"Counts containing total number of datapoints\",\n  },\n];\n\ndeclare global {\n  interface HASSDomEvents {\n    \"analytics-preferences-changed\": { preferences: AnalyticsPreferences };\n  }\n}\n\n@customElement(\"ha-analytics\")\nexport class HaAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public analytics?: Analytics;\n\n  protected render(): TemplateResult {\n    const loading = this.analytics === undefined;\n    const baseEnabled = !loading && this.analytics!.preferences.base;\n\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"base\"> Basic analytics </span>\n        <span slot=\"description\" data-for=\"base\">\n          This includes information about your system.\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${baseEnabled}\n          .preference=${\"base\"}\n          .disabled=${loading}\n          name=\"base\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(\n        (preference) =>\n          html`\n            <ha-settings-row>\n              <span slot=\"heading\" data-for=${preference.key}>\n                ${preference.title}\n              </span>\n              <span slot=\"description\" data-for=${preference.key}>\n                ${preference.description}\n              </span>\n              <span>\n                <ha-switch\n                  @change=${this._handleRowClick}\n                  .checked=${this.analytics?.preferences[preference.key]}\n                  .preference=${preference.key}\n                  name=${preference.key}\n                >\n                </ha-switch>\n                ${!baseEnabled\n                  ? html`\n                      <paper-tooltip animation-delay=\"0\" position=\"right\">\n                        You need to enable basic analytics for this option to be\n                        available\n                      </paper-tooltip>\n                    `\n                  : \"\"}\n              </span>\n            </ha-settings-row>\n          `\n      )}\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"diagnostics\"> Diagnostics </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          Share crash reports when unexpected errors occur.\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${this.analytics?.preferences.diagnostics}\n          .preference=${\"diagnostics\"}\n          .disabled=${loading}\n          name=\"diagnostics\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    this.shadowRoot!.querySelectorAll(\"*[data-for]\").forEach((el) => {\n      const forEl = (el as HTMLElement).dataset.for;\n      delete (el as HTMLElement).dataset.for;\n\n      el.addEventListener(\"click\", () => {\n        const toFocus = this.shadowRoot!.querySelector(\n          `*[name=${forEl}]`\n        ) as HTMLElement | null;\n\n        if (toFocus) {\n          toFocus.focus();\n          toFocus.click();\n        }\n      });\n    });\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.currentTarget as HaSwitch;\n    const preference = (target as any).preference;\n    const preferences = this.analytics ? { ...this.analytics.preferences } : {};\n\n    if (preferences[preference] === target.checked) {\n      return;\n    }\n\n    preferences[preference] = target.checked;\n\n    if (\n      ADDITIONAL_PREFERENCES.some((entry) => entry.key === preference) &&\n      target.checked\n    ) {\n      preferences.base = true;\n    } else if (preference === \"base\" && !target.checked) {\n      preferences.usage = false;\n      preferences.statistics = false;\n    }\n\n    fireEvent(this, \"analytics-preferences-changed\", { preferences });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-analytics\": HaAnalytics;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-analytics\";\nimport { analyticsLearnMore } from \"../../../components/ha-analytics-learn-more\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  Analytics,\n  getAnalyticsDetails,\n  setAnalyticsPreferences,\n} from \"../../../data/analytics\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-analytics\")\nclass ConfigAnalytics extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _analyticsDetails?: Analytics;\n\n  @state() private _error?: string;\n\n  protected render(): TemplateResult {\n    const error = this._error\n      ? this._error\n      : !isComponentLoaded(this.hass, \"analytics\")\n      ? \"Analytics integration not loaded\"\n      : undefined;\n\n    return html`\n      <ha-card outlined>\n        <div class=\"card-content\">\n          ${error ? html`<div class=\"error\">${error}</div>` : \"\"}\n          <p>\n            Share anonymized information from your installation to help make\n            Home Assistant better and help us convince manufacturers to add\n            local control and privacy-focused features.\n          </p>\n          <ha-analytics\n            @analytics-preferences-changed=${this._preferencesChanged}\n            .hass=${this.hass}\n            .analytics=${this._analyticsDetails}\n          ></ha-analytics>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n      <div class=\"footer\">${analyticsLearnMore(this.hass)}</div>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"analytics\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      this._analyticsDetails = await getAnalyticsDetails(this.hass);\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setAnalyticsPreferences(\n        this.hass,\n        this._analyticsDetails?.preferences || {}\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _preferencesChanged(event: CustomEvent): void {\n    this._analyticsDetails = {\n      ...this._analyticsDetails!,\n      preferences: event.detail.preferences,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n        p {\n          margin-top: 0;\n        }\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .footer {\n          padding: 32px 0 16px;\n          text-align: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-analytics\": ConfigAnalytics;\n  }\n}\n","import { html } from \"lit\";\nimport { HomeAssistant } from \"../types\";\nimport { documentationUrl } from \"../util/documentation-url\";\n\nexport const analyticsLearnMore = (hass: HomeAssistant) => html`<a\n  .href=${documentationUrl(hass, \"/integrations/analytics/\")}\n  target=\"_blank\"\n  rel=\"noreferrer\"\n>\n  How we process your data\n</a>`;\n"],"names":[],"sourceRoot":""}