{"version":3,"file":"9b129af8.js","mappings":";AAmDA;;;AAGA;AAMA;AAiCA;;;AAMA;AAMA;AA8BA;;;AAGA;AAMA;AC/FA;AACA;AAmBA;AACA;;AAiEA;;AAIA;;;;AAKA;;AAEA;AAGA;AAWA;;;;AAKA;;AAEA;;AAGA;;AAOA;AAiBA;AACA;AAmBA;AACA;;;;ACsJA;AACA;;;AAWA;AAIA;AAIA;;;AAUA;AACA;AAGA;AAKA;AACA;AAEA","sources":["webpack://home-assistant-frontend/./src/common/integrations/protocolIntegrationPicked.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/panels/my/ha-panel-my.ts"],"sourcesContent":["import { html } from \"lit\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport { domainToName } from \"../../data/integration\";\nimport { getIntegrationDescriptions } from \"../../data/integrations\";\nimport { showConfigFlowDialog } from \"../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { showMatterAddDeviceDialog } from \"../../panels/config/integrations/integration-panels/matter/show-dialog-add-matter-device\";\nimport { showZWaveJSAddNodeDialog } from \"../../panels/config/integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { isComponentLoaded } from \"../config/is_component_loaded\";\nimport { navigate } from \"../navigate\";\n\nexport const PROTOCOL_INTEGRATIONS = [\"zha\", \"zwave_js\", \"matter\"] as const;\n\nexport const protocolIntegrationPicked = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  domain: string,\n  options?: { brand?: string; domain?: string }\n) => {\n  if (options?.domain) {\n    const localize = await hass.loadBackendTranslation(\"title\", options.domain);\n    options.domain = domainToName(localize, options.domain);\n  }\n\n  if (options?.brand) {\n    const integrationDescriptions = await getIntegrationDescriptions(hass);\n    options.brand =\n      integrationDescriptions.core.integration[options.brand]?.name ||\n      options.brand;\n  }\n\n  if (domain === \"zwave_js\") {\n    const entries = await getConfigEntries(hass, {\n      domain,\n    });\n\n    if (!isComponentLoaded(hass, \"zwave_js\") || !entries.length) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\",\n          { integration: \"Z-Wave\" }\n        ),\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Z-Wave\",\n            brand: options?.brand || options?.domain || \"Z-Wave\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/docs/z-wave/controllers\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zwave_js\",\n          });\n        },\n      });\n      return;\n    }\n\n    showZWaveJSAddNodeDialog(element, {\n      entry_id: entries[0].entry_id,\n    });\n  } else if (domain === \"zha\") {\n    const entries = await getConfigEntries(hass, {\n      domain,\n    });\n\n    if (!isComponentLoaded(hass, \"zha\") || !entries.length) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\",\n          { integration: \"Zigbee\" }\n        ),\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Zigbee\",\n            brand: options?.brand || options?.domain || \"Zigbee\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(\n                hass,\n                \"/integrations/zha/#known-working-zigbee-radio-modules\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zha\",\n          });\n        },\n      });\n      return;\n    }\n\n    navigate(\"/config/zha/add\");\n  } else if (domain === \"matter\") {\n    const entries = await getConfigEntries(hass, {\n      domain,\n    });\n    if (!isComponentLoaded(hass, domain) || !entries.length) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\",\n          { integration: \"Matter\" }\n        ),\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_matter\",\n          {\n            integration: \"Matter\",\n            brand: options?.brand || options?.domain || \"Matter\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/integrations/matter\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"matter\",\n          });\n        },\n      });\n      return;\n    }\n    showMatterAddDeviceDialog(element);\n  }\n};\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        hass.loadBackendTranslation(\"selector\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      await hass.loadBackendTranslation(\"selector\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.error.${error}`,\n          step.description_placeholders\n        ) || error\n      );\n    },\n\n    renderShowFormStepFieldLocalizeValue(hass, step, key) {\n      return hass.localize(`component.${step.handler}.selector.${key}`);\n    },\n\n    renderShowFormStepSubmitButton(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.submit`\n        ) ||\n        hass.localize(\n          `ui.panel.config.integrations.config_flow.${\n            step.last_step === false ? \"next\" : \"submit\"\n          }`\n        )\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (reason !== \"loading_flow\" && reason !== \"loading_step\") {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { sanitizeUrl } from \"@braintree/sanitize-url\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport {\n  protocolIntegrationPicked,\n  PROTOCOL_INTEGRATIONS,\n} from \"../../common/integrations/protocolIntegrationPicked\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n} from \"../../common/url/search-params\";\nimport { domainToName } from \"../../data/integration\";\nimport \"../../layouts/hass-error-screen\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\n\nexport const getMyRedirects = (hasSupervisor: boolean): Redirects => ({\n  application_credentials: {\n    redirect: \"/config/application_credentials\",\n  },\n  developer_states: {\n    redirect: \"/developer-tools/state\",\n  },\n  developer_services: {\n    redirect: \"/developer-tools/service\",\n  },\n  developer_call_service: {\n    redirect: \"/developer-tools/service\",\n    params: {\n      service: \"string\",\n    },\n  },\n  developer_template: {\n    redirect: \"/developer-tools/template\",\n  },\n  developer_events: {\n    redirect: \"/developer-tools/event\",\n  },\n  developer_statistics: {\n    redirect: \"/developer-tools/statistics\",\n  },\n  server_controls: {\n    redirect: \"/developer-tools/yaml\",\n  },\n  calendar: {\n    component: \"calendar\",\n    redirect: \"/calendar\",\n  },\n  config: {\n    redirect: \"/config/dashboard\",\n  },\n  cloud: {\n    component: \"cloud\",\n    redirect: \"/config/cloud\",\n  },\n  config_flow_start: {\n    redirect: \"/config/integrations/add\",\n    params: {\n      domain: \"string\",\n    },\n  },\n  brand: {\n    redirect: \"/config/integrations/add\",\n    params: {\n      brand: \"string\",\n    },\n  },\n  integrations: {\n    redirect: \"/config/integrations\",\n  },\n  config_mqtt: {\n    component: \"mqtt\",\n    redirect: \"/config/mqtt\",\n  },\n  config_zha: {\n    component: \"zha\",\n    redirect: \"/config/zha/dashboard\",\n  },\n  config_zwave_js: {\n    component: \"zwave_js\",\n    redirect: \"/config/zwave_js/dashboard\",\n  },\n  add_zigbee_device: {\n    component: \"zha\",\n    redirect: \"/config/zha/add\",\n  },\n  add_zwave_device: {\n    component: \"zwave_js\",\n    redirect: \"/config/zwave_js/add\",\n  },\n  add_matter_device: {\n    component: \"matter\",\n    redirect: \"/config/matter/add\",\n  },\n  config_energy: {\n    component: \"energy\",\n    redirect: \"/config/energy/dashboard\",\n  },\n  devices: {\n    redirect: \"/config/devices/dashboard\",\n  },\n  entities: {\n    redirect: \"/config/entities\",\n  },\n  energy: {\n    component: \"energy\",\n    redirect: \"/energy\",\n  },\n  areas: {\n    redirect: \"/config/areas/dashboard\",\n  },\n  blueprint_import: {\n    component: \"blueprint\",\n    redirect: \"/config/blueprint/dashboard/import\",\n    params: {\n      blueprint_url: \"url\",\n    },\n  },\n  blueprints: {\n    component: \"blueprint\",\n    redirect: \"/config/blueprint/dashboard\",\n  },\n  automations: {\n    component: \"automation\",\n    redirect: \"/config/automation/dashboard\",\n  },\n  scenes: {\n    component: \"scene\",\n    redirect: \"/config/scene/dashboard\",\n  },\n  scripts: {\n    component: \"script\",\n    redirect: \"/config/script/dashboard\",\n  },\n  helpers: {\n    redirect: \"/config/helpers\",\n  },\n  tags: {\n    component: \"tag\",\n    redirect: \"/config/tags\",\n  },\n  lovelace_dashboards: {\n    component: \"lovelace\",\n    redirect: \"/config/lovelace/dashboards\",\n  },\n  lovelace_resources: {\n    component: \"lovelace\",\n    redirect: \"/config/lovelace/resources\",\n  },\n  oauth: {\n    redirect: \"/auth/external/callback\",\n    navigate_outside_spa: true,\n    params: {\n      error: \"string?\",\n      code: \"string?\",\n      state: \"string\",\n    },\n  },\n  people: {\n    component: \"person\",\n    redirect: \"/config/person\",\n  },\n  zones: {\n    component: \"zone\",\n    redirect: \"/config/zone\",\n  },\n  users: {\n    redirect: \"/config/users\",\n  },\n  general: {\n    redirect: \"/config/general\",\n  },\n  logs: {\n    redirect: \"/config/logs\",\n  },\n  repairs: {\n    component: \"repairs\",\n    redirect: \"/config/repairs\",\n  },\n  info: {\n    redirect: \"/config/info\",\n  },\n  system_health: {\n    redirect: \"/config/repairs?dialog=system-health\",\n  },\n  hardware: {\n    redirect: \"/config/hardware\",\n  },\n  storage: {\n    redirect: \"/config/storage\",\n  },\n  network: {\n    redirect: \"/config/network\",\n  },\n  analytics: {\n    redirect: \"/config/analytics\",\n  },\n  updates: {\n    redirect: \"/config/updates\",\n  },\n  system_dashboard: {\n    redirect: \"/config/system\",\n  },\n  customize: {\n    // customize was removed in 2021.12, fallback to dashboard\n    redirect: \"/config/dashboard\",\n  },\n  profile: {\n    redirect: \"/profile\",\n  },\n  logbook: {\n    component: \"logbook\",\n    redirect: \"/logbook\",\n  },\n  history: {\n    component: \"history\",\n    redirect: \"/history\",\n  },\n  media_browser: {\n    component: \"media_source\",\n    redirect: \"/media-browser\",\n  },\n  backup: {\n    component: hasSupervisor ? \"hassio\" : \"backup\",\n    redirect: hasSupervisor ? \"/hassio/backups\" : \"/config/backup\",\n  },\n  supervisor_snapshots: {\n    component: hasSupervisor ? \"hassio\" : \"backup\",\n    redirect: hasSupervisor ? \"/hassio/backups\" : \"/config/backup\",\n  },\n  supervisor_backups: {\n    component: hasSupervisor ? \"hassio\" : \"backup\",\n    redirect: hasSupervisor ? \"/hassio/backups\" : \"/config/backup\",\n  },\n  supervisor_system: {\n    // Moved from Supervisor panel in 2022.5\n    redirect: \"/config/system\",\n  },\n  supervisor_logs: {\n    // Moved from Supervisor panel in 2022.5\n    redirect: \"/config/logs\",\n  },\n  supervisor_info: {\n    // Moved from Supervisor panel in 2022.5\n    redirect: \"/config/info\",\n  },\n  hacs_repository: {\n    component: \"hacs\",\n    redirect: \"/hacs/_my_redirect/hacs_repository\",\n    params: {\n      owner: \"string\",\n      repository: \"string\",\n      category: \"string?\",\n    },\n  },\n});\n\nconst getRedirect = (\n  path: string,\n  hasSupervisor: boolean\n): Redirect | undefined => getMyRedirects(hasSupervisor)?.[path];\n\nexport type ParamType = \"url\" | \"string\" | \"string?\";\n\nexport type Redirects = { [key: string]: Redirect };\nexport interface Redirect {\n  redirect: string;\n  // Set to True to use browser redirect instead of frontend navigation\n  navigate_outside_spa?: boolean;\n  component?: string;\n  params?: {\n    [key: string]: ParamType;\n  };\n  optional_params?: {\n    [key: string]: ParamType;\n  };\n}\n\n@customElement(\"ha-panel-my\")\nclass HaPanelMy extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public route!: Route;\n\n  @state() public _error?: string;\n\n  private _redirect?: Redirect;\n\n  connectedCallback() {\n    super.connectedCallback();\n    const path = this.route.path.substring(1);\n    const hasSupervisor = isComponentLoaded(this.hass, \"hassio\");\n\n    this._redirect = getRedirect(path, hasSupervisor);\n\n    if (path.startsWith(\"supervisor\") && this._redirect === undefined) {\n      if (!hasSupervisor) {\n        this._error = \"no_supervisor\";\n        return;\n      }\n      navigate(`/hassio/_my_redirect/${path}${window.location.search}`, {\n        replace: true,\n      });\n      return;\n    }\n\n    if (!this._redirect) {\n      this._error = \"not_supported\";\n      return;\n    }\n\n    if (\n      this._redirect.component &&\n      !isComponentLoaded(this.hass, this._redirect.component)\n    ) {\n      this.hass.loadBackendTranslation(\"title\", this._redirect.component);\n      this._error = \"no_component\";\n      const component = this._redirect.component;\n      if (\n        (PROTOCOL_INTEGRATIONS as ReadonlyArray<string>).includes(component)\n      ) {\n        const params = extractSearchParamsObject();\n        this.hass\n          .loadFragmentTranslation(\"config\")\n          .then()\n          .then(() => {\n            protocolIntegrationPicked(this, this.hass, component, {\n              domain: params.domain,\n              brand: params.brand,\n            });\n          });\n      }\n      return;\n    }\n\n    let url: string;\n    try {\n      url = this._createRedirectUrl();\n    } catch (err: any) {\n      this._error = \"url_error\";\n      return;\n    }\n\n    if (this._redirect.navigate_outside_spa) {\n      location.assign(url);\n    } else {\n      navigate(url, { replace: true });\n    }\n  }\n\n  protected render() {\n    if (this._error) {\n      let error: string;\n      switch (this._error) {\n        case \"not_supported\":\n          error =\n            this.hass.localize(\n              \"ui.panel.my.not_supported\",\n              \"link\",\n              html`<a\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n                href=\"https://my.home-assistant.io/faq.html#supported-pages\"\n                >${this.hass.localize(\"ui.panel.my.faq_link\")}</a\n              >`\n            ) || \"This redirect is not supported.\";\n          break;\n        case \"no_component\":\n          error =\n            this.hass.localize(\n              \"ui.panel.my.component_not_loaded\",\n              \"integration\",\n              html`<a\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n                href=${documentationUrl(\n                  this.hass,\n                  `/integrations/${this._redirect!.component!}`\n                )}\n                >${domainToName(\n                  this.hass.localize,\n                  this._redirect!.component!\n                )}</a\n              >`\n            ) || \"This redirect is not supported.\";\n          break;\n        case \"no_supervisor\":\n          error = this.hass.localize(\n            \"ui.panel.my.no_supervisor\",\n            \"docs_link\",\n            html`<a\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              href=${documentationUrl(this.hass, \"/installation\")}\n              >${this.hass.localize(\"ui.panel.my.documentation\")}</a\n            >`\n          );\n          break;\n        default:\n          error = this.hass.localize(\"ui.panel.my.error\") || \"Unknown error\";\n      }\n      return html`<hass-error-screen\n        .error=${error}\n        .hass=${this.hass}\n      ></hass-error-screen>`;\n    }\n    return html``;\n  }\n\n  private _createRedirectUrl(): string {\n    const params = this._createRedirectParams();\n    return `${this._redirect!.redirect}${params}`;\n  }\n\n  private _createRedirectParams(): string {\n    const params = extractSearchParamsObject();\n    if (!this._redirect!.params && !Object.keys(params).length) {\n      return \"\";\n    }\n    const resultParams = {};\n    for (const [key, type] of Object.entries(this._redirect!.params || {})) {\n      if (!params[key] && type.endsWith(\"?\")) {\n        continue;\n      }\n      if (!params[key] || !this._checkParamType(type, params[key])) {\n        throw Error();\n      }\n      resultParams[key] = params[key];\n    }\n    return `?${createSearchParam(resultParams)}`;\n  }\n\n  private _checkParamType(type: ParamType, value: string) {\n    if (type === \"string\" || type === \"string?\") {\n      return true;\n    }\n    if (type === \"url\") {\n      return value && value === sanitizeUrl(value);\n    }\n    return false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-my\": HaPanelMy;\n  }\n}\n"],"names":[],"sourceRoot":""}