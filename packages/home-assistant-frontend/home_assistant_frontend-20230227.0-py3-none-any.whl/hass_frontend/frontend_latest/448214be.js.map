{"version":3,"file":"448214be.js","mappings":";AAqBA;;;;;;AAOA;;;;;;;;AAQA;;;AAGA;;;;;AAKA;AAGA;;;;;;;;AAsBA;AC0DA;AARA;;;;AARA;;;;AARA;;;;;;;;;;;;;;;;AAkIA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-graph-base.ts","webpack://home-assistant-frontend/./src/panels/lovelace/header-footer/hui-graph-header-footer.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  svg,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { strokeWidth } from \"../../../data/graph\";\nimport { getPath } from \"../common/graph/get-path\";\n\n@customElement(\"hui-graph-base\")\nexport class HuiGraphBase extends LitElement {\n  @property() public coordinates?: any;\n\n  @state() private _path?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this._path\n        ? svg`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 500 100\">\n          <g>\n            <mask id=\"fill\">\n              <path\n                class='fill'\n                fill='white'\n                d=\"${this._path} L 500, 100 L 0, 100 z\"\n              />\n            </mask>\n            <rect height=\"100%\" width=\"100%\" id=\"fill-rect\" fill=\"var(--accent-color)\" mask=\"url(#fill)\"></rect>\n            <mask id=\"line\">\n              <path\n                fill=\"none\"\n                stroke=\"var(--accent-color)\"\n                stroke-width=\"${strokeWidth}\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                d=${this._path}\n              ></path>\n            </mask>\n            <rect height=\"100%\" width=\"100%\" id=\"rect\" fill=\"var(--accent-color)\" mask=\"url(#line)\"></rect>\n          </g>\n        </svg>`\n        : svg`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 500 100\"></svg>`}\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this.coordinates) {\n      return;\n    }\n\n    if (changedProps.has(\"coordinates\")) {\n      this._path = getPath(this.coordinates);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        width: 100%;\n      }\n      .fill {\n        opacity: 0.1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-graph-base\": HuiGraphBase;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-circular-progress\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { subscribeHistoryStatesTimeWindow } from \"../../../data/history\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { coordinatesMinimalResponseCompressedState } from \"../common/graph/coordinates\";\nimport \"../components/hui-graph-base\";\nimport { LovelaceHeaderFooter, LovelaceHeaderFooterEditor } from \"../types\";\nimport { GraphHeaderFooterConfig } from \"./types\";\n\nconst MINUTE = 60000;\nconst HOUR = 60 * MINUTE;\nconst includeDomains = [\"counter\", \"input_number\", \"number\", \"sensor\"];\n\n@customElement(\"hui-graph-header-footer\")\nexport class HuiGraphHeaderFooter\n  extends LitElement\n  implements LovelaceHeaderFooter\n{\n  public static async getConfigElement(): Promise<LovelaceHeaderFooterEditor> {\n    await import(\"../editor/config-elements/hui-graph-footer-editor\");\n    return document.createElement(\"hui-graph-footer-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): GraphHeaderFooterConfig {\n    const maxEntities = 1;\n    const entityFilter = (stateObj: HassEntity): boolean =>\n      !isNaN(Number(stateObj.state)) &&\n      !!stateObj.attributes.unit_of_measurement;\n\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains,\n      entityFilter\n    );\n\n    return {\n      type: \"graph\",\n      entity: foundEntities[0] || \"\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public type!: \"header\" | \"footer\";\n\n  @property() protected _config?: GraphHeaderFooterConfig;\n\n  @state() private _coordinates?: number[][];\n\n  private _error?: string;\n\n  private _interval?: number;\n\n  private _subscribed?: Promise<(() => Promise<void>) | void>;\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: GraphHeaderFooterConfig): void {\n    if (\n      !config?.entity ||\n      !includeDomains.includes(computeDomain(config.entity))\n    ) {\n      throw new Error(\"Specify an entity from within the sensor domain\");\n    }\n\n    const cardConfig = {\n      detail: 1,\n      hours_to_show: 24,\n      ...config,\n    };\n\n    cardConfig.hours_to_show = Number(cardConfig.hours_to_show);\n    cardConfig.detail =\n      cardConfig.detail === 1 || cardConfig.detail === 2\n        ? cardConfig.detail\n        : 1;\n\n    this._config = cardConfig;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    if (this._error) {\n      return html`<div class=\"errors\">${this._error}</div>`;\n    }\n\n    if (!this._coordinates) {\n      return html`\n        <div class=\"container\">\n          <ha-circular-progress active size=\"small\"></ha-circular-progress>\n        </div>\n      `;\n    }\n\n    if (!this._coordinates.length) {\n      return html`\n        <div class=\"container\">\n          <div class=\"info\">No state history found.</div>\n        </div>\n      `;\n    }\n\n    return html`\n      <hui-graph-base .coordinates=${this._coordinates}></hui-graph-base>\n    `;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated && this._config) {\n      this._subscribeHistory();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._unsubscribeHistory();\n  }\n\n  private _subscribeHistory() {\n    if (\n      !isComponentLoaded(this.hass!, \"history\") ||\n      this._subscribed ||\n      !this._config\n    ) {\n      return;\n    }\n    this._subscribed = subscribeHistoryStatesTimeWindow(\n      this.hass!,\n      (combinedHistory) => {\n        if (!this._subscribed || !this._config) {\n          // Message came in before we had a chance to unload\n          return;\n        }\n        this._coordinates =\n          coordinatesMinimalResponseCompressedState(\n            combinedHistory[this._config.entity],\n            this._config.hours_to_show!,\n            500,\n            this._config.detail!,\n            this._config.limits\n          ) || [];\n      },\n      this._config.hours_to_show!,\n      [this._config.entity]\n    ).catch((err) => {\n      this._subscribed = undefined;\n      this._error = err;\n    });\n    this._setRedrawTimer();\n  }\n\n  private _redrawGraph() {\n    if (this._coordinates) {\n      this._coordinates = [...this._coordinates];\n    }\n  }\n\n  private _setRedrawTimer() {\n    // redraw the graph every minute to update the time axis\n    clearInterval(this._interval);\n    this._interval = window.setInterval(\n      () => this._redrawGraph(),\n      this._config!.hours_to_show! > 24 ? HOUR : MINUTE\n    );\n  }\n\n  private _unsubscribeHistory() {\n    clearInterval(this._interval);\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub?.());\n      this._subscribed = undefined;\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!this._config || !this.hass || !changedProps.has(\"_config\")) {\n      return;\n    }\n\n    const oldConfig = changedProps.get(\"_config\") as GraphHeaderFooterConfig;\n    if (\n      !oldConfig ||\n      !this._subscribed ||\n      oldConfig.entity !== this._config.entity\n    ) {\n      this._unsubscribeHistory();\n      this._subscribeHistory();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-circular-progress {\n        position: absolute;\n        top: calc(50% - 14px);\n      }\n      .container {\n        display: flex;\n        justify-content: center;\n        position: relative;\n        padding-bottom: 20%;\n      }\n      .info {\n        position: absolute;\n        top: calc(50% - 16px);\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-graph-header-footer\": HuiGraphHeaderFooter;\n  }\n}\n"],"names":[],"sourceRoot":""}