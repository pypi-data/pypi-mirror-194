{"version":3,"file":"becd9b45.js","mappings":";;AAmLA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-statistic-card-editor.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { any, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport {\n  getStatisticMetadata,\n  StatisticsMetaData,\n  statisticsMetaHasType,\n  StatisticType,\n} from \"../../../../data/recorder\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { StatisticCardConfig } from \"../../cards/types\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    unit: optional(string()),\n    stat_type: optional(string()),\n    period: optional(any()),\n    theme: optional(string()),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\nconst stat_types = [\"mean\", \"min\", \"max\", \"change\"] as const;\n\nconst statTypeMap: Record<(typeof stat_types)[number], StatisticType> = {\n  mean: \"mean\",\n  min: \"min\",\n  max: \"max\",\n  change: \"sum\",\n};\n\nconst periods = {\n  today: { calendar: { period: \"day\" } },\n  yesterday: { calendar: { period: \"day\", offset: -1 } },\n  this_week: { calendar: { period: \"week\" } },\n  last_week: { calendar: { period: \"week\", offset: -1 } },\n  this_month: { calendar: { period: \"month\" } },\n  last_month: { calendar: { period: \"month\", offset: -1 } },\n  this_year: { calendar: { period: \"year\" } },\n  last_year: { calendar: { period: \"year\", offset: -1 } },\n} as const;\n\n@customElement(\"hui-statistic-card-editor\")\nexport class HuiStatisticCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticCardConfig;\n\n  @state() private _metadata?: StatisticsMetaData;\n\n  public setConfig(config: StatisticCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._fetchMetadata();\n  }\n\n  firstUpdated() {\n    this._fetchMetadata().then(() => {\n      if (!this._config?.stat_type && this._config?.entity) {\n        fireEvent(this, \"config-changed\", {\n          config: {\n            ...this._config,\n            stat_type: this._metadata?.has_sum ? \"change\" : \"mean\",\n          },\n        });\n      }\n    });\n  }\n\n  private _data = memoizeOne((config: StatisticCardConfig) => {\n    if (!config || !config.period) {\n      return config;\n    }\n    for (const [periodKey, period] of Object.entries(periods)) {\n      if (deepEqual(period, config.period)) {\n        return { ...config, period: periodKey };\n      }\n    }\n    return config;\n  });\n\n  private _schema = memoizeOne(\n    (\n      selectedPeriodKey: string | undefined,\n      localize: LocalizeFunc,\n      metadata?: StatisticsMetaData\n    ) =>\n      [\n        { name: \"entity\", required: true, selector: { statistic: {} } },\n        {\n          name: \"stat_type\",\n          required: true,\n          selector: {\n            select: {\n              multiple: false,\n              options: stat_types.map((stat_type) => ({\n                value: stat_type,\n                label: localize(\n                  `ui.panel.lovelace.editor.card.statistic.stat_type_labels.${stat_type}`\n                ),\n                disabled:\n                  !metadata ||\n                  !statisticsMetaHasType(metadata, statTypeMap[stat_type]),\n              })),\n            },\n          },\n        },\n        {\n          name: \"period\",\n          required: true,\n          selector:\n            selectedPeriodKey &&\n            Object.keys(periods).includes(selectedPeriodKey)\n              ? {\n                  select: {\n                    multiple: false,\n                    options: Object.keys(periods).map((periodKey) => ({\n                      value: periodKey,\n                      label:\n                        localize(\n                          `ui.panel.lovelace.editor.card.statistic.periods.${periodKey}`\n                        ) || periodKey,\n                    })),\n                  },\n                }\n              : { object: {} },\n        },\n        {\n          type: \"grid\",\n          name: \"\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            {\n              name: \"icon\",\n              selector: {\n                icon: {},\n              },\n              context: {\n                icon_entity: \"entity\",\n              },\n            },\n            { name: \"unit\", selector: { text: {} } },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const data = this._data(this._config);\n\n    const schema = this._schema(\n      typeof data.period === \"string\" ? data.period : undefined,\n      this.hass.localize,\n      this._metadata\n    );\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private async _fetchMetadata() {\n    if (!this.hass || !this._config) {\n      return;\n    }\n    this._metadata = (\n      await getStatisticMetadata(this.hass, [this._config.entity])\n    )[0];\n  }\n\n  private async _valueChanged(ev: CustomEvent) {\n    const config = ev.detail.value as StatisticCardConfig;\n    Object.keys(config).forEach((k) => config[k] === \"\" && delete config[k]);\n\n    if (typeof config.period === \"string\") {\n      const period = periods[config.period];\n      if (period) {\n        config.period = period;\n      }\n    }\n\n    if (\n      config.stat_type &&\n      config.entity &&\n      config.entity !== this._metadata?.statistic_id\n    ) {\n      const metadata = (\n        await getStatisticMetadata(this.hass!, [config.entity])\n      )?.[0];\n      if (metadata && !metadata.has_sum && config.stat_type === \"change\") {\n        config.stat_type = \"mean\";\n      }\n      if (metadata && !metadata.has_mean && config.stat_type !== \"change\") {\n        config.stat_type = \"change\";\n      }\n    }\n\n    if (!config.stat_type && config.entity) {\n      const metadata = (\n        await getStatisticMetadata(this.hass!, [config.entity])\n      )?.[0];\n      config.stat_type = metadata?.has_sum ? \"change\" : \"mean\";\n    }\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    if (schema.name === \"period\") {\n      return this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.statistic.period\"\n      );\n    }\n\n    if (schema.name === \"theme\") {\n      return `${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.generic.theme\"\n      )} (${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.config.optional\"\n      )})`;\n    }\n\n    return this.hass!.localize(\n      `ui.panel.lovelace.editor.card.generic.${schema.name}`\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistic-card-editor\": HuiStatisticCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}