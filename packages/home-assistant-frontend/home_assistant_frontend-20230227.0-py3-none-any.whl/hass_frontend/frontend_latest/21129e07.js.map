{"version":3,"file":"21129e07.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;;;ACzEA;;;AAGA;;;;;AAYA;;AAIA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAKA;AACA;;AAEA;;AAIA;;;AAIA;AACA;;AAEA;;;AAUA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/lovelace/resources/dialog-lovelace-resource-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport { LovelaceResourcesMutableParams } from \"../../../../data/lovelace\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceResourceDetailsDialogParams } from \"./show-dialog-lovelace-resource-detail\";\n\nconst detectResourceType = (url?: string) => {\n  if (!url) {\n    return undefined;\n  }\n  const ext = url.split(\".\").pop() || \"\";\n\n  if (ext === \"css\") {\n    return \"css\";\n  }\n\n  if (ext === \"js\") {\n    return \"module\";\n  }\n\n  return undefined;\n};\n\n@customElement(\"dialog-lovelace-resource-detail\")\nexport class DialogLovelaceResourceDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: LovelaceResourceDetailsDialogParams;\n\n  @state() private _data?: Partial<LovelaceResourcesMutableParams>;\n\n  @state() private _error?: Record<string, string>;\n\n  @state() private _submitting = false;\n\n  public showDialog(params: LovelaceResourceDetailsDialogParams): void {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.resource) {\n      this._data = {\n        url: this._params.resource.url,\n        res_type: this._params.resource.type,\n      };\n    } else {\n      this._data = {\n        url: \"\",\n      };\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const urlInvalid = !this._data?.url || this._data.url.trim() === \"\";\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.resource\n            ? this._params.resource.url\n            : this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.new_resource\"\n              )\n        )}\n      >\n        <div>\n          <ha-alert\n            alert-type=\"warning\"\n            .title=${this.hass!.localize(\n              \"ui.panel.config.lovelace.resources.detail.warning_header\"\n            )}\n          >\n            ${this.hass!.localize(\n              \"ui.panel.config.lovelace.resources.detail.warning_text\"\n            )}\n          </ha-alert>\n\n          <ha-form\n            .schema=${this._schema(this._data)}\n            .data=${this._data}\n            .hass=${this.hass}\n            .error=${this._error}\n            .computeLabel=${this._computeLabel}\n            @value-changed=${this._valueChanged}\n          ></ha-form>\n        </div>\n        ${this._params.resource\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteResource}\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.config.lovelace.resources.detail.delete\"\n                )}\n              </mwc-button>\n            `\n          : html``}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateResource}\n          .disabled=${urlInvalid || !this._data?.res_type || this._submitting}\n        >\n          ${this._params.resource\n            ? this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.update\"\n              )\n            : this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.create\"\n              )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _schema = memoizeOne(\n    (data) =>\n      [\n        {\n          name: \"url\",\n          required: true,\n          selector: {\n            text: {},\n          },\n        },\n        {\n          name: \"res_type\",\n          required: true,\n          selector: {\n            select: {\n              options: [\n                {\n                  value: \"module\",\n                  label: this.hass!.localize(\n                    \"ui.panel.config.lovelace.resources.types.module\"\n                  ),\n                },\n                {\n                  value: \"css\",\n                  label: this.hass!.localize(\n                    \"ui.panel.config.lovelace.resources.types.css\"\n                  ),\n                },\n                ...(data.type === \"js\"\n                  ? ([\n                      {\n                        value: \"js\",\n                        label: this.hass!.localize(\n                          \"ui.panel.config.lovelace.resources.types.js\"\n                        ),\n                      },\n                    ] as const)\n                  : []),\n                ...(data.type === \"html\"\n                  ? ([\n                      {\n                        value: \"html\",\n                        label: this.hass!.localize(\n                          \"ui.panel.config.lovelace.resources.types.html\"\n                        ),\n                      },\n                    ] as const)\n                  : []),\n              ],\n            },\n          },\n        },\n      ] as const\n  );\n\n  private _computeLabel = (\n    entry: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string =>\n    this.hass.localize(\n      `ui.panel.config.lovelace.resources.detail.${\n        entry.name === \"res_type\" ? \"type\" : entry.name\n      }`\n    );\n\n  private _valueChanged(ev: CustomEvent) {\n    this._data = ev.detail.value;\n    if (!this._data!.res_type) {\n      const type = detectResourceType(this._data!.url);\n      if (!type) {\n        return;\n      }\n      this._data = {\n        ...this._data,\n        res_type: type,\n      };\n    }\n  }\n\n  private async _updateResource() {\n    if (!this._data?.res_type) {\n      return;\n    }\n\n    this._submitting = true;\n    try {\n      if (this._params!.resource) {\n        await this._params!.updateResource(this._data!);\n      } else {\n        await this._params!.createResource(\n          this._data! as LovelaceResourcesMutableParams\n        );\n      }\n      this._params = undefined;\n    } catch (err: any) {\n      this._error = { base: err?.message || \"Unknown error\" };\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteResource() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeResource()) {\n        this.closeDialog();\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-lovelace-resource-detail\": DialogLovelaceResourceDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}