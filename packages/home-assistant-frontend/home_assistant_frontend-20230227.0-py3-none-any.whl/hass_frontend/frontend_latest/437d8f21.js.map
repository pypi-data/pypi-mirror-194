{"version":3,"file":"437d8f21.js","mappings":";;AA2DA;AACA;AACA;AACA;AACA;;AATA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-area-card-editor.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { AreaCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    area: optional(string()),\n    navigation_path: optional(string()),\n    theme: optional(string()),\n    show_camera: optional(boolean()),\n  })\n);\n\nconst SCHEMA = [\n  { name: \"area\", selector: { area: {} } },\n  { name: \"show_camera\", required: false, selector: { boolean: {} } },\n  {\n    name: \"\",\n    type: \"grid\",\n    schema: [\n      {\n        name: \"navigation_path\",\n        required: false,\n        selector: { navigation: {} },\n      },\n      { name: \"theme\", required: false, selector: { theme: {} } },\n    ],\n  },\n] as const;\n\n@customElement(\"hui-area-card-editor\")\nexport class HuiAreaCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AreaCardConfig;\n\n  public setConfig(config: AreaCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this._config}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"area\":\n        return this.hass!.localize(\"ui.panel.lovelace.editor.card.area.name\");\n      case \"navigation_path\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.action-editor.navigation_path\"\n        );\n    }\n    return this.hass!.localize(\n      `ui.panel.lovelace.editor.card.area.${schema.name}`\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-area-card-editor\": HuiAreaCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}