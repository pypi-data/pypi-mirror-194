{"version":3,"file":"42e3f7a0.js","mappings":";AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;ACzEA;AACA;;;AA4BA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAIA;;;;;;;;;;AAuFA;;;;;;;;;;;;;;;;;;;;AC5KA;ACoEA;AACA;AACA;;;;AAQA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;AAGA;;;;AAuBA;;;;AAMA;;AAMA;;AAEA;AACA;;;;;;AAMA;;;;AASA;;;AAGA;;AAGA;;;AAQA;;AAIA;;;AAKA;AACA;;;AAGA;AACA;;AAaA;;AAGA;;;;;;;;;;;;;;;;;;;;AA4EA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/helpers/dialog-helper-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport {\n  ComboBoxDataProviderCallback,\n  ComboBoxDataProviderParams,\n} from \"@vaadin/combo-box/vaadin-combo-box-light\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\nimport \"./ha-icon\";\n\ntype IconItem = {\n  icon: string;\n  parts: Set<string>;\n  keywords: string[];\n};\n\ntype RankedIcon = {\n  icon: string;\n  rank: number;\n};\n\nlet ICONS: IconItem[] = [];\nlet ICONS_LOADED = false;\n\nconst loadIcons = async () => {\n  ICONS_LOADED = true;\n\n  const iconList = await import(\"../../build/mdi/iconList.json\");\n  ICONS = iconList.default.map((icon) => ({\n    icon: `mdi:${icon.name}`,\n    parts: new Set(icon.name.split(\"-\")),\n    keywords: icon.keywords,\n  }));\n\n  const customIconLoads: Promise<IconItem[]>[] = [];\n  Object.keys(customIcons).forEach((iconSet) => {\n    customIconLoads.push(loadCustomIconItems(iconSet));\n  });\n  (await Promise.all(customIconLoads)).forEach((customIconItems) => {\n    ICONS.push(...customIconItems);\n  });\n};\n\nconst loadCustomIconItems = async (iconsetPrefix: string) => {\n  try {\n    const getIconList = customIcons[iconsetPrefix].getIconList;\n    if (typeof getIconList !== \"function\") {\n      return [];\n    }\n    const iconList = await getIconList();\n    const customIconItems = iconList.map((icon) => ({\n      icon: `${iconsetPrefix}:${icon.name}`,\n      parts: new Set(icon.name.split(\"-\")),\n      keywords: icon.keywords ?? [],\n    }));\n    return customIconItems;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    return [];\n  }\n};\n\nconst rowRenderer: ComboBoxLitRenderer<IconItem | RankedIcon> = (item) =>\n  html`<mwc-list-item graphic=\"avatar\">\n    <ha-icon .icon=${item.icon} slot=\"graphic\"></ha-icon>\n    ${item.icon}\n  </mwc-list-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .dataProvider=${ICONS_LOADED ? this._iconProvider : undefined}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : this.fallbackPath\n          ? html`<ha-svg-icon\n              .path=${this.fallbackPath}\n              slot=\"icon\"\n            ></ha-svg-icon>`\n          : \"\"}\n      </ha-combo-box>\n    `;\n  }\n\n  // Filter can take a significant chunk of frame (up to 3-5 ms)\n  private _filterIcons = memoizeOne(\n    (filter: string, iconItems: IconItem[] = ICONS) => {\n      if (!filter) {\n        return iconItems;\n      }\n\n      const filteredItems: RankedIcon[] = [];\n      const addIcon = (icon: string, rank: number) =>\n        filteredItems.push({ icon, rank });\n\n      // Filter and rank such that exact matches rank higher, and prefer icon name matches over keywords\n      for (const item of iconItems) {\n        if (item.parts.has(filter)) {\n          addIcon(item.icon, 1);\n        } else if (item.keywords.includes(filter)) {\n          addIcon(item.icon, 2);\n        } else if (item.icon.includes(filter)) {\n          addIcon(item.icon, 3);\n        } else if (item.keywords.some((word) => word.includes(filter))) {\n          addIcon(item.icon, 4);\n        }\n      }\n\n      // Allow preview for custom icon not in list\n      if (filteredItems.length === 0) {\n        addIcon(filter, 0);\n      }\n\n      return filteredItems.sort((itemA, itemB) => itemA.rank - itemB.rank);\n    }\n  );\n\n  private _iconProvider = (\n    params: ComboBoxDataProviderParams,\n    callback: ComboBoxDataProviderCallback<IconItem | RankedIcon>\n  ) => {\n    const filteredItems = this._filterIcons(params.filter.toLowerCase(), ICONS);\n    const iStart = params.page * params.pageSize;\n    const iEnd = iStart + params.pageSize;\n    callback(filteredItems.slice(iStart, iEnd), filteredItems.length);\n  };\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    const opened = ev.detail.value;\n    if (opened && !ICONS_LOADED) {\n      await loadIcons();\n      this.requestUpdate();\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        color: var(--primary-text-color);\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item-base\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { dynamicElement } from \"../../../common/dom/dynamic-element-directive\";\nimport { shouldHandleRequestSelectedEvent } from \"../../../common/mwc/handle-request-selected-event\";\nimport \"../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-list-item\";\nimport { getConfigFlowHandlers } from \"../../../data/config_flow\";\nimport { createCounter } from \"../../../data/counter\";\nimport { createInputBoolean } from \"../../../data/input_boolean\";\nimport { createInputButton } from \"../../../data/input_button\";\nimport { createInputDateTime } from \"../../../data/input_datetime\";\nimport { createInputNumber } from \"../../../data/input_number\";\nimport { createInputSelect } from \"../../../data/input_select\";\nimport { createInputText } from \"../../../data/input_text\";\nimport { domainToName } from \"../../../data/integration\";\nimport { createSchedule } from \"../../../data/schedule\";\nimport { createTimer } from \"../../../data/timer\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { Helper, HelperDomain } from \"./const\";\nimport \"./forms/ha-counter-form\";\nimport \"./forms/ha-input_boolean-form\";\nimport \"./forms/ha-input_button-form\";\nimport \"./forms/ha-input_datetime-form\";\nimport \"./forms/ha-input_number-form\";\nimport \"./forms/ha-input_select-form\";\nimport \"./forms/ha-input_text-form\";\nimport \"./forms/ha-schedule-form\";\nimport \"./forms/ha-timer-form\";\nimport type { ShowDialogHelperDetailParams } from \"./show-dialog-helper-detail\";\n\ntype HelperCreators = {\n  [domain in HelperDomain]: (\n    hass: HomeAssistant,\n    // Not properly typed because there is currently a mismatch for this._item between:\n    // 1. Type passed to form should be Helper\n    // 2. Type received by creator should be MutableParams version\n    // The two are not compatible.\n    params: any\n  ) => Promise<Helper>;\n};\n\nconst HELPERS: HelperCreators = {\n  input_boolean: createInputBoolean,\n  input_button: createInputButton,\n  input_text: createInputText,\n  input_number: createInputNumber,\n  input_datetime: createInputDateTime,\n  input_select: createInputSelect,\n  counter: createCounter,\n  timer: createTimer,\n  schedule: createSchedule,\n};\n\n@customElement(\"dialog-helper-detail\")\nexport class DialogHelperDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _item?: Helper;\n\n  @state() private _opened = false;\n\n  @state() private _domain?: HelperDomain;\n\n  @state() private _error?: string;\n\n  @state() private _submitting = false;\n\n  @query(\".form\") private _form?: HTMLDivElement;\n\n  @state() private _helperFlows?: string[];\n\n  private _params?: ShowDialogHelperDetailParams;\n\n  public async showDialog(params: ShowDialogHelperDetailParams): Promise<void> {\n    this._params = params;\n    this._domain = params.domain;\n    this._item = undefined;\n    this._opened = true;\n    await this.updateComplete;\n    Promise.all([\n      getConfigFlowHandlers(this.hass, [\"helper\"]),\n      // Ensure the titles are loaded before we render the flows.\n      this.hass.loadBackendTranslation(\"title\", undefined, true),\n    ]).then(([flows]) => {\n      this._helperFlows = flows;\n    });\n  }\n\n  public closeDialog(): void {\n    this._opened = false;\n    this._error = undefined;\n    this._domain = undefined;\n    this._params = undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._opened) {\n      return html``;\n    }\n    let content: TemplateResult;\n\n    if (this._domain) {\n      content = html`\n        <div class=\"form\" @value-changed=${this._valueChanged}>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${dynamicElement(`ha-${this._domain}-form`, {\n            hass: this.hass,\n            item: this._item,\n            new: true,\n          })}\n        </div>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._createItem}\n          .disabled=${this._submitting}\n        >\n          ${this.hass!.localize(\"ui.panel.config.helpers.dialog.create\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this._goBack}\n          .disabled=${this._submitting}\n        >\n          ${this.hass!.localize(\"ui.common.back\")}\n        </mwc-button>\n      `;\n    } else if (this._helperFlows === undefined) {\n      content = html`<ha-circular-progress active></ha-circular-progress>`;\n    } else {\n      const items: [string, string][] = [];\n\n      for (const helper of Object.keys(HELPERS) as (keyof typeof HELPERS)[]) {\n        items.push([\n          helper,\n          this.hass.localize(`ui.panel.config.helpers.types.${helper}`) ||\n            helper,\n        ]);\n      }\n\n      for (const domain of this._helperFlows) {\n        items.push([domain, domainToName(this.hass.localize, domain)]);\n      }\n\n      items.sort((a, b) => a[1].localeCompare(b[1]));\n\n      content = html`\n        <mwc-list\n          innerRole=\"listbox\"\n          itemRoles=\"option\"\n          innerAriaLabel=${this.hass.localize(\n            \"ui.panel.config.helpers.dialog.create_helper\"\n          )}\n          rootTabbable\n          dialogInitialFocus\n        >\n          ${items.map(([domain, label]) => {\n            // Only OG helpers need to be loaded prior adding one\n            const isLoaded =\n              !(domain in HELPERS) || isComponentLoaded(this.hass, domain);\n            return html`\n              <ha-list-item\n                .disabled=${!isLoaded}\n                hasmeta\n                .domain=${domain}\n                @request-selected=${this._domainPicked}\n                graphic=\"icon\"\n              >\n                <img\n                  slot=\"graphic\"\n                  loading=\"lazy\"\n                  src=${brandsUrl({\n                    domain,\n                    type: \"icon\",\n                    useFallback: true,\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                  aria-hidden=\"true\"\n                  referrerpolicy=\"no-referrer\"\n                />\n                <span class=\"item-text\"> ${label} </span>\n                <ha-icon-next slot=\"meta\"></ha-icon-next>\n              </ha-list-item>\n              ${!isLoaded\n                ? html`\n                    <paper-tooltip animation-delay=\"0\"\n                      >${this.hass.localize(\n                        \"ui.dialogs.helper_settings.platform_not_loaded\",\n                        \"platform\",\n                        domain\n                      )}</paper-tooltip\n                    >\n                  `\n                : \"\"}\n            `;\n          })}\n        </mwc-list>\n      `;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        class=${classMap({ \"button-left\": !this._domain })}\n        scrimClickAction\n        escapeKeyAction\n        .hideActions=${!this._domain}\n        .heading=${createCloseHeading(\n          this.hass,\n          this._domain\n            ? this.hass.localize(\n                \"ui.panel.config.helpers.dialog.create_platform\",\n                \"platform\",\n                this.hass.localize(\n                  `ui.panel.config.helpers.types.${this._domain}`\n                ) || this._domain\n              )\n            : this.hass.localize(\"ui.panel.config.helpers.dialog.create_helper\")\n        )}\n      >\n        ${content}\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    this._item = ev.detail.value;\n  }\n\n  private async _createItem(): Promise<void> {\n    if (!this._domain || !this._item) {\n      return;\n    }\n    this._submitting = true;\n    this._error = \"\";\n    try {\n      await HELPERS[this._domain](this.hass, this._item);\n      this.closeDialog();\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _domainPicked(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    const domain = (ev.currentTarget! as any).domain;\n\n    if (domain in HELPERS) {\n      this._domain = domain;\n      this._focusForm();\n    } else {\n      showConfigFlowDialog(this, {\n        startFlowHandler: domain,\n        dialogClosedCallback: this._params!.dialogClosedCallback,\n      });\n      this.closeDialog();\n    }\n  }\n\n  private async _focusForm(): Promise<void> {\n    await this.updateComplete;\n    (this._form?.lastElementChild as HTMLElement).focus();\n  }\n\n  private _goBack() {\n    this._domain = undefined;\n    this._item = undefined;\n    this._error = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog.button-left {\n          --justify-action-buttons: flex-start;\n        }\n        ha-dialog {\n          --dialog-content-padding: 0;\n          --dialog-scroll-divider-color: transparent;\n          --mdc-dialog-max-height: 60vh;\n        }\n        @media all and (min-width: 550px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 500px;\n          }\n        }\n        ha-icon-next {\n          width: 24px;\n        }\n        .form {\n          padding: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-helper-detail\": DialogHelperDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}