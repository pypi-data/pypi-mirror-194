Metadata-Version: 2.1
Name: nwbwidgets
Version: 0.10.2
Summary: This is nwbwidgets, widgets for viewing the contents of a NWB-file in Jupyter Notebooks using ipywidgets.
Home-page: https://github.com/NeurodataWithoutBorders/nwb-jupyter-widgets
Author: Ben Dichter
Author-email: ben.dichter@catalystneuro.com
License: BSD
Keywords: jupyter,hdf5,notebook,nwb
Platform: UNKNOWN
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: Jupyter
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: matplotlib
Requires-Dist: scikit-image
Requires-Dist: pynwb
Requires-Dist: ipympl
Requires-Dist: ipydatagrid
Requires-Dist: ipyvolume (>=0.6.0a10)
Requires-Dist: ipywidgets (>=8.0.0)
Requires-Dist: plotly
Requires-Dist: tqdm (>=4.36.0)
Requires-Dist: zarr
Requires-Dist: tifffile
Requires-Dist: ndx-spectrum
Requires-Dist: ndx-icephys-meta
Requires-Dist: ndx-grayscalevolume
Requires-Dist: trimesh
Requires-Dist: dandi
Requires-Dist: importlib-metadata (<5.0)
Requires-Dist: fsspec
Requires-Dist: requests
Requires-Dist: aiohttp
Requires-Dist: ipydatawidgets (==4.3.2)
Provides-Extra: full
Requires-Dist: ccfwidget ; extra == 'full'
Requires-Dist: aiohttp ; extra == 'full'
Requires-Dist: nilearn ; extra == 'full'
Requires-Dist: trimesh ; extra == 'full'
Provides-Extra: human_electrodes
Requires-Dist: nilearn ; extra == 'human_electrodes'
Requires-Dist: trimesh ; extra == 'human_electrodes'
Provides-Extra: mouse_electrodes
Requires-Dist: ccfwidget ; extra == 'mouse_electrodes'
Requires-Dist: aiohttp ; extra == 'mouse_electrodes'

# NWB Widgets
A library of widgets for visualization NWB data in a Jupyter notebook (or lab). The widgets allow you to navigate through the hierarchical structure of the NWB file and visualize specific data elements. It is designed to work out-of-the-box with NWB 2.0 files and to be easy to extend.

[![PyPI version](https://badge.fury.io/py/nwbwidgets.svg)](https://badge.fury.io/py/nwbwidgets)
[![codecov](https://codecov.io/gh/NeurodataWithoutBorders/nwbwidgets/branch/master/graph/badge.svg)](https://codecov.io/gh/NeurodataWithoutBorders/nwbwidgets)
[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)
[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/NeurodataWithoutBorders/nwb-jupyter-widgets/master?filepath=examples%2FNWBWidgets-modality-demos.ipynb)



## Installation

`nwbwidgets` requires Python >= 3.7.

The latest published version can be installed by running:

```bash
pip install nwbwidgets
```

Note that there are some optional dependencies required for some widgets.
If an NWB data file contains a data type that requires additional dependencies,
you will see a list of extra modules needed for that specific widget.
All other widgets in the file will still work.

## Usage
```python
from pynwb import NWBHDF5IO
from nwbwidgets import nwb2widget

io = NWBHDF5IO('path/to/file.nwb', mode='r')
nwb = io.read()

nwb2widget(nwb)
```

## Demo
![](https://drive.google.com/uc?export=download&id=1JtI2KtT8MielIMvvtgxRzFfBTdc41LiE)

## How it works
All visualizations are controlled by the dictionary `neurodata_vis_spec`. The keys of this dictionary are pynwb neurodata types, and the values are functions that take as input that neurodata_type and output a visualization. The visualizations may be of type `Widget` or `matplotlib.Figure`. When you enter a neurodata_type instance into `nwb2widget`, it searches the `neurodata_vis_spec` for that instance's neurodata_type, progressing backwards through the parent classes of the neurodata_type to find the most specific neurodata_type in `neurodata_vis_spec`. Some of these types are containers for other types, and create accordian UI elements for its contents, which are then passed into the `neurodata_vis_spec` and rendered accordingly.

Instead of supplying a function for the value of the `neurodata_vis_spec` dict, you may provide a `dict` or `OrderedDict` with string keys and function values. In this case, a tab structure is rendered, with each of the key/value pairs as an individual tab. All accordian and tab structures are rendered lazily- they are only called with that tab is selected. As a result, you can provide may tabs for a single data type without a worry. They will only be run if they are selected.

## Extending
To extend NWBWidgets, all you need to a function that takes as input an instance of a specific neurodata_type class, and outputs a matplotlib figure or a jupyter widget.

## Used in
* [giocomo-lab-to-nwb](https://github.com/ben-dichter-consulting/giocomo-lab-to-nwb)
* [buffalo-lab-data-to-nwb](https://github.com/ben-dichter-consulting/buffalo-lab-data-to-nwb)
* [axel-lab-to-nwb](https://github.com/ben-dichter-consulting/axel-lab-to-nwb)


