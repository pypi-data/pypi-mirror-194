# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['starlette_jhalog']

package_data = \
{'': ['*']}

install_requires = \
['jhalog', 'starlette']

setup_kwargs = {
    'name': 'starlette-jhalog',
    'version': '0.1.4',
    'description': 'Jhalog (JSON HTTP Access Log) middleware for Starlette/FastAPI',
    'long_description': '![Tests](https://github.com/JGoutin/starlette-jhalog/workflows/tests/badge.svg)\n[![codecov](https://codecov.io/gh/JGoutin/starlette-jhalog/branch/main/graph/badge.svg)](https://codecov.io/gh/JGoutin/starlette-jhalog)\n[![PyPI](https://img.shields.io/pypi/v/starlette-jhalog.svg)](https://pypi.org/project/starlette-jhalog)\n\n# Jhalog (JSON HTTP Access Log) - Starlette/FastAPI middleware\n\nStarlette/FastAPI middleware to add [Jhalog](https://github.com/JGoutin/jhalog-spec)\n(JSON HTTP Access Logs) access log on each request.\n\nThis middleware is intended to be easy to use and powerful.\n\nEasy to use:\n* Integration boilerplate reduced to the minimum.\n* Automatically handle common tasks for you:\n  * Automatic request ID generation (and `X-Request-ID` headers).\n  * Autofill common log event fields like `client_user_agent` and `client_ip`.\n  * Request timeout.\n  * Unhandled exception handler with proper return code.\n\nPowerful:\n* Easy modification the log event fields from anywhere in the route code.\n* Support all logging backends from \n  [Jhalog-Python](https://github.com/JGoutin/jhalog-python) \n  (Like Python standard library logging, AWS Cloudwatch Logs, ...)\n* Log events flushing is done in background, there is almost no extra overhead on the \n  requests itself.\n\n## Usage\n\n### Installation\n\nThe middleware library is available on PyPI and can be installed with pip as follows:\n\n```bash\npip install starlette_jhalog\n\n# Eventually, also install the required backend with the Jhalog library\npip install jhalog[cloudwatch_logs]\n```\n\n### Integration with the Starlette/FastAPI application\n\nTo integrate the middleware, just initialize the `starlette_jhalog.JhalogMiddleware`\nafter you Starlette/FastAPI application creation and all other event handlers and \nmiddlewares registration:\n\n```python\nimport fastapi\nimport starlette_jhalog\n\napp = fastapi.FastAPI()\n\n@app.on_event("startup")\nasync def startup():\n    """Initialize database connection."""\n    # [...]\n\n@app.on_event("shutdown")\nasync def shutdown():\n    """Terminate database connection."""\n    # [...]\n\n# Middleware creation. Require to be initialized after all "@app.on_event()"\nstarlette_jhalog.JhalogMiddleware(app)\n```\n\n> **Note:**\n> The order is important because, the middleware register itself with some event\n> handlers to the application and ensure that:\n> * The logging backend is started before all startup event handlers.\n> * The `startup` log event is emitted after all startup event handlers.\n> * The `shutdown` log event is emitted after all shutdown event handlers.\n> * The logging backend is properly terminated and all log event flushed before \n>  terminating the application.\n\nThe middleware is ready and the logging is enabled on all requests.\n\n#### Middleware parameters\n\nIn addition to the Starlette/FastAPI Application, the middleware supports various \noptional parameters:\n\n* `backend`: By default, the `logging` standard library is used as backend, but it is\n  possible to use any backend supported by the Jhalog library.\n* `forward_request_id`: If set to `True` (The default), use the request `X-request-ID`\n  header value as `id` log event field is any. Else generate a `id` normally.\n  Disabling the request ID forwarding can be helpful on public servers to keep control\n  on the value.\n* `ignore_paths`: Paths to ignore in logs. Event logs are not emitted at all for\n  these paths. This can be used, for instance, to ignore health check from a load \n  balancer and reduce the total of emitted log events (That may have cost impact in \n  Cloud environments).\n* `ip_addresses_allowed`: If set to `True`, allow IP addresses in log events. This \n  allows the middleware to set the `client_ip` field. Default to `False` for privacy \n  compliance.\n* `request_timeout`: Request timeout in seconds. 0 to disable timeout.\n  Default to 50 seconds.\n* `server_version`: Value to set to the `server_version` field in the startup log event.\n  The value should be the version of your application.\n\nIn addition, all parameters from the `jhalog.AsyncLogger` class are supported, including\nbackend specific parameters.\n\n### Log events details\n\n#### Access log event\n\nAutomatic generated for each request, with following fields:\n\n * `client_ip`: The client IP address. Added only if `ip_addresses_allowed=True` is\n   passed on middleware creation. If the [Uvicorn](https://www.uvicorn.org)\n   `uvicorn.middleware.proxy_headers.ProxyHeadersMiddleware` is installed the \n   `X-Forwarded-For` request header will be\n   properly handled.\n * `client_user_agent`: User agent from the request `User-Agent` header.\n * `date`: Date and time of the request (This is the time when the request is received,\n   not the date when the response is sent).\n * `error_detail`: In case of unhandled exception during the request, the `error_detail`\n   field is automatically set to the exception traceback.\n * `execution_time`: Execution time in seconds between the time when the request is \n   received and the time when the response is sent.\n * `id`: Generated for each request. Always added as `X-Request-ID` response \n   header. If `forward_request_id=True` (The default) is passed on middleware creation,\n   use the value from the `X-Request-ID` request header if any instead of generating\n   a new value.\n * `level`: Log event level. `info` if `status_code` < 400, else `warning` \n   if `status_code` < 500 else `error`.\n   Set to `critical` in case of unhandled exception.\n * `method`: Request HTTP method.\n * `path`: Request path.\n * `server_id`: Server ID, generated by the logging backend.\n * `status_code`: The response status code.\n * `type`: Log event type, always `access`.\n\n##### Request timeout\n\nThis middleware include a request timeout.\n\nThis timeout is important to ensure the log event is always properly emitted in the case\nthere is a load balancer or reverse proxy before the server. If the client reach its\ntimeout before the server Starlette fully cancel the request and don\'t let the\nmiddleware emit a log event.\n\nAlso, it is always a good practice to have a timeout on a web server.\n\nIf the timeout is reached, a `504 Gateway Timeout` response is returned by the \napplication.\n\nThe default value for the timeout is 50s (To be just before the default 60s values of \nmost load balancer and reverse proxies). It is possible to define or disable the \ntimeout on middleware creation using the `request_timeout` parameter.\n\n##### Modifying access log event fields from routes\n\nIt is possible to modify the log event from anywhere inside the route code using the\n`jhalog.LogEvent `object:\n\n```python\nimport fastapi\nfrom jhalog import LogEvent\n\napp = fastapi.FastAPI()\n\n@app.get("/")\ndef read_root():\n\n    # Getting the access log event from context and using it\n    event = LogEvent.from_context()\n    event["my_custom_field"] = "hello world"\n    event.created.append("hello")\n    \n    # Directly set some fields to the access log event:\n    LogEvent.set_to_context(my_custom_field="hello world", my_other_field="other")\n    \n    # Directly get a value from the access log event\n    request_id = LogEvent.get_from_context("id")\n    \n    return {"Hello": "World"}\n```\n\nThis library also provides a `starlette.sexceptions.HTTPException` subclass to set\nthe `error_detail` field directly when raising exceptions:\n\n```python\nimport fastapi\nfrom starlette.status import HTTP_401_UNAUTHORIZED\nfrom starlette_jhalog import HTTPException\n\nimport my_app\n\napp = fastapi.FastAPI()\n\n@app.get("/auth")\ndef authenticate(user: str, password: str):\n\n    if not my_app.is_password_valid(user, password):\n        # Return a "401 Unautorized" response to the client without detail\n        # (This is a common security practice)\n        # But, store the error reason in the "error_detail" access log event field. \n        raise HTTPException(\n            HTTP_401_UNAUTHORIZED,\n            error_detail=f"Invalid password for user: {user}"\n        )\n\n    return {"Hello": "World"}\n```\n\n##### Error handling and status code\n\nIn case of unhandled exception during the request, this middleware use the \nJhalog-Python handler to determinate the best HTTP code to return.\n\nFor instance, timeout errors (Including the request timeout from this middleware) will\nautomatically return `504 Gateway Timeout`.\n\nDepending on the currently used backend, the handler may detect some other cases and\nreturns errors like `503 Unavailable` or `429 Too Many Requests` (See the backend\ndetails in Jhalog-Python documentation for more information).\n\nAny other case will return `500 Internal Server Error` as normal.\n\nIn any case the `error_detail` field is automatically set to the exception traceback, \nand the `level` field set to `critical`.\n\n#### Startup log event\n\nGenerated on server startup (Once the Starlette/FastAPI application is fully\ninitialized, including startup event handlers), with the following fields:\n\n* `date`: Date and time of the event.\n* `level`: Log event level, always `info`.\n* `os_uptime`: Time between the host OS start and the process creation.\n* `server_id`: Server ID, generated by the logging backend.\n* `server_uptime`: Time between the server process creation and the end of the \n  Starlette/FastAPI application initialization.\n* `server_version`: Value passed using the `server_version` parameter on middleware\n  creation.\n * `type`: Log event type, always `startup`.\n\n#### Shutdown log event\n\nGenerated on server shutdown (Once the Starlette/FastAPI application is fully\nterminated, including shutdown event handlers), with the following fields:\n\n* `date`: Date and time of the event.\n* `level`: Log event level, always `info`.\n* `server_id`: Server ID, generated by the logging backend.\n* `server_uptime`: Time between the server process creation and the end of the \n  Starlette/FastAPI application termination.\n * `type`: Log event type, always `shutdown`.\n',
    'author': 'JGoutin',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/JGoutin/starlette-jhalog',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
