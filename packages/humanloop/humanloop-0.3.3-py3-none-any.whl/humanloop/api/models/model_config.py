import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class CaseInsensitiveEnum(Enum):
    @classmethod
    def _missing_(cls, value):
        for member in cls:
            if member.value.lower() == value.lower():
                return member


class ModelProvider(str, CaseInsensitiveEnum):
    """Supported model providers."""

    openai = "openai"
    mock = "mock"


class ModelEndpoint(str, CaseInsensitiveEnum):
    """Supported model provider endpoints."""

    complete = "complete"
    edit = "edit"


class ModelConfig(BaseModel):
    """
    Core ModelConfig request model.
    Following closely: https://beta.openai.com/docs/api-reference/completions/create
    """

    provider: Optional[ModelProvider] = Field(
        title="Model provider",
        description="The company providing the underlying model service.",
        default=ModelProvider.openai,
    )
    endpoint: Optional[ModelEndpoint] = Field(
        title="Provider endpoint",
        description="Which of the providers model endpoints to use. "
        "For example, 'complete' or 'edit'.",
        default=ModelEndpoint.complete,
    )
    model: str = Field(
        title="Model instance used",
        description="What model instance to use for the generation. E.g. 'text-davinci-003'.",
    )
    prompt_template: str = Field(
        title="Prompt template",
        description="Prompt template that will take your specified inputs to form "
        "your final request to the provider model. "
        "NB: Input variables within the prompt template should be specified "
        "with syntax: {{INPUT_NAME}}.",
    )
    temperature: Optional[float] = Field(
        title="Sampling temperature",
        description="What sampling temperature to use when making a generation. "
        "Higher values means the model will be more creative.",
        default=1,
    )
    max_tokens: Optional[int] = Field(
        title="Maximum tokens",
        description="The maximum number of tokens to generate in the completion.",
        default=16,
    )
    top_p: Optional[float] = Field(
        title="Top p probability mass",
        description="An alternative to sampling with temperature, "
        "called nucleus sampling, where the model considers the results "
        "of the tokens with top_p probability mass.",
        default=1,
    )
    stop: Optional[Union[str, List[str]]] = Field(
        title="Stop sequence(s)",
        description="The string (or list of strings) after which the model will stop "
        "generating. The returned text will not contain the stop sequence.",
        default=None,
    )
    presence_penalty: Optional[float] = Field(
        title="Penalize tokens on whether present.",
        description="Number between -2.0 and 2.0. Positive values penalize new tokens "
        "based on whether they appear in the generation so far.",
        default=0,
    )
    frequency_penalty: Optional[float] = Field(
        title="Penalize tokens on whether frequent.",
        description="Number between -2.0 and 2.0. Positive values penalize new tokens "
        "based on how frequently they appear in the generation so far.",
        default=0,
    )
    other: Optional[Dict[str, Any]] = Field(
        title="Other provider parameters",
        description="Other parameter values to be passed to the provider call.",
        default={},
    )


class ModelConfigResponse(ModelConfig):
    """
    Extends the core ModelConfig request object to include Humanloop generated
    identifier and method for serializing response from ModelConfig domain object.
    """

    id: str = Field(
        title="Model config ID",
        description="Model config unique identifier generated by Humanloop.",
    )
    display_name: Optional[str] = Field(
        title="Model config name",
        description="A friendly display name for the model config.",
    )


class ProjectModelConfig(ModelConfig):
    project: str = Field(
        title="Project name",
        description="Unique project name. If it does not exist, a new project will "
        "be created.",
    )
    name: Optional[str] = Field(
        title="Config name",
        description="A friendly display name for config. If not provided, a name "
        "will be generated.",
    )
    experiment: Optional[str] = Field(
        title="Experiment name",
        description="If specified, the model config will be added to this experiment. "
        "Experiments are used for A/B testing and optimizing hyperparameters.",
    )


class ProjectModelConfigResponse(ModelConfigResponse):
    project_id: Optional[str] = Field(
        title="Project ID",
        description="String ID of project the model config belongs to. Starts with `pr_`.",
    )
    experiment_id: Optional[str] = Field(
        title="Experiment ID",
        description="The ID of the experiment the model config has been registered to. "
        "Only populated when registering a model config to an experiment.",
    )
    created_at: datetime.datetime


class GetModelConfigResponse(ProjectModelConfigResponse):
    """A selected model config.

    If the model config was selected in the context of an experiment,
    the response will include a trial_id to associate a subsequent log() call.
    """

    trial_id: Optional[str] = Field(
        title="Trial ID",
        description="ID of trial to reference in subsequent log calls.",
    )
